"use strict";
/*!
 * Chart.js
 * http://chartjs.org/
 * Version: 2.7.2
 *
 * Copyright 2018 Chart.js Contributors
 * Released under the MIT license
 * https://github.com/chartjs/Chart.js/blob/master/LICENSE.md
 */
(function (f) { if (typeof exports === "object" && typeof module !== "undefined") {
    module.exports = f();
}
else if (typeof define === "function" && define.amd) {
    define([], f);
}
else {
    var g;
    if (typeof window !== "undefined") {
        g = window;
    }
    else if (typeof global !== "undefined") {
        g = global;
    }
    else if (typeof self !== "undefined") {
        g = self;
    }
    else {
        g = this;
    }
    g.Chart = f();
} })(function () {
    var define, module, exports;
    return (function () { function e(t, n, r) { function s(o, u) { if (!n[o]) {
        if (!t[o]) {
            var a = typeof require == "function" && require;
            if (!u && a)
                return a(o, !0);
            if (i)
                return i(o, !0);
            var f = new Error("Cannot find module '" + o + "'");
            throw f.code = "MODULE_NOT_FOUND", f;
        }
        var l = n[o] = { exports: {} };
        t[o][0].call(l.exports, function (e) { var n = t[o][1][e]; return s(n ? n : e); }, l, l.exports, e, t, n, r);
    } return n[o].exports; } var i = typeof require == "function" && require; for (var o = 0; o < r.length; o++)
        s(r[o]); return s; } return e; })()({ 1: [function (require, module, exports) {
            }, {}], 2: [function (require, module, exports) {
                /* MIT license */
                var colorNames = require(6);
                module.exports = {
                    getRgba: getRgba,
                    getHsla: getHsla,
                    getRgb: getRgb,
                    getHsl: getHsl,
                    getHwb: getHwb,
                    getAlpha: getAlpha,
                    hexString: hexString,
                    rgbString: rgbString,
                    rgbaString: rgbaString,
                    percentString: percentString,
                    percentaString: percentaString,
                    hslString: hslString,
                    hslaString: hslaString,
                    hwbString: hwbString,
                    keyword: keyword
                };
                function getRgba(string) {
                    if (!string) {
                        return;
                    }
                    var abbr = /^#([a-fA-F0-9]{3})$/i, hex = /^#([a-fA-F0-9]{6})$/i, rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i, per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i, keyword = /(\w+)/;
                    var rgb = [0, 0, 0], a = 1, match = string.match(abbr);
                    if (match) {
                        match = match[1];
                        for (var i = 0; i < rgb.length; i++) {
                            rgb[i] = parseInt(match[i] + match[i], 16);
                        }
                    }
                    else if (match = string.match(hex)) {
                        match = match[1];
                        for (var i = 0; i < rgb.length; i++) {
                            rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
                        }
                    }
                    else if (match = string.match(rgba)) {
                        for (var i = 0; i < rgb.length; i++) {
                            rgb[i] = parseInt(match[i + 1]);
                        }
                        a = parseFloat(match[4]);
                    }
                    else if (match = string.match(per)) {
                        for (var i = 0; i < rgb.length; i++) {
                            rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
                        }
                        a = parseFloat(match[4]);
                    }
                    else if (match = string.match(keyword)) {
                        if (match[1] == "transparent") {
                            return [0, 0, 0, 0];
                        }
                        rgb = colorNames[match[1]];
                        if (!rgb) {
                            return;
                        }
                    }
                    for (var i = 0; i < rgb.length; i++) {
                        rgb[i] = scale(rgb[i], 0, 255);
                    }
                    if (!a && a != 0) {
                        a = 1;
                    }
                    else {
                        a = scale(a, 0, 1);
                    }
                    rgb[3] = a;
                    return rgb;
                }
                function getHsla(string) {
                    if (!string) {
                        return;
                    }
                    var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
                    var match = string.match(hsl);
                    if (match) {
                        var alpha = parseFloat(match[4]);
                        var h = scale(parseInt(match[1]), 0, 360), s = scale(parseFloat(match[2]), 0, 100), l = scale(parseFloat(match[3]), 0, 100), a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
                        return [h, s, l, a];
                    }
                }
                function getHwb(string) {
                    if (!string) {
                        return;
                    }
                    var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
                    var match = string.match(hwb);
                    if (match) {
                        var alpha = parseFloat(match[4]);
                        var h = scale(parseInt(match[1]), 0, 360), w = scale(parseFloat(match[2]), 0, 100), b = scale(parseFloat(match[3]), 0, 100), a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
                        return [h, w, b, a];
                    }
                }
                function getRgb(string) {
                    var rgba = getRgba(string);
                    return rgba && rgba.slice(0, 3);
                }
                function getHsl(string) {
                    var hsla = getHsla(string);
                    return hsla && hsla.slice(0, 3);
                }
                function getAlpha(string) {
                    var vals = getRgba(string);
                    if (vals) {
                        return vals[3];
                    }
                    else if (vals = getHsla(string)) {
                        return vals[3];
                    }
                    else if (vals = getHwb(string)) {
                        return vals[3];
                    }
                }
                // generators
                function hexString(rgb) {
                    return "#" + hexDouble(rgb[0]) + hexDouble(rgb[1])
                        + hexDouble(rgb[2]);
                }
                function rgbString(rgba, alpha) {
                    if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
                        return rgbaString(rgba, alpha);
                    }
                    return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
                }
                function rgbaString(rgba, alpha) {
                    if (alpha === undefined) {
                        alpha = (rgba[3] !== undefined ? rgba[3] : 1);
                    }
                    return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2]
                        + ", " + alpha + ")";
                }
                function percentString(rgba, alpha) {
                    if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
                        return percentaString(rgba, alpha);
                    }
                    var r = Math.round(rgba[0] / 255 * 100), g = Math.round(rgba[1] / 255 * 100), b = Math.round(rgba[2] / 255 * 100);
                    return "rgb(" + r + "%, " + g + "%, " + b + "%)";
                }
                function percentaString(rgba, alpha) {
                    var r = Math.round(rgba[0] / 255 * 100), g = Math.round(rgba[1] / 255 * 100), b = Math.round(rgba[2] / 255 * 100);
                    return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
                }
                function hslString(hsla, alpha) {
                    if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {
                        return hslaString(hsla, alpha);
                    }
                    return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
                }
                function hslaString(hsla, alpha) {
                    if (alpha === undefined) {
                        alpha = (hsla[3] !== undefined ? hsla[3] : 1);
                    }
                    return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, "
                        + alpha + ")";
                }
                // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
                // (hwb have alpha optional & 1 is default value)
                function hwbString(hwb, alpha) {
                    if (alpha === undefined) {
                        alpha = (hwb[3] !== undefined ? hwb[3] : 1);
                    }
                    return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%"
                        + (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
                }
                function keyword(rgb) {
                    return reverseNames[rgb.slice(0, 3)];
                }
                // helpers
                function scale(num, min, max) {
                    return Math.min(Math.max(min, num), max);
                }
                function hexDouble(num) {
                    var str = num.toString(16).toUpperCase();
                    return (str.length < 2) ? "0" + str : str;
                }
                //create a list of reverse color names
                var reverseNames = {};
                for (var name in colorNames) {
                    reverseNames[colorNames[name]] = name;
                }
            }, { "6": 6 }], 3: [function (require, module, exports) {
                /* MIT license */
                var convert = require(5);
                var string = require(2);
                var Color = function (obj) {
                    if (obj instanceof Color) {
                        return obj;
                    }
                    if (!(this instanceof Color)) {
                        return new Color(obj);
                    }
                    this.valid = false;
                    this.values = {
                        rgb: [0, 0, 0],
                        hsl: [0, 0, 0],
                        hsv: [0, 0, 0],
                        hwb: [0, 0, 0],
                        cmyk: [0, 0, 0, 0],
                        alpha: 1
                    };
                    // parse Color() argument
                    var vals;
                    if (typeof obj === 'string') {
                        vals = string.getRgba(obj);
                        if (vals) {
                            this.setValues('rgb', vals);
                        }
                        else if (vals = string.getHsla(obj)) {
                            this.setValues('hsl', vals);
                        }
                        else if (vals = string.getHwb(obj)) {
                            this.setValues('hwb', vals);
                        }
                    }
                    else if (typeof obj === 'object') {
                        vals = obj;
                        if (vals.r !== undefined || vals.red !== undefined) {
                            this.setValues('rgb', vals);
                        }
                        else if (vals.l !== undefined || vals.lightness !== undefined) {
                            this.setValues('hsl', vals);
                        }
                        else if (vals.v !== undefined || vals.value !== undefined) {
                            this.setValues('hsv', vals);
                        }
                        else if (vals.w !== undefined || vals.whiteness !== undefined) {
                            this.setValues('hwb', vals);
                        }
                        else if (vals.c !== undefined || vals.cyan !== undefined) {
                            this.setValues('cmyk', vals);
                        }
                    }
                };
                Color.prototype = {
                    isValid: function () {
                        return this.valid;
                    },
                    rgb: function () {
                        return this.setSpace('rgb', arguments);
                    },
                    hsl: function () {
                        return this.setSpace('hsl', arguments);
                    },
                    hsv: function () {
                        return this.setSpace('hsv', arguments);
                    },
                    hwb: function () {
                        return this.setSpace('hwb', arguments);
                    },
                    cmyk: function () {
                        return this.setSpace('cmyk', arguments);
                    },
                    rgbArray: function () {
                        return this.values.rgb;
                    },
                    hslArray: function () {
                        return this.values.hsl;
                    },
                    hsvArray: function () {
                        return this.values.hsv;
                    },
                    hwbArray: function () {
                        var values = this.values;
                        if (values.alpha !== 1) {
                            return values.hwb.concat([values.alpha]);
                        }
                        return values.hwb;
                    },
                    cmykArray: function () {
                        return this.values.cmyk;
                    },
                    rgbaArray: function () {
                        var values = this.values;
                        return values.rgb.concat([values.alpha]);
                    },
                    hslaArray: function () {
                        var values = this.values;
                        return values.hsl.concat([values.alpha]);
                    },
                    alpha: function (val) {
                        if (val === undefined) {
                            return this.values.alpha;
                        }
                        this.setValues('alpha', val);
                        return this;
                    },
                    red: function (val) {
                        return this.setChannel('rgb', 0, val);
                    },
                    green: function (val) {
                        return this.setChannel('rgb', 1, val);
                    },
                    blue: function (val) {
                        return this.setChannel('rgb', 2, val);
                    },
                    hue: function (val) {
                        if (val) {
                            val %= 360;
                            val = val < 0 ? 360 + val : val;
                        }
                        return this.setChannel('hsl', 0, val);
                    },
                    saturation: function (val) {
                        return this.setChannel('hsl', 1, val);
                    },
                    lightness: function (val) {
                        return this.setChannel('hsl', 2, val);
                    },
                    saturationv: function (val) {
                        return this.setChannel('hsv', 1, val);
                    },
                    whiteness: function (val) {
                        return this.setChannel('hwb', 1, val);
                    },
                    blackness: function (val) {
                        return this.setChannel('hwb', 2, val);
                    },
                    value: function (val) {
                        return this.setChannel('hsv', 2, val);
                    },
                    cyan: function (val) {
                        return this.setChannel('cmyk', 0, val);
                    },
                    magenta: function (val) {
                        return this.setChannel('cmyk', 1, val);
                    },
                    yellow: function (val) {
                        return this.setChannel('cmyk', 2, val);
                    },
                    black: function (val) {
                        return this.setChannel('cmyk', 3, val);
                    },
                    hexString: function () {
                        return string.hexString(this.values.rgb);
                    },
                    rgbString: function () {
                        return string.rgbString(this.values.rgb, this.values.alpha);
                    },
                    rgbaString: function () {
                        return string.rgbaString(this.values.rgb, this.values.alpha);
                    },
                    percentString: function () {
                        return string.percentString(this.values.rgb, this.values.alpha);
                    },
                    hslString: function () {
                        return string.hslString(this.values.hsl, this.values.alpha);
                    },
                    hslaString: function () {
                        return string.hslaString(this.values.hsl, this.values.alpha);
                    },
                    hwbString: function () {
                        return string.hwbString(this.values.hwb, this.values.alpha);
                    },
                    keyword: function () {
                        return string.keyword(this.values.rgb, this.values.alpha);
                    },
                    rgbNumber: function () {
                        var rgb = this.values.rgb;
                        return (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];
                    },
                    luminosity: function () {
                        // http://www.w3.org/TR/WCAG20/#relativeluminancedef
                        var rgb = this.values.rgb;
                        var lum = [];
                        for (var i = 0; i < rgb.length; i++) {
                            var chan = rgb[i] / 255;
                            lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
                        }
                        return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
                    },
                    contrast: function (color2) {
                        // http://www.w3.org/TR/WCAG20/#contrast-ratiodef
                        var lum1 = this.luminosity();
                        var lum2 = color2.luminosity();
                        if (lum1 > lum2) {
                            return (lum1 + 0.05) / (lum2 + 0.05);
                        }
                        return (lum2 + 0.05) / (lum1 + 0.05);
                    },
                    level: function (color2) {
                        var contrastRatio = this.contrast(color2);
                        if (contrastRatio >= 7.1) {
                            return 'AAA';
                        }
                        return (contrastRatio >= 4.5) ? 'AA' : '';
                    },
                    dark: function () {
                        // YIQ equation from http://24ways.org/2010/calculating-color-contrast
                        var rgb = this.values.rgb;
                        var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
                        return yiq < 128;
                    },
                    light: function () {
                        return !this.dark();
                    },
                    negate: function () {
                        var rgb = [];
                        for (var i = 0; i < 3; i++) {
                            rgb[i] = 255 - this.values.rgb[i];
                        }
                        this.setValues('rgb', rgb);
                        return this;
                    },
                    lighten: function (ratio) {
                        var hsl = this.values.hsl;
                        hsl[2] += hsl[2] * ratio;
                        this.setValues('hsl', hsl);
                        return this;
                    },
                    darken: function (ratio) {
                        var hsl = this.values.hsl;
                        hsl[2] -= hsl[2] * ratio;
                        this.setValues('hsl', hsl);
                        return this;
                    },
                    saturate: function (ratio) {
                        var hsl = this.values.hsl;
                        hsl[1] += hsl[1] * ratio;
                        this.setValues('hsl', hsl);
                        return this;
                    },
                    desaturate: function (ratio) {
                        var hsl = this.values.hsl;
                        hsl[1] -= hsl[1] * ratio;
                        this.setValues('hsl', hsl);
                        return this;
                    },
                    whiten: function (ratio) {
                        var hwb = this.values.hwb;
                        hwb[1] += hwb[1] * ratio;
                        this.setValues('hwb', hwb);
                        return this;
                    },
                    blacken: function (ratio) {
                        var hwb = this.values.hwb;
                        hwb[2] += hwb[2] * ratio;
                        this.setValues('hwb', hwb);
                        return this;
                    },
                    greyscale: function () {
                        var rgb = this.values.rgb;
                        // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
                        var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
                        this.setValues('rgb', [val, val, val]);
                        return this;
                    },
                    clearer: function (ratio) {
                        var alpha = this.values.alpha;
                        this.setValues('alpha', alpha - (alpha * ratio));
                        return this;
                    },
                    opaquer: function (ratio) {
                        var alpha = this.values.alpha;
                        this.setValues('alpha', alpha + (alpha * ratio));
                        return this;
                    },
                    rotate: function (degrees) {
                        var hsl = this.values.hsl;
                        var hue = (hsl[0] + degrees) % 360;
                        hsl[0] = hue < 0 ? 360 + hue : hue;
                        this.setValues('hsl', hsl);
                        return this;
                    },
                    /**
                     * Ported from sass implementation in C
                     * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
                     */
                    mix: function (mixinColor, weight) {
                        var color1 = this;
                        var color2 = mixinColor;
                        var p = weight === undefined ? 0.5 : weight;
                        var w = 2 * p - 1;
                        var a = color1.alpha() - color2.alpha();
                        var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
                        var w2 = 1 - w1;
                        return this
                            .rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue())
                            .alpha(color1.alpha() * p + color2.alpha() * (1 - p));
                    },
                    toJSON: function () {
                        return this.rgb();
                    },
                    clone: function () {
                        // NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,
                        // making the final build way to big to embed in Chart.js. So let's do it manually,
                        // assuming that values to clone are 1 dimension arrays containing only numbers,
                        // except 'alpha' which is a number.
                        var result = new Color();
                        var source = this.values;
                        var target = result.values;
                        var value, type;
                        for (var prop in source) {
                            if (source.hasOwnProperty(prop)) {
                                value = source[prop];
                                type = ({}).toString.call(value);
                                if (type === '[object Array]') {
                                    target[prop] = value.slice(0);
                                }
                                else if (type === '[object Number]') {
                                    target[prop] = value;
                                }
                                else {
                                    console.error('unexpected color value:', value);
                                }
                            }
                        }
                        return result;
                    }
                };
                Color.prototype.spaces = {
                    rgb: ['red', 'green', 'blue'],
                    hsl: ['hue', 'saturation', 'lightness'],
                    hsv: ['hue', 'saturation', 'value'],
                    hwb: ['hue', 'whiteness', 'blackness'],
                    cmyk: ['cyan', 'magenta', 'yellow', 'black']
                };
                Color.prototype.maxes = {
                    rgb: [255, 255, 255],
                    hsl: [360, 100, 100],
                    hsv: [360, 100, 100],
                    hwb: [360, 100, 100],
                    cmyk: [100, 100, 100, 100]
                };
                Color.prototype.getValues = function (space) {
                    var values = this.values;
                    var vals = {};
                    for (var i = 0; i < space.length; i++) {
                        vals[space.charAt(i)] = values[space][i];
                    }
                    if (values.alpha !== 1) {
                        vals.a = values.alpha;
                    }
                    // {r: 255, g: 255, b: 255, a: 0.4}
                    return vals;
                };
                Color.prototype.setValues = function (space, vals) {
                    var values = this.values;
                    var spaces = this.spaces;
                    var maxes = this.maxes;
                    var alpha = 1;
                    var i;
                    this.valid = true;
                    if (space === 'alpha') {
                        alpha = vals;
                    }
                    else if (vals.length) {
                        // [10, 10, 10]
                        values[space] = vals.slice(0, space.length);
                        alpha = vals[space.length];
                    }
                    else if (vals[space.charAt(0)] !== undefined) {
                        // {r: 10, g: 10, b: 10}
                        for (i = 0; i < space.length; i++) {
                            values[space][i] = vals[space.charAt(i)];
                        }
                        alpha = vals.a;
                    }
                    else if (vals[spaces[space][0]] !== undefined) {
                        // {red: 10, green: 10, blue: 10}
                        var chans = spaces[space];
                        for (i = 0; i < space.length; i++) {
                            values[space][i] = vals[chans[i]];
                        }
                        alpha = vals.alpha;
                    }
                    values.alpha = Math.max(0, Math.min(1, (alpha === undefined ? values.alpha : alpha)));
                    if (space === 'alpha') {
                        return false;
                    }
                    var capped;
                    // cap values of the space prior converting all values
                    for (i = 0; i < space.length; i++) {
                        capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
                        values[space][i] = Math.round(capped);
                    }
                    // convert to all the other color spaces
                    for (var sname in spaces) {
                        if (sname !== space) {
                            values[sname] = convert[space][sname](values[space]);
                        }
                    }
                    return true;
                };
                Color.prototype.setSpace = function (space, args) {
                    var vals = args[0];
                    if (vals === undefined) {
                        // color.rgb()
                        return this.getValues(space);
                    }
                    // color.rgb(10, 10, 10)
                    if (typeof vals === 'number') {
                        vals = Array.prototype.slice.call(args);
                    }
                    this.setValues(space, vals);
                    return this;
                };
                Color.prototype.setChannel = function (space, index, val) {
                    var svalues = this.values[space];
                    if (val === undefined) {
                        // color.red()
                        return svalues[index];
                    }
                    else if (val === svalues[index]) {
                        // color.red(color.red())
                        return this;
                    }
                    // color.red(100)
                    svalues[index] = val;
                    this.setValues(space, svalues);
                    return this;
                };
                if (typeof window !== 'undefined') {
                    window.Color = Color;
                }
                module.exports = Color;
            }, { "2": 2, "5": 5 }], 4: [function (require, module, exports) {
                /* MIT license */
                module.exports = {
                    rgb2hsl: rgb2hsl,
                    rgb2hsv: rgb2hsv,
                    rgb2hwb: rgb2hwb,
                    rgb2cmyk: rgb2cmyk,
                    rgb2keyword: rgb2keyword,
                    rgb2xyz: rgb2xyz,
                    rgb2lab: rgb2lab,
                    rgb2lch: rgb2lch,
                    hsl2rgb: hsl2rgb,
                    hsl2hsv: hsl2hsv,
                    hsl2hwb: hsl2hwb,
                    hsl2cmyk: hsl2cmyk,
                    hsl2keyword: hsl2keyword,
                    hsv2rgb: hsv2rgb,
                    hsv2hsl: hsv2hsl,
                    hsv2hwb: hsv2hwb,
                    hsv2cmyk: hsv2cmyk,
                    hsv2keyword: hsv2keyword,
                    hwb2rgb: hwb2rgb,
                    hwb2hsl: hwb2hsl,
                    hwb2hsv: hwb2hsv,
                    hwb2cmyk: hwb2cmyk,
                    hwb2keyword: hwb2keyword,
                    cmyk2rgb: cmyk2rgb,
                    cmyk2hsl: cmyk2hsl,
                    cmyk2hsv: cmyk2hsv,
                    cmyk2hwb: cmyk2hwb,
                    cmyk2keyword: cmyk2keyword,
                    keyword2rgb: keyword2rgb,
                    keyword2hsl: keyword2hsl,
                    keyword2hsv: keyword2hsv,
                    keyword2hwb: keyword2hwb,
                    keyword2cmyk: keyword2cmyk,
                    keyword2lab: keyword2lab,
                    keyword2xyz: keyword2xyz,
                    xyz2rgb: xyz2rgb,
                    xyz2lab: xyz2lab,
                    xyz2lch: xyz2lch,
                    lab2xyz: lab2xyz,
                    lab2rgb: lab2rgb,
                    lab2lch: lab2lch,
                    lch2lab: lch2lab,
                    lch2xyz: lch2xyz,
                    lch2rgb: lch2rgb
                };
                function rgb2hsl(rgb) {
                    var r = rgb[0] / 255, g = rgb[1] / 255, b = rgb[2] / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), delta = max - min, h, s, l;
                    if (max == min)
                        h = 0;
                    else if (r == max)
                        h = (g - b) / delta;
                    else if (g == max)
                        h = 2 + (b - r) / delta;
                    else if (b == max)
                        h = 4 + (r - g) / delta;
                    h = Math.min(h * 60, 360);
                    if (h < 0)
                        h += 360;
                    l = (min + max) / 2;
                    if (max == min)
                        s = 0;
                    else if (l <= 0.5)
                        s = delta / (max + min);
                    else
                        s = delta / (2 - max - min);
                    return [h, s * 100, l * 100];
                }
                function rgb2hsv(rgb) {
                    var r = rgb[0], g = rgb[1], b = rgb[2], min = Math.min(r, g, b), max = Math.max(r, g, b), delta = max - min, h, s, v;
                    if (max == 0)
                        s = 0;
                    else
                        s = (delta / max * 1000) / 10;
                    if (max == min)
                        h = 0;
                    else if (r == max)
                        h = (g - b) / delta;
                    else if (g == max)
                        h = 2 + (b - r) / delta;
                    else if (b == max)
                        h = 4 + (r - g) / delta;
                    h = Math.min(h * 60, 360);
                    if (h < 0)
                        h += 360;
                    v = ((max / 255) * 1000) / 10;
                    return [h, s, v];
                }
                function rgb2hwb(rgb) {
                    var r = rgb[0], g = rgb[1], b = rgb[2], h = rgb2hsl(rgb)[0], w = 1 / 255 * Math.min(r, Math.min(g, b)), b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
                    return [h, w * 100, b * 100];
                }
                function rgb2cmyk(rgb) {
                    var r = rgb[0] / 255, g = rgb[1] / 255, b = rgb[2] / 255, c, m, y, k;
                    k = Math.min(1 - r, 1 - g, 1 - b);
                    c = (1 - r - k) / (1 - k) || 0;
                    m = (1 - g - k) / (1 - k) || 0;
                    y = (1 - b - k) / (1 - k) || 0;
                    return [c * 100, m * 100, y * 100, k * 100];
                }
                function rgb2keyword(rgb) {
                    return reverseKeywords[JSON.stringify(rgb)];
                }
                function rgb2xyz(rgb) {
                    var r = rgb[0] / 255, g = rgb[1] / 255, b = rgb[2] / 255;
                    // assume sRGB
                    r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
                    g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
                    b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);
                    var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
                    var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
                    var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);
                    return [x * 100, y * 100, z * 100];
                }
                function rgb2lab(rgb) {
                    var xyz = rgb2xyz(rgb), x = xyz[0], y = xyz[1], z = xyz[2], l, a, b;
                    x /= 95.047;
                    y /= 100;
                    z /= 108.883;
                    x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
                    y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
                    z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);
                    l = (116 * y) - 16;
                    a = 500 * (x - y);
                    b = 200 * (y - z);
                    return [l, a, b];
                }
                function rgb2lch(args) {
                    return lab2lch(rgb2lab(args));
                }
                function hsl2rgb(hsl) {
                    var h = hsl[0] / 360, s = hsl[1] / 100, l = hsl[2] / 100, t1, t2, t3, rgb, val;
                    if (s == 0) {
                        val = l * 255;
                        return [val, val, val];
                    }
                    if (l < 0.5)
                        t2 = l * (1 + s);
                    else
                        t2 = l + s - l * s;
                    t1 = 2 * l - t2;
                    rgb = [0, 0, 0];
                    for (var i = 0; i < 3; i++) {
                        t3 = h + 1 / 3 * -(i - 1);
                        t3 < 0 && t3++;
                        t3 > 1 && t3--;
                        if (6 * t3 < 1)
                            val = t1 + (t2 - t1) * 6 * t3;
                        else if (2 * t3 < 1)
                            val = t2;
                        else if (3 * t3 < 2)
                            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
                        else
                            val = t1;
                        rgb[i] = val * 255;
                    }
                    return rgb;
                }
                function hsl2hsv(hsl) {
                    var h = hsl[0], s = hsl[1] / 100, l = hsl[2] / 100, sv, v;
                    if (l === 0) {
                        // no need to do calc on black
                        // also avoids divide by 0 error
                        return [0, 0, 0];
                    }
                    l *= 2;
                    s *= (l <= 1) ? l : 2 - l;
                    v = (l + s) / 2;
                    sv = (2 * s) / (l + s);
                    return [h, sv * 100, v * 100];
                }
                function hsl2hwb(args) {
                    return rgb2hwb(hsl2rgb(args));
                }
                function hsl2cmyk(args) {
                    return rgb2cmyk(hsl2rgb(args));
                }
                function hsl2keyword(args) {
                    return rgb2keyword(hsl2rgb(args));
                }
                function hsv2rgb(hsv) {
                    var h = hsv[0] / 60, s = hsv[1] / 100, v = hsv[2] / 100, hi = Math.floor(h) % 6;
                    var f = h - Math.floor(h), p = 255 * v * (1 - s), q = 255 * v * (1 - (s * f)), t = 255 * v * (1 - (s * (1 - f))), v = 255 * v;
                    switch (hi) {
                        case 0:
                            return [v, t, p];
                        case 1:
                            return [q, v, p];
                        case 2:
                            return [p, v, t];
                        case 3:
                            return [p, q, v];
                        case 4:
                            return [t, p, v];
                        case 5:
                            return [v, p, q];
                    }
                }
                function hsv2hsl(hsv) {
                    var h = hsv[0], s = hsv[1] / 100, v = hsv[2] / 100, sl, l;
                    l = (2 - s) * v;
                    sl = s * v;
                    sl /= (l <= 1) ? l : 2 - l;
                    sl = sl || 0;
                    l /= 2;
                    return [h, sl * 100, l * 100];
                }
                function hsv2hwb(args) {
                    return rgb2hwb(hsv2rgb(args));
                }
                function hsv2cmyk(args) {
                    return rgb2cmyk(hsv2rgb(args));
                }
                function hsv2keyword(args) {
                    return rgb2keyword(hsv2rgb(args));
                }
                // http://dev.w3.org/csswg/css-color/#hwb-to-rgb
                function hwb2rgb(hwb) {
                    var h = hwb[0] / 360, wh = hwb[1] / 100, bl = hwb[2] / 100, ratio = wh + bl, i, v, f, n;
                    // wh + bl cant be > 1
                    if (ratio > 1) {
                        wh /= ratio;
                        bl /= ratio;
                    }
                    i = Math.floor(6 * h);
                    v = 1 - bl;
                    f = 6 * h - i;
                    if ((i & 0x01) != 0) {
                        f = 1 - f;
                    }
                    n = wh + f * (v - wh); // linear interpolation
                    switch (i) {
                        default:
                        case 6:
                        case 0:
                            r = v;
                            g = n;
                            b = wh;
                            break;
                        case 1:
                            r = n;
                            g = v;
                            b = wh;
                            break;
                        case 2:
                            r = wh;
                            g = v;
                            b = n;
                            break;
                        case 3:
                            r = wh;
                            g = n;
                            b = v;
                            break;
                        case 4:
                            r = n;
                            g = wh;
                            b = v;
                            break;
                        case 5:
                            r = v;
                            g = wh;
                            b = n;
                            break;
                    }
                    return [r * 255, g * 255, b * 255];
                }
                function hwb2hsl(args) {
                    return rgb2hsl(hwb2rgb(args));
                }
                function hwb2hsv(args) {
                    return rgb2hsv(hwb2rgb(args));
                }
                function hwb2cmyk(args) {
                    return rgb2cmyk(hwb2rgb(args));
                }
                function hwb2keyword(args) {
                    return rgb2keyword(hwb2rgb(args));
                }
                function cmyk2rgb(cmyk) {
                    var c = cmyk[0] / 100, m = cmyk[1] / 100, y = cmyk[2] / 100, k = cmyk[3] / 100, r, g, b;
                    r = 1 - Math.min(1, c * (1 - k) + k);
                    g = 1 - Math.min(1, m * (1 - k) + k);
                    b = 1 - Math.min(1, y * (1 - k) + k);
                    return [r * 255, g * 255, b * 255];
                }
                function cmyk2hsl(args) {
                    return rgb2hsl(cmyk2rgb(args));
                }
                function cmyk2hsv(args) {
                    return rgb2hsv(cmyk2rgb(args));
                }
                function cmyk2hwb(args) {
                    return rgb2hwb(cmyk2rgb(args));
                }
                function cmyk2keyword(args) {
                    return rgb2keyword(cmyk2rgb(args));
                }
                function xyz2rgb(xyz) {
                    var x = xyz[0] / 100, y = xyz[1] / 100, z = xyz[2] / 100, r, g, b;
                    r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
                    g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
                    b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);
                    // assume sRGB
                    r = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
                        : r = (r * 12.92);
                    g = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
                        : g = (g * 12.92);
                    b = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
                        : b = (b * 12.92);
                    r = Math.min(Math.max(0, r), 1);
                    g = Math.min(Math.max(0, g), 1);
                    b = Math.min(Math.max(0, b), 1);
                    return [r * 255, g * 255, b * 255];
                }
                function xyz2lab(xyz) {
                    var x = xyz[0], y = xyz[1], z = xyz[2], l, a, b;
                    x /= 95.047;
                    y /= 100;
                    z /= 108.883;
                    x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
                    y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
                    z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);
                    l = (116 * y) - 16;
                    a = 500 * (x - y);
                    b = 200 * (y - z);
                    return [l, a, b];
                }
                function xyz2lch(args) {
                    return lab2lch(xyz2lab(args));
                }
                function lab2xyz(lab) {
                    var l = lab[0], a = lab[1], b = lab[2], x, y, z, y2;
                    if (l <= 8) {
                        y = (l * 100) / 903.3;
                        y2 = (7.787 * (y / 100)) + (16 / 116);
                    }
                    else {
                        y = 100 * Math.pow((l + 16) / 116, 3);
                        y2 = Math.pow(y / 100, 1 / 3);
                    }
                    x = x / 95.047 <= 0.008856 ? x = (95.047 * ((a / 500) + y2 - (16 / 116))) / 7.787 : 95.047 * Math.pow((a / 500) + y2, 3);
                    z = z / 108.883 <= 0.008859 ? z = (108.883 * (y2 - (b / 200) - (16 / 116))) / 7.787 : 108.883 * Math.pow(y2 - (b / 200), 3);
                    return [x, y, z];
                }
                function lab2lch(lab) {
                    var l = lab[0], a = lab[1], b = lab[2], hr, h, c;
                    hr = Math.atan2(b, a);
                    h = hr * 360 / 2 / Math.PI;
                    if (h < 0) {
                        h += 360;
                    }
                    c = Math.sqrt(a * a + b * b);
                    return [l, c, h];
                }
                function lab2rgb(args) {
                    return xyz2rgb(lab2xyz(args));
                }
                function lch2lab(lch) {
                    var l = lch[0], c = lch[1], h = lch[2], a, b, hr;
                    hr = h / 360 * 2 * Math.PI;
                    a = c * Math.cos(hr);
                    b = c * Math.sin(hr);
                    return [l, a, b];
                }
                function lch2xyz(args) {
                    return lab2xyz(lch2lab(args));
                }
                function lch2rgb(args) {
                    return lab2rgb(lch2lab(args));
                }
                function keyword2rgb(keyword) {
                    return cssKeywords[keyword];
                }
                function keyword2hsl(args) {
                    return rgb2hsl(keyword2rgb(args));
                }
                function keyword2hsv(args) {
                    return rgb2hsv(keyword2rgb(args));
                }
                function keyword2hwb(args) {
                    return rgb2hwb(keyword2rgb(args));
                }
                function keyword2cmyk(args) {
                    return rgb2cmyk(keyword2rgb(args));
                }
                function keyword2lab(args) {
                    return rgb2lab(keyword2rgb(args));
                }
                function keyword2xyz(args) {
                    return rgb2xyz(keyword2rgb(args));
                }
                var cssKeywords = {
                    aliceblue: [240, 248, 255],
                    antiquewhite: [250, 235, 215],
                    aqua: [0, 255, 255],
                    aquamarine: [127, 255, 212],
                    azure: [240, 255, 255],
                    beige: [245, 245, 220],
                    bisque: [255, 228, 196],
                    black: [0, 0, 0],
                    blanchedalmond: [255, 235, 205],
                    blue: [0, 0, 255],
                    blueviolet: [138, 43, 226],
                    brown: [165, 42, 42],
                    burlywood: [222, 184, 135],
                    cadetblue: [95, 158, 160],
                    chartreuse: [127, 255, 0],
                    chocolate: [210, 105, 30],
                    coral: [255, 127, 80],
                    cornflowerblue: [100, 149, 237],
                    cornsilk: [255, 248, 220],
                    crimson: [220, 20, 60],
                    cyan: [0, 255, 255],
                    darkblue: [0, 0, 139],
                    darkcyan: [0, 139, 139],
                    darkgoldenrod: [184, 134, 11],
                    darkgray: [169, 169, 169],
                    darkgreen: [0, 100, 0],
                    darkgrey: [169, 169, 169],
                    darkkhaki: [189, 183, 107],
                    darkmagenta: [139, 0, 139],
                    darkolivegreen: [85, 107, 47],
                    darkorange: [255, 140, 0],
                    darkorchid: [153, 50, 204],
                    darkred: [139, 0, 0],
                    darksalmon: [233, 150, 122],
                    darkseagreen: [143, 188, 143],
                    darkslateblue: [72, 61, 139],
                    darkslategray: [47, 79, 79],
                    darkslategrey: [47, 79, 79],
                    darkturquoise: [0, 206, 209],
                    darkviolet: [148, 0, 211],
                    deeppink: [255, 20, 147],
                    deepskyblue: [0, 191, 255],
                    dimgray: [105, 105, 105],
                    dimgrey: [105, 105, 105],
                    dodgerblue: [30, 144, 255],
                    firebrick: [178, 34, 34],
                    floralwhite: [255, 250, 240],
                    forestgreen: [34, 139, 34],
                    fuchsia: [255, 0, 255],
                    gainsboro: [220, 220, 220],
                    ghostwhite: [248, 248, 255],
                    gold: [255, 215, 0],
                    goldenrod: [218, 165, 32],
                    gray: [128, 128, 128],
                    green: [0, 128, 0],
                    greenyellow: [173, 255, 47],
                    grey: [128, 128, 128],
                    honeydew: [240, 255, 240],
                    hotpink: [255, 105, 180],
                    indianred: [205, 92, 92],
                    indigo: [75, 0, 130],
                    ivory: [255, 255, 240],
                    khaki: [240, 230, 140],
                    lavender: [230, 230, 250],
                    lavenderblush: [255, 240, 245],
                    lawngreen: [124, 252, 0],
                    lemonchiffon: [255, 250, 205],
                    lightblue: [173, 216, 230],
                    lightcoral: [240, 128, 128],
                    lightcyan: [224, 255, 255],
                    lightgoldenrodyellow: [250, 250, 210],
                    lightgray: [211, 211, 211],
                    lightgreen: [144, 238, 144],
                    lightgrey: [211, 211, 211],
                    lightpink: [255, 182, 193],
                    lightsalmon: [255, 160, 122],
                    lightseagreen: [32, 178, 170],
                    lightskyblue: [135, 206, 250],
                    lightslategray: [119, 136, 153],
                    lightslategrey: [119, 136, 153],
                    lightsteelblue: [176, 196, 222],
                    lightyellow: [255, 255, 224],
                    lime: [0, 255, 0],
                    limegreen: [50, 205, 50],
                    linen: [250, 240, 230],
                    magenta: [255, 0, 255],
                    maroon: [128, 0, 0],
                    mediumaquamarine: [102, 205, 170],
                    mediumblue: [0, 0, 205],
                    mediumorchid: [186, 85, 211],
                    mediumpurple: [147, 112, 219],
                    mediumseagreen: [60, 179, 113],
                    mediumslateblue: [123, 104, 238],
                    mediumspringgreen: [0, 250, 154],
                    mediumturquoise: [72, 209, 204],
                    mediumvioletred: [199, 21, 133],
                    midnightblue: [25, 25, 112],
                    mintcream: [245, 255, 250],
                    mistyrose: [255, 228, 225],
                    moccasin: [255, 228, 181],
                    navajowhite: [255, 222, 173],
                    navy: [0, 0, 128],
                    oldlace: [253, 245, 230],
                    olive: [128, 128, 0],
                    olivedrab: [107, 142, 35],
                    orange: [255, 165, 0],
                    orangered: [255, 69, 0],
                    orchid: [218, 112, 214],
                    palegoldenrod: [238, 232, 170],
                    palegreen: [152, 251, 152],
                    paleturquoise: [175, 238, 238],
                    palevioletred: [219, 112, 147],
                    papayawhip: [255, 239, 213],
                    peachpuff: [255, 218, 185],
                    peru: [205, 133, 63],
                    pink: [255, 192, 203],
                    plum: [221, 160, 221],
                    powderblue: [176, 224, 230],
                    purple: [128, 0, 128],
                    rebeccapurple: [102, 51, 153],
                    red: [255, 0, 0],
                    rosybrown: [188, 143, 143],
                    royalblue: [65, 105, 225],
                    saddlebrown: [139, 69, 19],
                    salmon: [250, 128, 114],
                    sandybrown: [244, 164, 96],
                    seagreen: [46, 139, 87],
                    seashell: [255, 245, 238],
                    sienna: [160, 82, 45],
                    silver: [192, 192, 192],
                    skyblue: [135, 206, 235],
                    slateblue: [106, 90, 205],
                    slategray: [112, 128, 144],
                    slategrey: [112, 128, 144],
                    snow: [255, 250, 250],
                    springgreen: [0, 255, 127],
                    steelblue: [70, 130, 180],
                    tan: [210, 180, 140],
                    teal: [0, 128, 128],
                    thistle: [216, 191, 216],
                    tomato: [255, 99, 71],
                    turquoise: [64, 224, 208],
                    violet: [238, 130, 238],
                    wheat: [245, 222, 179],
                    white: [255, 255, 255],
                    whitesmoke: [245, 245, 245],
                    yellow: [255, 255, 0],
                    yellowgreen: [154, 205, 50]
                };
                var reverseKeywords = {};
                for (var key in cssKeywords) {
                    reverseKeywords[JSON.stringify(cssKeywords[key])] = key;
                }
            }, {}], 5: [function (require, module, exports) {
                var conversions = require(4);
                var convert = function () {
                    return new Converter();
                };
                for (var func in conversions) {
                    // export Raw versions
                    convert[func + "Raw"] = (function (func) {
                        // accept array or plain args
                        return function (arg) {
                            if (typeof arg == "number")
                                arg = Array.prototype.slice.call(arguments);
                            return conversions[func](arg);
                        };
                    })(func);
                    var pair = /(\w+)2(\w+)/.exec(func), from = pair[1], to = pair[2];
                    // export rgb2hsl and ["rgb"]["hsl"]
                    convert[from] = convert[from] || {};
                    convert[from][to] = convert[func] = (function (func) {
                        return function (arg) {
                            if (typeof arg == "number")
                                arg = Array.prototype.slice.call(arguments);
                            var val = conversions[func](arg);
                            if (typeof val == "string" || val === undefined)
                                return val; // keyword
                            for (var i = 0; i < val.length; i++)
                                val[i] = Math.round(val[i]);
                            return val;
                        };
                    })(func);
                }
                /* Converter does lazy conversion and caching */
                var Converter = function () {
                    this.convs = {};
                };
                /* Either get the values for a space or
                  set the values for a space, depending on args */
                Converter.prototype.routeSpace = function (space, args) {
                    var values = args[0];
                    if (values === undefined) {
                        // color.rgb()
                        return this.getValues(space);
                    }
                    // color.rgb(10, 10, 10)
                    if (typeof values == "number") {
                        values = Array.prototype.slice.call(args);
                    }
                    return this.setValues(space, values);
                };
                /* Set the values for a space, invalidating cache */
                Converter.prototype.setValues = function (space, values) {
                    this.space = space;
                    this.convs = {};
                    this.convs[space] = values;
                    return this;
                };
                /* Get the values for a space. If there's already
                  a conversion for the space, fetch it, otherwise
                  compute it */
                Converter.prototype.getValues = function (space) {
                    var vals = this.convs[space];
                    if (!vals) {
                        var fspace = this.space, from = this.convs[fspace];
                        vals = convert[fspace][space](from);
                        this.convs[space] = vals;
                    }
                    return vals;
                };
                ["rgb", "hsl", "hsv", "cmyk", "keyword"].forEach(function (space) {
                    Converter.prototype[space] = function (vals) {
                        return this.routeSpace(space, arguments);
                    };
                });
                module.exports = convert;
            }, { "4": 4 }], 6: [function (require, module, exports) {
                'use strict';
                module.exports = {
                    "aliceblue": [240, 248, 255],
                    "antiquewhite": [250, 235, 215],
                    "aqua": [0, 255, 255],
                    "aquamarine": [127, 255, 212],
                    "azure": [240, 255, 255],
                    "beige": [245, 245, 220],
                    "bisque": [255, 228, 196],
                    "black": [0, 0, 0],
                    "blanchedalmond": [255, 235, 205],
                    "blue": [0, 0, 255],
                    "blueviolet": [138, 43, 226],
                    "brown": [165, 42, 42],
                    "burlywood": [222, 184, 135],
                    "cadetblue": [95, 158, 160],
                    "chartreuse": [127, 255, 0],
                    "chocolate": [210, 105, 30],
                    "coral": [255, 127, 80],
                    "cornflowerblue": [100, 149, 237],
                    "cornsilk": [255, 248, 220],
                    "crimson": [220, 20, 60],
                    "cyan": [0, 255, 255],
                    "darkblue": [0, 0, 139],
                    "darkcyan": [0, 139, 139],
                    "darkgoldenrod": [184, 134, 11],
                    "darkgray": [169, 169, 169],
                    "darkgreen": [0, 100, 0],
                    "darkgrey": [169, 169, 169],
                    "darkkhaki": [189, 183, 107],
                    "darkmagenta": [139, 0, 139],
                    "darkolivegreen": [85, 107, 47],
                    "darkorange": [255, 140, 0],
                    "darkorchid": [153, 50, 204],
                    "darkred": [139, 0, 0],
                    "darksalmon": [233, 150, 122],
                    "darkseagreen": [143, 188, 143],
                    "darkslateblue": [72, 61, 139],
                    "darkslategray": [47, 79, 79],
                    "darkslategrey": [47, 79, 79],
                    "darkturquoise": [0, 206, 209],
                    "darkviolet": [148, 0, 211],
                    "deeppink": [255, 20, 147],
                    "deepskyblue": [0, 191, 255],
                    "dimgray": [105, 105, 105],
                    "dimgrey": [105, 105, 105],
                    "dodgerblue": [30, 144, 255],
                    "firebrick": [178, 34, 34],
                    "floralwhite": [255, 250, 240],
                    "forestgreen": [34, 139, 34],
                    "fuchsia": [255, 0, 255],
                    "gainsboro": [220, 220, 220],
                    "ghostwhite": [248, 248, 255],
                    "gold": [255, 215, 0],
                    "goldenrod": [218, 165, 32],
                    "gray": [128, 128, 128],
                    "green": [0, 128, 0],
                    "greenyellow": [173, 255, 47],
                    "grey": [128, 128, 128],
                    "honeydew": [240, 255, 240],
                    "hotpink": [255, 105, 180],
                    "indianred": [205, 92, 92],
                    "indigo": [75, 0, 130],
                    "ivory": [255, 255, 240],
                    "khaki": [240, 230, 140],
                    "lavender": [230, 230, 250],
                    "lavenderblush": [255, 240, 245],
                    "lawngreen": [124, 252, 0],
                    "lemonchiffon": [255, 250, 205],
                    "lightblue": [173, 216, 230],
                    "lightcoral": [240, 128, 128],
                    "lightcyan": [224, 255, 255],
                    "lightgoldenrodyellow": [250, 250, 210],
                    "lightgray": [211, 211, 211],
                    "lightgreen": [144, 238, 144],
                    "lightgrey": [211, 211, 211],
                    "lightpink": [255, 182, 193],
                    "lightsalmon": [255, 160, 122],
                    "lightseagreen": [32, 178, 170],
                    "lightskyblue": [135, 206, 250],
                    "lightslategray": [119, 136, 153],
                    "lightslategrey": [119, 136, 153],
                    "lightsteelblue": [176, 196, 222],
                    "lightyellow": [255, 255, 224],
                    "lime": [0, 255, 0],
                    "limegreen": [50, 205, 50],
                    "linen": [250, 240, 230],
                    "magenta": [255, 0, 255],
                    "maroon": [128, 0, 0],
                    "mediumaquamarine": [102, 205, 170],
                    "mediumblue": [0, 0, 205],
                    "mediumorchid": [186, 85, 211],
                    "mediumpurple": [147, 112, 219],
                    "mediumseagreen": [60, 179, 113],
                    "mediumslateblue": [123, 104, 238],
                    "mediumspringgreen": [0, 250, 154],
                    "mediumturquoise": [72, 209, 204],
                    "mediumvioletred": [199, 21, 133],
                    "midnightblue": [25, 25, 112],
                    "mintcream": [245, 255, 250],
                    "mistyrose": [255, 228, 225],
                    "moccasin": [255, 228, 181],
                    "navajowhite": [255, 222, 173],
                    "navy": [0, 0, 128],
                    "oldlace": [253, 245, 230],
                    "olive": [128, 128, 0],
                    "olivedrab": [107, 142, 35],
                    "orange": [255, 165, 0],
                    "orangered": [255, 69, 0],
                    "orchid": [218, 112, 214],
                    "palegoldenrod": [238, 232, 170],
                    "palegreen": [152, 251, 152],
                    "paleturquoise": [175, 238, 238],
                    "palevioletred": [219, 112, 147],
                    "papayawhip": [255, 239, 213],
                    "peachpuff": [255, 218, 185],
                    "peru": [205, 133, 63],
                    "pink": [255, 192, 203],
                    "plum": [221, 160, 221],
                    "powderblue": [176, 224, 230],
                    "purple": [128, 0, 128],
                    "rebeccapurple": [102, 51, 153],
                    "red": [255, 0, 0],
                    "rosybrown": [188, 143, 143],
                    "royalblue": [65, 105, 225],
                    "saddlebrown": [139, 69, 19],
                    "salmon": [250, 128, 114],
                    "sandybrown": [244, 164, 96],
                    "seagreen": [46, 139, 87],
                    "seashell": [255, 245, 238],
                    "sienna": [160, 82, 45],
                    "silver": [192, 192, 192],
                    "skyblue": [135, 206, 235],
                    "slateblue": [106, 90, 205],
                    "slategray": [112, 128, 144],
                    "slategrey": [112, 128, 144],
                    "snow": [255, 250, 250],
                    "springgreen": [0, 255, 127],
                    "steelblue": [70, 130, 180],
                    "tan": [210, 180, 140],
                    "teal": [0, 128, 128],
                    "thistle": [216, 191, 216],
                    "tomato": [255, 99, 71],
                    "turquoise": [64, 224, 208],
                    "violet": [238, 130, 238],
                    "wheat": [245, 222, 179],
                    "white": [255, 255, 255],
                    "whitesmoke": [245, 245, 245],
                    "yellow": [255, 255, 0],
                    "yellowgreen": [154, 205, 50]
                };
            }, {}], 7: [function (require, module, exports) {
                /**
                 * @namespace Chart
                 */
                var Chart = require(29)();
                Chart.helpers = require(45);
                // @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!
                require(27)(Chart);
                Chart.defaults = require(25);
                Chart.Element = require(26);
                Chart.elements = require(40);
                Chart.Interaction = require(28);
                Chart.layouts = require(30);
                Chart.platform = require(48);
                Chart.plugins = require(31);
                Chart.Ticks = require(34);
                require(22)(Chart);
                require(23)(Chart);
                require(24)(Chart);
                require(33)(Chart);
                require(32)(Chart);
                require(35)(Chart);
                require(55)(Chart);
                require(53)(Chart);
                require(54)(Chart);
                require(56)(Chart);
                require(57)(Chart);
                require(58)(Chart);
                // Controllers must be loaded after elements
                // See Chart.core.datasetController.dataElementType
                require(15)(Chart);
                require(16)(Chart);
                require(17)(Chart);
                require(18)(Chart);
                require(19)(Chart);
                require(20)(Chart);
                require(21)(Chart);
                require(8)(Chart);
                require(9)(Chart);
                require(10)(Chart);
                require(11)(Chart);
                require(12)(Chart);
                require(13)(Chart);
                require(14)(Chart);
                // Loading built-it plugins
                var plugins = require(49);
                for (var k in plugins) {
                    if (plugins.hasOwnProperty(k)) {
                        Chart.plugins.register(plugins[k]);
                    }
                }
                Chart.platform.initialize();
                module.exports = Chart;
                if (typeof window !== 'undefined') {
                    window.Chart = Chart;
                }
                // DEPRECATIONS
                /**
                 * Provided for backward compatibility, not available anymore
                 * @namespace Chart.Legend
                 * @deprecated since version 2.1.5
                 * @todo remove at version 3
                 * @private
                 */
                Chart.Legend = plugins.legend._element;
                /**
                 * Provided for backward compatibility, not available anymore
                 * @namespace Chart.Title
                 * @deprecated since version 2.1.5
                 * @todo remove at version 3
                 * @private
                 */
                Chart.Title = plugins.title._element;
                /**
                 * Provided for backward compatibility, use Chart.plugins instead
                 * @namespace Chart.pluginService
                 * @deprecated since version 2.1.5
                 * @todo remove at version 3
                 * @private
                 */
                Chart.pluginService = Chart.plugins;
                /**
                 * Provided for backward compatibility, inheriting from Chart.PlugingBase has no
                 * effect, instead simply create/register plugins via plain JavaScript objects.
                 * @interface Chart.PluginBase
                 * @deprecated since version 2.5.0
                 * @todo remove at version 3
                 * @private
                 */
                Chart.PluginBase = Chart.Element.extend({});
                /**
                 * Provided for backward compatibility, use Chart.helpers.canvas instead.
                 * @namespace Chart.canvasHelpers
                 * @deprecated since version 2.6.0
                 * @todo remove at version 3
                 * @private
                 */
                Chart.canvasHelpers = Chart.helpers.canvas;
                /**
                 * Provided for backward compatibility, use Chart.layouts instead.
                 * @namespace Chart.layoutService
                 * @deprecated since version 2.8.0
                 * @todo remove at version 3
                 * @private
                 */
                Chart.layoutService = Chart.layouts;
            }, { "10": 10, "11": 11, "12": 12, "13": 13, "14": 14, "15": 15, "16": 16, "17": 17, "18": 18, "19": 19, "20": 20, "21": 21, "22": 22, "23": 23, "24": 24, "25": 25, "26": 26, "27": 27, "28": 28, "29": 29, "30": 30, "31": 31, "32": 32, "33": 33, "34": 34, "35": 35, "40": 40, "45": 45, "48": 48, "49": 49, "53": 53, "54": 54, "55": 55, "56": 56, "57": 57, "58": 58, "8": 8, "9": 9 }], 8: [function (require, module, exports) {
                'use strict';
                module.exports = function (Chart) {
                    Chart.Bar = function (context, config) {
                        config.type = 'bar';
                        return new Chart(context, config);
                    };
                };
            }, {}], 9: [function (require, module, exports) {
                'use strict';
                module.exports = function (Chart) {
                    Chart.Bubble = function (context, config) {
                        config.type = 'bubble';
                        return new Chart(context, config);
                    };
                };
            }, {}], 10: [function (require, module, exports) {
                'use strict';
                module.exports = function (Chart) {
                    Chart.Doughnut = function (context, config) {
                        config.type = 'doughnut';
                        return new Chart(context, config);
                    };
                };
            }, {}], 11: [function (require, module, exports) {
                'use strict';
                module.exports = function (Chart) {
                    Chart.Line = function (context, config) {
                        config.type = 'line';
                        return new Chart(context, config);
                    };
                };
            }, {}], 12: [function (require, module, exports) {
                'use strict';
                module.exports = function (Chart) {
                    Chart.PolarArea = function (context, config) {
                        config.type = 'polarArea';
                        return new Chart(context, config);
                    };
                };
            }, {}], 13: [function (require, module, exports) {
                'use strict';
                module.exports = function (Chart) {
                    Chart.Radar = function (context, config) {
                        config.type = 'radar';
                        return new Chart(context, config);
                    };
                };
            }, {}], 14: [function (require, module, exports) {
                'use strict';
                module.exports = function (Chart) {
                    Chart.Scatter = function (context, config) {
                        config.type = 'scatter';
                        return new Chart(context, config);
                    };
                };
            }, {}], 15: [function (require, module, exports) {
                'use strict';
                var defaults = require(25);
                var elements = require(40);
                var helpers = require(45);
                defaults._set('bar', {
                    hover: {
                        mode: 'label'
                    },
                    scales: {
                        xAxes: [{
                                type: 'category',
                                // Specific to Bar Controller
                                categoryPercentage: 0.8,
                                barPercentage: 0.9,
                                // offset settings
                                offset: true,
                                // grid line settings
                                gridLines: {
                                    offsetGridLines: true
                                }
                            }],
                        yAxes: [{
                                type: 'linear'
                            }]
                    }
                });
                defaults._set('horizontalBar', {
                    hover: {
                        mode: 'index',
                        axis: 'y'
                    },
                    scales: {
                        xAxes: [{
                                type: 'linear',
                                position: 'bottom'
                            }],
                        yAxes: [{
                                position: 'left',
                                type: 'category',
                                // Specific to Horizontal Bar Controller
                                categoryPercentage: 0.8,
                                barPercentage: 0.9,
                                // offset settings
                                offset: true,
                                // grid line settings
                                gridLines: {
                                    offsetGridLines: true
                                }
                            }]
                    },
                    elements: {
                        rectangle: {
                            borderSkipped: 'left'
                        }
                    },
                    tooltips: {
                        callbacks: {
                            title: function (item, data) {
                                // Pick first xLabel for now
                                var title = '';
                                if (item.length > 0) {
                                    if (item[0].yLabel) {
                                        title = item[0].yLabel;
                                    }
                                    else if (data.labels.length > 0 && item[0].index < data.labels.length) {
                                        title = data.labels[item[0].index];
                                    }
                                }
                                return title;
                            },
                            label: function (item, data) {
                                var datasetLabel = data.datasets[item.datasetIndex].label || '';
                                return datasetLabel + ': ' + item.xLabel;
                            }
                        },
                        mode: 'index',
                        axis: 'y'
                    }
                });
                /**
                 * Computes the "optimal" sample size to maintain bars equally sized while preventing overlap.
                 * @private
                 */
                function computeMinSampleSize(scale, pixels) {
                    var min = scale.isHorizontal() ? scale.width : scale.height;
                    var ticks = scale.getTicks();
                    var prev, curr, i, ilen;
                    for (i = 1, ilen = pixels.length; i < ilen; ++i) {
                        min = Math.min(min, pixels[i] - pixels[i - 1]);
                    }
                    for (i = 0, ilen = ticks.length; i < ilen; ++i) {
                        curr = scale.getPixelForTick(i);
                        min = i > 0 ? Math.min(min, curr - prev) : min;
                        prev = curr;
                    }
                    return min;
                }
                /**
                 * Computes an "ideal" category based on the absolute bar thickness or, if undefined or null,
                 * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This
                 * mode currently always generates bars equally sized (until we introduce scriptable options?).
                 * @private
                 */
                function computeFitCategoryTraits(index, ruler, options) {
                    var thickness = options.barThickness;
                    var count = ruler.stackCount;
                    var curr = ruler.pixels[index];
                    var size, ratio;
                    if (helpers.isNullOrUndef(thickness)) {
                        size = ruler.min * options.categoryPercentage;
                        ratio = options.barPercentage;
                    }
                    else {
                        // When bar thickness is enforced, category and bar percentages are ignored.
                        // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')
                        // and deprecate barPercentage since this value is ignored when thickness is absolute.
                        size = thickness * count;
                        ratio = 1;
                    }
                    return {
                        chunk: size / count,
                        ratio: ratio,
                        start: curr - (size / 2)
                    };
                }
                /**
                 * Computes an "optimal" category that globally arranges bars side by side (no gap when
                 * percentage options are 1), based on the previous and following categories. This mode
                 * generates bars with different widths when data are not evenly spaced.
                 * @private
                 */
                function computeFlexCategoryTraits(index, ruler, options) {
                    var pixels = ruler.pixels;
                    var curr = pixels[index];
                    var prev = index > 0 ? pixels[index - 1] : null;
                    var next = index < pixels.length - 1 ? pixels[index + 1] : null;
                    var percent = options.categoryPercentage;
                    var start, size;
                    if (prev === null) {
                        // first data: its size is double based on the next point or,
                        // if it's also the last data, we use the scale end extremity.
                        prev = curr - (next === null ? ruler.end - curr : next - curr);
                    }
                    if (next === null) {
                        // last data: its size is also double based on the previous point.
                        next = curr + curr - prev;
                    }
                    start = curr - ((curr - prev) / 2) * percent;
                    size = ((next - prev) / 2) * percent;
                    return {
                        chunk: size / ruler.stackCount,
                        ratio: options.barPercentage,
                        start: start
                    };
                }
                module.exports = function (Chart) {
                    Chart.controllers.bar = Chart.DatasetController.extend({
                        dataElementType: elements.Rectangle,
                        initialize: function () {
                            var me = this;
                            var meta;
                            Chart.DatasetController.prototype.initialize.apply(me, arguments);
                            meta = me.getMeta();
                            meta.stack = me.getDataset().stack;
                            meta.bar = true;
                        },
                        update: function (reset) {
                            var me = this;
                            var rects = me.getMeta().data;
                            var i, ilen;
                            me._ruler = me.getRuler();
                            for (i = 0, ilen = rects.length; i < ilen; ++i) {
                                me.updateElement(rects[i], i, reset);
                            }
                        },
                        updateElement: function (rectangle, index, reset) {
                            var me = this;
                            var chart = me.chart;
                            var meta = me.getMeta();
                            var dataset = me.getDataset();
                            var custom = rectangle.custom || {};
                            var rectangleOptions = chart.options.elements.rectangle;
                            rectangle._xScale = me.getScaleForId(meta.xAxisID);
                            rectangle._yScale = me.getScaleForId(meta.yAxisID);
                            rectangle._datasetIndex = me.index;
                            rectangle._index = index;
                            rectangle._model = {
                                datasetLabel: dataset.label,
                                label: chart.data.labels[index],
                                borderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleOptions.borderSkipped,
                                backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.valueAtIndexOrDefault(dataset.backgroundColor, index, rectangleOptions.backgroundColor),
                                borderColor: custom.borderColor ? custom.borderColor : helpers.valueAtIndexOrDefault(dataset.borderColor, index, rectangleOptions.borderColor),
                                borderWidth: custom.borderWidth ? custom.borderWidth : helpers.valueAtIndexOrDefault(dataset.borderWidth, index, rectangleOptions.borderWidth)
                            };
                            me.updateElementGeometry(rectangle, index, reset);
                            rectangle.pivot();
                        },
                        /**
                         * @private
                         */
                        updateElementGeometry: function (rectangle, index, reset) {
                            var me = this;
                            var model = rectangle._model;
                            var vscale = me.getValueScale();
                            var base = vscale.getBasePixel();
                            var horizontal = vscale.isHorizontal();
                            var ruler = me._ruler || me.getRuler();
                            var vpixels = me.calculateBarValuePixels(me.index, index);
                            var ipixels = me.calculateBarIndexPixels(me.index, index, ruler);
                            model.horizontal = horizontal;
                            model.base = reset ? base : vpixels.base;
                            model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;
                            model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;
                            model.height = horizontal ? ipixels.size : undefined;
                            model.width = horizontal ? undefined : ipixels.size;
                        },
                        /**
                         * @private
                         */
                        getValueScaleId: function () {
                            return this.getMeta().yAxisID;
                        },
                        /**
                         * @private
                         */
                        getIndexScaleId: function () {
                            return this.getMeta().xAxisID;
                        },
                        /**
                         * @private
                         */
                        getValueScale: function () {
                            return this.getScaleForId(this.getValueScaleId());
                        },
                        /**
                         * @private
                         */
                        getIndexScale: function () {
                            return this.getScaleForId(this.getIndexScaleId());
                        },
                        /**
                         * Returns the stacks based on groups and bar visibility.
                         * @param {Number} [last] - The dataset index
                         * @returns {Array} The stack list
                         * @private
                         */
                        _getStacks: function (last) {
                            var me = this;
                            var chart = me.chart;
                            var scale = me.getIndexScale();
                            var stacked = scale.options.stacked;
                            var ilen = last === undefined ? chart.data.datasets.length : last + 1;
                            var stacks = [];
                            var i, meta;
                            for (i = 0; i < ilen; ++i) {
                                meta = chart.getDatasetMeta(i);
                                if (meta.bar && chart.isDatasetVisible(i) &&
                                    (stacked === false ||
                                        (stacked === true && stacks.indexOf(meta.stack) === -1) ||
                                        (stacked === undefined && (meta.stack === undefined || stacks.indexOf(meta.stack) === -1)))) {
                                    stacks.push(meta.stack);
                                }
                            }
                            return stacks;
                        },
                        /**
                         * Returns the effective number of stacks based on groups and bar visibility.
                         * @private
                         */
                        getStackCount: function () {
                            return this._getStacks().length;
                        },
                        /**
                         * Returns the stack index for the given dataset based on groups and bar visibility.
                         * @param {Number} [datasetIndex] - The dataset index
                         * @param {String} [name] - The stack name to find
                         * @returns {Number} The stack index
                         * @private
                         */
                        getStackIndex: function (datasetIndex, name) {
                            var stacks = this._getStacks(datasetIndex);
                            var index = (name !== undefined)
                                ? stacks.indexOf(name)
                                : -1; // indexOf returns -1 if element is not present
                            return (index === -1)
                                ? stacks.length - 1
                                : index;
                        },
                        /**
                         * @private
                         */
                        getRuler: function () {
                            var me = this;
                            var scale = me.getIndexScale();
                            var stackCount = me.getStackCount();
                            var datasetIndex = me.index;
                            var isHorizontal = scale.isHorizontal();
                            var start = isHorizontal ? scale.left : scale.top;
                            var end = start + (isHorizontal ? scale.width : scale.height);
                            var pixels = [];
                            var i, ilen, min;
                            for (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {
                                pixels.push(scale.getPixelForValue(null, i, datasetIndex));
                            }
                            min = helpers.isNullOrUndef(scale.options.barThickness)
                                ? computeMinSampleSize(scale, pixels)
                                : -1;
                            return {
                                min: min,
                                pixels: pixels,
                                start: start,
                                end: end,
                                stackCount: stackCount,
                                scale: scale
                            };
                        },
                        /**
                         * Note: pixel values are not clamped to the scale area.
                         * @private
                         */
                        calculateBarValuePixels: function (datasetIndex, index) {
                            var me = this;
                            var chart = me.chart;
                            var meta = me.getMeta();
                            var scale = me.getValueScale();
                            var datasets = chart.data.datasets;
                            var value = scale.getRightValue(datasets[datasetIndex].data[index]);
                            var stacked = scale.options.stacked;
                            var stack = meta.stack;
                            var start = 0;
                            var i, imeta, ivalue, base, head, size;
                            if (stacked || (stacked === undefined && stack !== undefined)) {
                                for (i = 0; i < datasetIndex; ++i) {
                                    imeta = chart.getDatasetMeta(i);
                                    if (imeta.bar &&
                                        imeta.stack === stack &&
                                        imeta.controller.getValueScaleId() === scale.id &&
                                        chart.isDatasetVisible(i)) {
                                        ivalue = scale.getRightValue(datasets[i].data[index]);
                                        if ((value < 0 && ivalue < 0) || (value >= 0 && ivalue > 0)) {
                                            start += ivalue;
                                        }
                                    }
                                }
                            }
                            base = scale.getPixelForValue(start);
                            head = scale.getPixelForValue(start + value);
                            size = (head - base) / 2;
                            return {
                                size: size,
                                base: base,
                                head: head,
                                center: head + size / 2
                            };
                        },
                        /**
                         * @private
                         */
                        calculateBarIndexPixels: function (datasetIndex, index, ruler) {
                            var me = this;
                            var options = ruler.scale.options;
                            var range = options.barThickness === 'flex'
                                ? computeFlexCategoryTraits(index, ruler, options)
                                : computeFitCategoryTraits(index, ruler, options);
                            var stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);
                            var center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);
                            var size = Math.min(helpers.valueOrDefault(options.maxBarThickness, Infinity), range.chunk * range.ratio);
                            return {
                                base: center - size / 2,
                                head: center + size / 2,
                                center: center,
                                size: size
                            };
                        },
                        draw: function () {
                            var me = this;
                            var chart = me.chart;
                            var scale = me.getValueScale();
                            var rects = me.getMeta().data;
                            var dataset = me.getDataset();
                            var ilen = rects.length;
                            var i = 0;
                            helpers.canvas.clipArea(chart.ctx, chart.chartArea);
                            for (; i < ilen; ++i) {
                                if (!isNaN(scale.getRightValue(dataset.data[i]))) {
                                    rects[i].draw();
                                }
                            }
                            helpers.canvas.unclipArea(chart.ctx);
                        },
                        setHoverStyle: function (rectangle) {
                            var dataset = this.chart.data.datasets[rectangle._datasetIndex];
                            var index = rectangle._index;
                            var custom = rectangle.custom || {};
                            var model = rectangle._model;
                            model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.valueAtIndexOrDefault(dataset.hoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
                            model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.valueAtIndexOrDefault(dataset.hoverBorderColor, index, helpers.getHoverColor(model.borderColor));
                            model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.valueAtIndexOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);
                        },
                        removeHoverStyle: function (rectangle) {
                            var dataset = this.chart.data.datasets[rectangle._datasetIndex];
                            var index = rectangle._index;
                            var custom = rectangle.custom || {};
                            var model = rectangle._model;
                            var rectangleElementOptions = this.chart.options.elements.rectangle;
                            model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.valueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor);
                            model.borderColor = custom.borderColor ? custom.borderColor : helpers.valueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor);
                            model.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.valueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth);
                        }
                    });
                    Chart.controllers.horizontalBar = Chart.controllers.bar.extend({
                        /**
                         * @private
                         */
                        getValueScaleId: function () {
                            return this.getMeta().xAxisID;
                        },
                        /**
                         * @private
                         */
                        getIndexScaleId: function () {
                            return this.getMeta().yAxisID;
                        }
                    });
                };
            }, { "25": 25, "40": 40, "45": 45 }], 16: [function (require, module, exports) {
                'use strict';
                var defaults = require(25);
                var elements = require(40);
                var helpers = require(45);
                defaults._set('bubble', {
                    hover: {
                        mode: 'single'
                    },
                    scales: {
                        xAxes: [{
                                type: 'linear',
                                position: 'bottom',
                                id: 'x-axis-0' // need an ID so datasets can reference the scale
                            }],
                        yAxes: [{
                                type: 'linear',
                                position: 'left',
                                id: 'y-axis-0'
                            }]
                    },
                    tooltips: {
                        callbacks: {
                            title: function () {
                                // Title doesn't make sense for scatter since we format the data as a point
                                return '';
                            },
                            label: function (item, data) {
                                var datasetLabel = data.datasets[item.datasetIndex].label || '';
                                var dataPoint = data.datasets[item.datasetIndex].data[item.index];
                                return datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';
                            }
                        }
                    }
                });
                module.exports = function (Chart) {
                    Chart.controllers.bubble = Chart.DatasetController.extend({
                        /**
                         * @protected
                         */
                        dataElementType: elements.Point,
                        /**
                         * @protected
                         */
                        update: function (reset) {
                            var me = this;
                            var meta = me.getMeta();
                            var points = meta.data;
                            // Update Points
                            helpers.each(points, function (point, index) {
                                me.updateElement(point, index, reset);
                            });
                        },
                        /**
                         * @protected
                         */
                        updateElement: function (point, index, reset) {
                            var me = this;
                            var meta = me.getMeta();
                            var custom = point.custom || {};
                            var xScale = me.getScaleForId(meta.xAxisID);
                            var yScale = me.getScaleForId(meta.yAxisID);
                            var options = me._resolveElementOptions(point, index);
                            var data = me.getDataset().data[index];
                            var dsIndex = me.index;
                            var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex);
                            var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);
                            point._xScale = xScale;
                            point._yScale = yScale;
                            point._options = options;
                            point._datasetIndex = dsIndex;
                            point._index = index;
                            point._model = {
                                backgroundColor: options.backgroundColor,
                                borderColor: options.borderColor,
                                borderWidth: options.borderWidth,
                                hitRadius: options.hitRadius,
                                pointStyle: options.pointStyle,
                                radius: reset ? 0 : options.radius,
                                skip: custom.skip || isNaN(x) || isNaN(y),
                                x: x,
                                y: y,
                            };
                            point.pivot();
                        },
                        /**
                         * @protected
                         */
                        setHoverStyle: function (point) {
                            var model = point._model;
                            var options = point._options;
                            model.backgroundColor = helpers.valueOrDefault(options.hoverBackgroundColor, helpers.getHoverColor(options.backgroundColor));
                            model.borderColor = helpers.valueOrDefault(options.hoverBorderColor, helpers.getHoverColor(options.borderColor));
                            model.borderWidth = helpers.valueOrDefault(options.hoverBorderWidth, options.borderWidth);
                            model.radius = options.radius + options.hoverRadius;
                        },
                        /**
                         * @protected
                         */
                        removeHoverStyle: function (point) {
                            var model = point._model;
                            var options = point._options;
                            model.backgroundColor = options.backgroundColor;
                            model.borderColor = options.borderColor;
                            model.borderWidth = options.borderWidth;
                            model.radius = options.radius;
                        },
                        /**
                         * @private
                         */
                        _resolveElementOptions: function (point, index) {
                            var me = this;
                            var chart = me.chart;
                            var datasets = chart.data.datasets;
                            var dataset = datasets[me.index];
                            var custom = point.custom || {};
                            var options = chart.options.elements.point;
                            var resolve = helpers.options.resolve;
                            var data = dataset.data[index];
                            var values = {};
                            var i, ilen, key;
                            // Scriptable options
                            var context = {
                                chart: chart,
                                dataIndex: index,
                                dataset: dataset,
                                datasetIndex: me.index
                            };
                            var keys = [
                                'backgroundColor',
                                'borderColor',
                                'borderWidth',
                                'hoverBackgroundColor',
                                'hoverBorderColor',
                                'hoverBorderWidth',
                                'hoverRadius',
                                'hitRadius',
                                'pointStyle'
                            ];
                            for (i = 0, ilen = keys.length; i < ilen; ++i) {
                                key = keys[i];
                                values[key] = resolve([
                                    custom[key],
                                    dataset[key],
                                    options[key]
                                ], context, index);
                            }
                            // Custom radius resolution
                            values.radius = resolve([
                                custom.radius,
                                data ? data.r : undefined,
                                dataset.radius,
                                options.radius
                            ], context, index);
                            return values;
                        }
                    });
                };
            }, { "25": 25, "40": 40, "45": 45 }], 17: [function (require, module, exports) {
                'use strict';
                var defaults = require(25);
                var elements = require(40);
                var helpers = require(45);
                defaults._set('doughnut', {
                    animation: {
                        // Boolean - Whether we animate the rotation of the Doughnut
                        animateRotate: true,
                        // Boolean - Whether we animate scaling the Doughnut from the centre
                        animateScale: false
                    },
                    hover: {
                        mode: 'single'
                    },
                    legendCallback: function (chart) {
                        var text = [];
                        text.push('<ul class="' + chart.id + '-legend">');
                        var data = chart.data;
                        var datasets = data.datasets;
                        var labels = data.labels;
                        if (datasets.length) {
                            for (var i = 0; i < datasets[0].data.length; ++i) {
                                text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');
                                if (labels[i]) {
                                    text.push(labels[i]);
                                }
                                text.push('</li>');
                            }
                        }
                        text.push('</ul>');
                        return text.join('');
                    },
                    legend: {
                        labels: {
                            generateLabels: function (chart) {
                                var data = chart.data;
                                if (data.labels.length && data.datasets.length) {
                                    return data.labels.map(function (label, i) {
                                        var meta = chart.getDatasetMeta(0);
                                        var ds = data.datasets[0];
                                        var arc = meta.data[i];
                                        var custom = arc && arc.custom || {};
                                        var valueAtIndexOrDefault = helpers.valueAtIndexOrDefault;
                                        var arcOpts = chart.options.elements.arc;
                                        var fill = custom.backgroundColor ? custom.backgroundColor : valueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
                                        var stroke = custom.borderColor ? custom.borderColor : valueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
                                        var bw = custom.borderWidth ? custom.borderWidth : valueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);
                                        return {
                                            text: label,
                                            fillStyle: fill,
                                            strokeStyle: stroke,
                                            lineWidth: bw,
                                            hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
                                            // Extra data used for toggling the correct item
                                            index: i
                                        };
                                    });
                                }
                                return [];
                            }
                        },
                        onClick: function (e, legendItem) {
                            var index = legendItem.index;
                            var chart = this.chart;
                            var i, ilen, meta;
                            for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
                                meta = chart.getDatasetMeta(i);
                                // toggle visibility of index if exists
                                if (meta.data[index]) {
                                    meta.data[index].hidden = !meta.data[index].hidden;
                                }
                            }
                            chart.update();
                        }
                    },
                    // The percentage of the chart that we cut out of the middle.
                    cutoutPercentage: 50,
                    // The rotation of the chart, where the first data arc begins.
                    rotation: Math.PI * -0.5,
                    // The total circumference of the chart.
                    circumference: Math.PI * 2.0,
                    // Need to override these to give a nice default
                    tooltips: {
                        callbacks: {
                            title: function () {
                                return '';
                            },
                            label: function (tooltipItem, data) {
                                var dataLabel = data.labels[tooltipItem.index];
                                var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
                                if (helpers.isArray(dataLabel)) {
                                    // show value on first line of multiline label
                                    // need to clone because we are changing the value
                                    dataLabel = dataLabel.slice();
                                    dataLabel[0] += value;
                                }
                                else {
                                    dataLabel += value;
                                }
                                return dataLabel;
                            }
                        }
                    }
                });
                defaults._set('pie', helpers.clone(defaults.doughnut));
                defaults._set('pie', {
                    cutoutPercentage: 0
                });
                module.exports = function (Chart) {
                    Chart.controllers.doughnut = Chart.controllers.pie = Chart.DatasetController.extend({
                        dataElementType: elements.Arc,
                        linkScales: helpers.noop,
                        // Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
                        getRingIndex: function (datasetIndex) {
                            var ringIndex = 0;
                            for (var j = 0; j < datasetIndex; ++j) {
                                if (this.chart.isDatasetVisible(j)) {
                                    ++ringIndex;
                                }
                            }
                            return ringIndex;
                        },
                        update: function (reset) {
                            var me = this;
                            var chart = me.chart;
                            var chartArea = chart.chartArea;
                            var opts = chart.options;
                            var arcOpts = opts.elements.arc;
                            var availableWidth = chartArea.right - chartArea.left - arcOpts.borderWidth;
                            var availableHeight = chartArea.bottom - chartArea.top - arcOpts.borderWidth;
                            var minSize = Math.min(availableWidth, availableHeight);
                            var offset = { x: 0, y: 0 };
                            var meta = me.getMeta();
                            var cutoutPercentage = opts.cutoutPercentage;
                            var circumference = opts.circumference;
                            // If the chart's circumference isn't a full circle, calculate minSize as a ratio of the width/height of the arc
                            if (circumference < Math.PI * 2.0) {
                                var startAngle = opts.rotation % (Math.PI * 2.0);
                                startAngle += Math.PI * 2.0 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);
                                var endAngle = startAngle + circumference;
                                var start = { x: Math.cos(startAngle), y: Math.sin(startAngle) };
                                var end = { x: Math.cos(endAngle), y: Math.sin(endAngle) };
                                var contains0 = (startAngle <= 0 && endAngle >= 0) || (startAngle <= Math.PI * 2.0 && Math.PI * 2.0 <= endAngle);
                                var contains90 = (startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle);
                                var contains180 = (startAngle <= -Math.PI && -Math.PI <= endAngle) || (startAngle <= Math.PI && Math.PI <= endAngle);
                                var contains270 = (startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle);
                                var cutout = cutoutPercentage / 100.0;
                                var min = { x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)), y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout)) };
                                var max = { x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)), y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout)) };
                                var size = { width: (max.x - min.x) * 0.5, height: (max.y - min.y) * 0.5 };
                                minSize = Math.min(availableWidth / size.width, availableHeight / size.height);
                                offset = { x: (max.x + min.x) * -0.5, y: (max.y + min.y) * -0.5 };
                            }
                            chart.borderWidth = me.getMaxBorderWidth(meta.data);
                            chart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);
                            chart.innerRadius = Math.max(cutoutPercentage ? (chart.outerRadius / 100) * (cutoutPercentage) : 0, 0);
                            chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
                            chart.offsetX = offset.x * chart.outerRadius;
                            chart.offsetY = offset.y * chart.outerRadius;
                            meta.total = me.calculateTotal();
                            me.outerRadius = chart.outerRadius - (chart.radiusLength * me.getRingIndex(me.index));
                            me.innerRadius = Math.max(me.outerRadius - chart.radiusLength, 0);
                            helpers.each(meta.data, function (arc, index) {
                                me.updateElement(arc, index, reset);
                            });
                        },
                        updateElement: function (arc, index, reset) {
                            var me = this;
                            var chart = me.chart;
                            var chartArea = chart.chartArea;
                            var opts = chart.options;
                            var animationOpts = opts.animation;
                            var centerX = (chartArea.left + chartArea.right) / 2;
                            var centerY = (chartArea.top + chartArea.bottom) / 2;
                            var startAngle = opts.rotation; // non reset case handled later
                            var endAngle = opts.rotation; // non reset case handled later
                            var dataset = me.getDataset();
                            var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2.0 * Math.PI));
                            var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;
                            var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;
                            var valueAtIndexOrDefault = helpers.valueAtIndexOrDefault;
                            helpers.extend(arc, {
                                // Utility
                                _datasetIndex: me.index,
                                _index: index,
                                // Desired view properties
                                _model: {
                                    x: centerX + chart.offsetX,
                                    y: centerY + chart.offsetY,
                                    startAngle: startAngle,
                                    endAngle: endAngle,
                                    circumference: circumference,
                                    outerRadius: outerRadius,
                                    innerRadius: innerRadius,
                                    label: valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
                                }
                            });
                            var model = arc._model;
                            // Resets the visual styles
                            this.removeHoverStyle(arc);
                            // Set correct angles if not resetting
                            if (!reset || !animationOpts.animateRotate) {
                                if (index === 0) {
                                    model.startAngle = opts.rotation;
                                }
                                else {
                                    model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
                                }
                                model.endAngle = model.startAngle + model.circumference;
                            }
                            arc.pivot();
                        },
                        removeHoverStyle: function (arc) {
                            Chart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);
                        },
                        calculateTotal: function () {
                            var dataset = this.getDataset();
                            var meta = this.getMeta();
                            var total = 0;
                            var value;
                            helpers.each(meta.data, function (element, index) {
                                value = dataset.data[index];
                                if (!isNaN(value) && !element.hidden) {
                                    total += Math.abs(value);
                                }
                            });
                            /* if (total === 0) {
                                total = NaN;
                            }*/
                            return total;
                        },
                        calculateCircumference: function (value) {
                            var total = this.getMeta().total;
                            if (total > 0 && !isNaN(value)) {
                                return (Math.PI * 2.0) * (Math.abs(value) / total);
                            }
                            return 0;
                        },
                        // gets the max border or hover width to properly scale pie charts
                        getMaxBorderWidth: function (arcs) {
                            var max = 0;
                            var index = this.index;
                            var length = arcs.length;
                            var borderWidth;
                            var hoverWidth;
                            for (var i = 0; i < length; i++) {
                                borderWidth = arcs[i]._model ? arcs[i]._model.borderWidth : 0;
                                hoverWidth = arcs[i]._chart ? arcs[i]._chart.config.data.datasets[index].hoverBorderWidth : 0;
                                max = borderWidth > max ? borderWidth : max;
                                max = hoverWidth > max ? hoverWidth : max;
                            }
                            return max;
                        }
                    });
                };
            }, { "25": 25, "40": 40, "45": 45 }], 18: [function (require, module, exports) {
                'use strict';
                var defaults = require(25);
                var elements = require(40);
                var helpers = require(45);
                defaults._set('line', {
                    showLines: true,
                    spanGaps: false,
                    hover: {
                        mode: 'label'
                    },
                    scales: {
                        xAxes: [{
                                type: 'category',
                                id: 'x-axis-0'
                            }],
                        yAxes: [{
                                type: 'linear',
                                id: 'y-axis-0'
                            }]
                    }
                });
                module.exports = function (Chart) {
                    function lineEnabled(dataset, options) {
                        return helpers.valueOrDefault(dataset.showLine, options.showLines);
                    }
                    Chart.controllers.line = Chart.DatasetController.extend({
                        datasetElementType: elements.Line,
                        dataElementType: elements.Point,
                        update: function (reset) {
                            var me = this;
                            var meta = me.getMeta();
                            var line = meta.dataset;
                            var points = meta.data || [];
                            var options = me.chart.options;
                            var lineElementOptions = options.elements.line;
                            var scale = me.getScaleForId(meta.yAxisID);
                            var i, ilen, custom;
                            var dataset = me.getDataset();
                            var showLine = lineEnabled(dataset, options);
                            // Update Line
                            if (showLine) {
                                custom = line.custom || {};
                                // Compatibility: If the properties are defined with only the old name, use those values
                                if ((dataset.tension !== undefined) && (dataset.lineTension === undefined)) {
                                    dataset.lineTension = dataset.tension;
                                }
                                // Utility
                                line._scale = scale;
                                line._datasetIndex = me.index;
                                // Data
                                line._children = points;
                                // Model
                                line._model = {
                                    // Appearance
                                    // The default behavior of lines is to break at null values, according
                                    // to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158
                                    // This option gives lines the ability to span gaps
                                    spanGaps: dataset.spanGaps ? dataset.spanGaps : options.spanGaps,
                                    tension: custom.tension ? custom.tension : helpers.valueOrDefault(dataset.lineTension, lineElementOptions.tension),
                                    backgroundColor: custom.backgroundColor ? custom.backgroundColor : (dataset.backgroundColor || lineElementOptions.backgroundColor),
                                    borderWidth: custom.borderWidth ? custom.borderWidth : (dataset.borderWidth || lineElementOptions.borderWidth),
                                    borderColor: custom.borderColor ? custom.borderColor : (dataset.borderColor || lineElementOptions.borderColor),
                                    borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : (dataset.borderCapStyle || lineElementOptions.borderCapStyle),
                                    borderDash: custom.borderDash ? custom.borderDash : (dataset.borderDash || lineElementOptions.borderDash),
                                    borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : (dataset.borderDashOffset || lineElementOptions.borderDashOffset),
                                    borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : (dataset.borderJoinStyle || lineElementOptions.borderJoinStyle),
                                    fill: custom.fill ? custom.fill : (dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill),
                                    steppedLine: custom.steppedLine ? custom.steppedLine : helpers.valueOrDefault(dataset.steppedLine, lineElementOptions.stepped),
                                    cubicInterpolationMode: custom.cubicInterpolationMode ? custom.cubicInterpolationMode : helpers.valueOrDefault(dataset.cubicInterpolationMode, lineElementOptions.cubicInterpolationMode),
                                };
                                line.pivot();
                            }
                            // Update Points
                            for (i = 0, ilen = points.length; i < ilen; ++i) {
                                me.updateElement(points[i], i, reset);
                            }
                            if (showLine && line._model.tension !== 0) {
                                me.updateBezierControlPoints();
                            }
                            // Now pivot the point for animation
                            for (i = 0, ilen = points.length; i < ilen; ++i) {
                                points[i].pivot();
                            }
                        },
                        getPointBackgroundColor: function (point, index) {
                            var backgroundColor = this.chart.options.elements.point.backgroundColor;
                            var dataset = this.getDataset();
                            var custom = point.custom || {};
                            if (custom.backgroundColor) {
                                backgroundColor = custom.backgroundColor;
                            }
                            else if (dataset.pointBackgroundColor) {
                                backgroundColor = helpers.valueAtIndexOrDefault(dataset.pointBackgroundColor, index, backgroundColor);
                            }
                            else if (dataset.backgroundColor) {
                                backgroundColor = dataset.backgroundColor;
                            }
                            return backgroundColor;
                        },
                        getPointBorderColor: function (point, index) {
                            var borderColor = this.chart.options.elements.point.borderColor;
                            var dataset = this.getDataset();
                            var custom = point.custom || {};
                            if (custom.borderColor) {
                                borderColor = custom.borderColor;
                            }
                            else if (dataset.pointBorderColor) {
                                borderColor = helpers.valueAtIndexOrDefault(dataset.pointBorderColor, index, borderColor);
                            }
                            else if (dataset.borderColor) {
                                borderColor = dataset.borderColor;
                            }
                            return borderColor;
                        },
                        getPointBorderWidth: function (point, index) {
                            var borderWidth = this.chart.options.elements.point.borderWidth;
                            var dataset = this.getDataset();
                            var custom = point.custom || {};
                            if (!isNaN(custom.borderWidth)) {
                                borderWidth = custom.borderWidth;
                            }
                            else if (!isNaN(dataset.pointBorderWidth) || helpers.isArray(dataset.pointBorderWidth)) {
                                borderWidth = helpers.valueAtIndexOrDefault(dataset.pointBorderWidth, index, borderWidth);
                            }
                            else if (!isNaN(dataset.borderWidth)) {
                                borderWidth = dataset.borderWidth;
                            }
                            return borderWidth;
                        },
                        updateElement: function (point, index, reset) {
                            var me = this;
                            var meta = me.getMeta();
                            var custom = point.custom || {};
                            var dataset = me.getDataset();
                            var datasetIndex = me.index;
                            var value = dataset.data[index];
                            var yScale = me.getScaleForId(meta.yAxisID);
                            var xScale = me.getScaleForId(meta.xAxisID);
                            var pointOptions = me.chart.options.elements.point;
                            var x, y;
                            // Compatibility: If the properties are defined with only the old name, use those values
                            if ((dataset.radius !== undefined) && (dataset.pointRadius === undefined)) {
                                dataset.pointRadius = dataset.radius;
                            }
                            if ((dataset.hitRadius !== undefined) && (dataset.pointHitRadius === undefined)) {
                                dataset.pointHitRadius = dataset.hitRadius;
                            }
                            x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex);
                            y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);
                            // Utility
                            point._xScale = xScale;
                            point._yScale = yScale;
                            point._datasetIndex = datasetIndex;
                            point._index = index;
                            // Desired view properties
                            point._model = {
                                x: x,
                                y: y,
                                skip: custom.skip || isNaN(x) || isNaN(y),
                                // Appearance
                                radius: custom.radius || helpers.valueAtIndexOrDefault(dataset.pointRadius, index, pointOptions.radius),
                                pointStyle: custom.pointStyle || helpers.valueAtIndexOrDefault(dataset.pointStyle, index, pointOptions.pointStyle),
                                backgroundColor: me.getPointBackgroundColor(point, index),
                                borderColor: me.getPointBorderColor(point, index),
                                borderWidth: me.getPointBorderWidth(point, index),
                                tension: meta.dataset._model ? meta.dataset._model.tension : 0,
                                steppedLine: meta.dataset._model ? meta.dataset._model.steppedLine : false,
                                // Tooltip
                                hitRadius: custom.hitRadius || helpers.valueAtIndexOrDefault(dataset.pointHitRadius, index, pointOptions.hitRadius)
                            };
                        },
                        calculatePointY: function (value, index, datasetIndex) {
                            var me = this;
                            var chart = me.chart;
                            var meta = me.getMeta();
                            var yScale = me.getScaleForId(meta.yAxisID);
                            var sumPos = 0;
                            var sumNeg = 0;
                            var i, ds, dsMeta;
                            if (yScale.options.stacked) {
                                for (i = 0; i < datasetIndex; i++) {
                                    ds = chart.data.datasets[i];
                                    dsMeta = chart.getDatasetMeta(i);
                                    if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {
                                        var stackedRightValue = Number(yScale.getRightValue(ds.data[index]));
                                        if (stackedRightValue < 0) {
                                            sumNeg += stackedRightValue || 0;
                                        }
                                        else {
                                            sumPos += stackedRightValue || 0;
                                        }
                                    }
                                }
                                var rightValue = Number(yScale.getRightValue(value));
                                if (rightValue < 0) {
                                    return yScale.getPixelForValue(sumNeg + rightValue);
                                }
                                return yScale.getPixelForValue(sumPos + rightValue);
                            }
                            return yScale.getPixelForValue(value);
                        },
                        updateBezierControlPoints: function () {
                            var me = this;
                            var meta = me.getMeta();
                            var area = me.chart.chartArea;
                            var points = (meta.data || []);
                            var i, ilen, point, model, controlPoints;
                            // Only consider points that are drawn in case the spanGaps option is used
                            if (meta.dataset._model.spanGaps) {
                                points = points.filter(function (pt) {
                                    return !pt._model.skip;
                                });
                            }
                            function capControlPoint(pt, min, max) {
                                return Math.max(Math.min(pt, max), min);
                            }
                            if (meta.dataset._model.cubicInterpolationMode === 'monotone') {
                                helpers.splineCurveMonotone(points);
                            }
                            else {
                                for (i = 0, ilen = points.length; i < ilen; ++i) {
                                    point = points[i];
                                    model = point._model;
                                    controlPoints = helpers.splineCurve(helpers.previousItem(points, i)._model, model, helpers.nextItem(points, i)._model, meta.dataset._model.tension);
                                    model.controlPointPreviousX = controlPoints.previous.x;
                                    model.controlPointPreviousY = controlPoints.previous.y;
                                    model.controlPointNextX = controlPoints.next.x;
                                    model.controlPointNextY = controlPoints.next.y;
                                }
                            }
                            if (me.chart.options.elements.line.capBezierPoints) {
                                for (i = 0, ilen = points.length; i < ilen; ++i) {
                                    model = points[i]._model;
                                    model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
                                    model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
                                    model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
                                    model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
                                }
                            }
                        },
                        draw: function () {
                            var me = this;
                            var chart = me.chart;
                            var meta = me.getMeta();
                            var points = meta.data || [];
                            var area = chart.chartArea;
                            var ilen = points.length;
                            var i = 0;
                            helpers.canvas.clipArea(chart.ctx, area);
                            if (lineEnabled(me.getDataset(), chart.options)) {
                                meta.dataset.draw();
                            }
                            helpers.canvas.unclipArea(chart.ctx);
                            // Draw the points
                            for (; i < ilen; ++i) {
                                points[i].draw(area);
                            }
                        },
                        setHoverStyle: function (point) {
                            // Point
                            var dataset = this.chart.data.datasets[point._datasetIndex];
                            var index = point._index;
                            var custom = point.custom || {};
                            var model = point._model;
                            model.radius = custom.hoverRadius || helpers.valueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
                            model.backgroundColor = custom.hoverBackgroundColor || helpers.valueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
                            model.borderColor = custom.hoverBorderColor || helpers.valueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
                            model.borderWidth = custom.hoverBorderWidth || helpers.valueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);
                        },
                        removeHoverStyle: function (point) {
                            var me = this;
                            var dataset = me.chart.data.datasets[point._datasetIndex];
                            var index = point._index;
                            var custom = point.custom || {};
                            var model = point._model;
                            // Compatibility: If the properties are defined with only the old name, use those values
                            if ((dataset.radius !== undefined) && (dataset.pointRadius === undefined)) {
                                dataset.pointRadius = dataset.radius;
                            }
                            model.radius = custom.radius || helpers.valueAtIndexOrDefault(dataset.pointRadius, index, me.chart.options.elements.point.radius);
                            model.backgroundColor = me.getPointBackgroundColor(point, index);
                            model.borderColor = me.getPointBorderColor(point, index);
                            model.borderWidth = me.getPointBorderWidth(point, index);
                        }
                    });
                };
            }, { "25": 25, "40": 40, "45": 45 }], 19: [function (require, module, exports) {
                'use strict';
                var defaults = require(25);
                var elements = require(40);
                var helpers = require(45);
                defaults._set('polarArea', {
                    scale: {
                        type: 'radialLinear',
                        angleLines: {
                            display: false
                        },
                        gridLines: {
                            circular: true
                        },
                        pointLabels: {
                            display: false
                        },
                        ticks: {
                            beginAtZero: true
                        }
                    },
                    // Boolean - Whether to animate the rotation of the chart
                    animation: {
                        animateRotate: true,
                        animateScale: true
                    },
                    startAngle: -0.5 * Math.PI,
                    legendCallback: function (chart) {
                        var text = [];
                        text.push('<ul class="' + chart.id + '-legend">');
                        var data = chart.data;
                        var datasets = data.datasets;
                        var labels = data.labels;
                        if (datasets.length) {
                            for (var i = 0; i < datasets[0].data.length; ++i) {
                                text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');
                                if (labels[i]) {
                                    text.push(labels[i]);
                                }
                                text.push('</li>');
                            }
                        }
                        text.push('</ul>');
                        return text.join('');
                    },
                    legend: {
                        labels: {
                            generateLabels: function (chart) {
                                var data = chart.data;
                                if (data.labels.length && data.datasets.length) {
                                    return data.labels.map(function (label, i) {
                                        var meta = chart.getDatasetMeta(0);
                                        var ds = data.datasets[0];
                                        var arc = meta.data[i];
                                        var custom = arc.custom || {};
                                        var valueAtIndexOrDefault = helpers.valueAtIndexOrDefault;
                                        var arcOpts = chart.options.elements.arc;
                                        var fill = custom.backgroundColor ? custom.backgroundColor : valueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
                                        var stroke = custom.borderColor ? custom.borderColor : valueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
                                        var bw = custom.borderWidth ? custom.borderWidth : valueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);
                                        return {
                                            text: label,
                                            fillStyle: fill,
                                            strokeStyle: stroke,
                                            lineWidth: bw,
                                            hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
                                            // Extra data used for toggling the correct item
                                            index: i
                                        };
                                    });
                                }
                                return [];
                            }
                        },
                        onClick: function (e, legendItem) {
                            var index = legendItem.index;
                            var chart = this.chart;
                            var i, ilen, meta;
                            for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
                                meta = chart.getDatasetMeta(i);
                                meta.data[index].hidden = !meta.data[index].hidden;
                            }
                            chart.update();
                        }
                    },
                    // Need to override these to give a nice default
                    tooltips: {
                        callbacks: {
                            title: function () {
                                return '';
                            },
                            label: function (item, data) {
                                return data.labels[item.index] + ': ' + item.yLabel;
                            }
                        }
                    }
                });
                module.exports = function (Chart) {
                    Chart.controllers.polarArea = Chart.DatasetController.extend({
                        dataElementType: elements.Arc,
                        linkScales: helpers.noop,
                        update: function (reset) {
                            var me = this;
                            var chart = me.chart;
                            var chartArea = chart.chartArea;
                            var meta = me.getMeta();
                            var opts = chart.options;
                            var arcOpts = opts.elements.arc;
                            var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
                            chart.outerRadius = Math.max((minSize - arcOpts.borderWidth / 2) / 2, 0);
                            chart.innerRadius = Math.max(opts.cutoutPercentage ? (chart.outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);
                            chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
                            me.outerRadius = chart.outerRadius - (chart.radiusLength * me.index);
                            me.innerRadius = me.outerRadius - chart.radiusLength;
                            meta.count = me.countVisibleElements();
                            helpers.each(meta.data, function (arc, index) {
                                me.updateElement(arc, index, reset);
                            });
                        },
                        updateElement: function (arc, index, reset) {
                            var me = this;
                            var chart = me.chart;
                            var dataset = me.getDataset();
                            var opts = chart.options;
                            var animationOpts = opts.animation;
                            var scale = chart.scale;
                            var labels = chart.data.labels;
                            var circumference = me.calculateCircumference(dataset.data[index]);
                            var centerX = scale.xCenter;
                            var centerY = scale.yCenter;
                            // If there is NaN data before us, we need to calculate the starting angle correctly.
                            // We could be way more efficient here, but its unlikely that the polar area chart will have a lot of data
                            var visibleCount = 0;
                            var meta = me.getMeta();
                            for (var i = 0; i < index; ++i) {
                                if (!isNaN(dataset.data[i]) && !meta.data[i].hidden) {
                                    ++visibleCount;
                                }
                            }
                            // var negHalfPI = -0.5 * Math.PI;
                            var datasetStartAngle = opts.startAngle;
                            var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
                            var startAngle = datasetStartAngle + (circumference * visibleCount);
                            var endAngle = startAngle + (arc.hidden ? 0 : circumference);
                            var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
                            helpers.extend(arc, {
                                // Utility
                                _datasetIndex: me.index,
                                _index: index,
                                _scale: scale,
                                // Desired view properties
                                _model: {
                                    x: centerX,
                                    y: centerY,
                                    innerRadius: 0,
                                    outerRadius: reset ? resetRadius : distance,
                                    startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
                                    endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
                                    label: helpers.valueAtIndexOrDefault(labels, index, labels[index])
                                }
                            });
                            // Apply border and fill style
                            me.removeHoverStyle(arc);
                            arc.pivot();
                        },
                        removeHoverStyle: function (arc) {
                            Chart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);
                        },
                        countVisibleElements: function () {
                            var dataset = this.getDataset();
                            var meta = this.getMeta();
                            var count = 0;
                            helpers.each(meta.data, function (element, index) {
                                if (!isNaN(dataset.data[index]) && !element.hidden) {
                                    count++;
                                }
                            });
                            return count;
                        },
                        calculateCircumference: function (value) {
                            var count = this.getMeta().count;
                            if (count > 0 && !isNaN(value)) {
                                return (2 * Math.PI) / count;
                            }
                            return 0;
                        }
                    });
                };
            }, { "25": 25, "40": 40, "45": 45 }], 20: [function (require, module, exports) {
                'use strict';
                var defaults = require(25);
                var elements = require(40);
                var helpers = require(45);
                defaults._set('radar', {
                    scale: {
                        type: 'radialLinear'
                    },
                    elements: {
                        line: {
                            tension: 0 // no bezier in radar
                        }
                    }
                });
                module.exports = function (Chart) {
                    Chart.controllers.radar = Chart.DatasetController.extend({
                        datasetElementType: elements.Line,
                        dataElementType: elements.Point,
                        linkScales: helpers.noop,
                        update: function (reset) {
                            var me = this;
                            var meta = me.getMeta();
                            var line = meta.dataset;
                            var points = meta.data;
                            var custom = line.custom || {};
                            var dataset = me.getDataset();
                            var lineElementOptions = me.chart.options.elements.line;
                            var scale = me.chart.scale;
                            // Compatibility: If the properties are defined with only the old name, use those values
                            if ((dataset.tension !== undefined) && (dataset.lineTension === undefined)) {
                                dataset.lineTension = dataset.tension;
                            }
                            helpers.extend(meta.dataset, {
                                // Utility
                                _datasetIndex: me.index,
                                _scale: scale,
                                // Data
                                _children: points,
                                _loop: true,
                                // Model
                                _model: {
                                    // Appearance
                                    tension: custom.tension ? custom.tension : helpers.valueOrDefault(dataset.lineTension, lineElementOptions.tension),
                                    backgroundColor: custom.backgroundColor ? custom.backgroundColor : (dataset.backgroundColor || lineElementOptions.backgroundColor),
                                    borderWidth: custom.borderWidth ? custom.borderWidth : (dataset.borderWidth || lineElementOptions.borderWidth),
                                    borderColor: custom.borderColor ? custom.borderColor : (dataset.borderColor || lineElementOptions.borderColor),
                                    fill: custom.fill ? custom.fill : (dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill),
                                    borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : (dataset.borderCapStyle || lineElementOptions.borderCapStyle),
                                    borderDash: custom.borderDash ? custom.borderDash : (dataset.borderDash || lineElementOptions.borderDash),
                                    borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : (dataset.borderDashOffset || lineElementOptions.borderDashOffset),
                                    borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : (dataset.borderJoinStyle || lineElementOptions.borderJoinStyle),
                                }
                            });
                            meta.dataset.pivot();
                            // Update Points
                            helpers.each(points, function (point, index) {
                                me.updateElement(point, index, reset);
                            }, me);
                            // Update bezier control points
                            me.updateBezierControlPoints();
                        },
                        updateElement: function (point, index, reset) {
                            var me = this;
                            var custom = point.custom || {};
                            var dataset = me.getDataset();
                            var scale = me.chart.scale;
                            var pointElementOptions = me.chart.options.elements.point;
                            var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);
                            // Compatibility: If the properties are defined with only the old name, use those values
                            if ((dataset.radius !== undefined) && (dataset.pointRadius === undefined)) {
                                dataset.pointRadius = dataset.radius;
                            }
                            if ((dataset.hitRadius !== undefined) && (dataset.pointHitRadius === undefined)) {
                                dataset.pointHitRadius = dataset.hitRadius;
                            }
                            helpers.extend(point, {
                                // Utility
                                _datasetIndex: me.index,
                                _index: index,
                                _scale: scale,
                                // Desired view properties
                                _model: {
                                    x: reset ? scale.xCenter : pointPosition.x,
                                    y: reset ? scale.yCenter : pointPosition.y,
                                    // Appearance
                                    tension: custom.tension ? custom.tension : helpers.valueOrDefault(dataset.lineTension, me.chart.options.elements.line.tension),
                                    radius: custom.radius ? custom.radius : helpers.valueAtIndexOrDefault(dataset.pointRadius, index, pointElementOptions.radius),
                                    backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.valueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor),
                                    borderColor: custom.borderColor ? custom.borderColor : helpers.valueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor),
                                    borderWidth: custom.borderWidth ? custom.borderWidth : helpers.valueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth),
                                    pointStyle: custom.pointStyle ? custom.pointStyle : helpers.valueAtIndexOrDefault(dataset.pointStyle, index, pointElementOptions.pointStyle),
                                    // Tooltip
                                    hitRadius: custom.hitRadius ? custom.hitRadius : helpers.valueAtIndexOrDefault(dataset.pointHitRadius, index, pointElementOptions.hitRadius)
                                }
                            });
                            point._model.skip = custom.skip ? custom.skip : (isNaN(point._model.x) || isNaN(point._model.y));
                        },
                        updateBezierControlPoints: function () {
                            var chartArea = this.chart.chartArea;
                            var meta = this.getMeta();
                            helpers.each(meta.data, function (point, index) {
                                var model = point._model;
                                var controlPoints = helpers.splineCurve(helpers.previousItem(meta.data, index, true)._model, model, helpers.nextItem(meta.data, index, true)._model, model.tension);
                                // Prevent the bezier going outside of the bounds of the graph
                                model.controlPointPreviousX = Math.max(Math.min(controlPoints.previous.x, chartArea.right), chartArea.left);
                                model.controlPointPreviousY = Math.max(Math.min(controlPoints.previous.y, chartArea.bottom), chartArea.top);
                                model.controlPointNextX = Math.max(Math.min(controlPoints.next.x, chartArea.right), chartArea.left);
                                model.controlPointNextY = Math.max(Math.min(controlPoints.next.y, chartArea.bottom), chartArea.top);
                                // Now pivot the point for animation
                                point.pivot();
                            });
                        },
                        setHoverStyle: function (point) {
                            // Point
                            var dataset = this.chart.data.datasets[point._datasetIndex];
                            var custom = point.custom || {};
                            var index = point._index;
                            var model = point._model;
                            model.radius = custom.hoverRadius ? custom.hoverRadius : helpers.valueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
                            model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.valueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
                            model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.valueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
                            model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.valueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);
                        },
                        removeHoverStyle: function (point) {
                            var dataset = this.chart.data.datasets[point._datasetIndex];
                            var custom = point.custom || {};
                            var index = point._index;
                            var model = point._model;
                            var pointElementOptions = this.chart.options.elements.point;
                            model.radius = custom.radius ? custom.radius : helpers.valueAtIndexOrDefault(dataset.pointRadius, index, pointElementOptions.radius);
                            model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.valueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor);
                            model.borderColor = custom.borderColor ? custom.borderColor : helpers.valueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor);
                            model.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.valueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth);
                        }
                    });
                };
            }, { "25": 25, "40": 40, "45": 45 }], 21: [function (require, module, exports) {
                'use strict';
                var defaults = require(25);
                defaults._set('scatter', {
                    hover: {
                        mode: 'single'
                    },
                    scales: {
                        xAxes: [{
                                id: 'x-axis-1',
                                type: 'linear',
                                position: 'bottom'
                            }],
                        yAxes: [{
                                id: 'y-axis-1',
                                type: 'linear',
                                position: 'left'
                            }]
                    },
                    showLines: false,
                    tooltips: {
                        callbacks: {
                            title: function () {
                                return ''; // doesn't make sense for scatter since data are formatted as a point
                            },
                            label: function (item) {
                                return '(' + item.xLabel + ', ' + item.yLabel + ')';
                            }
                        }
                    }
                });
                module.exports = function (Chart) {
                    // Scatter charts use line controllers
                    Chart.controllers.scatter = Chart.controllers.line;
                };
            }, { "25": 25 }], 22: [function (require, module, exports) {
                /* global window: false */
                'use strict';
                var defaults = require(25);
                var Element = require(26);
                var helpers = require(45);
                defaults._set('global', {
                    animation: {
                        duration: 1000,
                        easing: 'easeOutQuart',
                        onProgress: helpers.noop,
                        onComplete: helpers.noop
                    }
                });
                module.exports = function (Chart) {
                    Chart.Animation = Element.extend({
                        chart: null,
                        currentStep: 0,
                        numSteps: 60,
                        easing: '',
                        render: null,
                        onAnimationProgress: null,
                        onAnimationComplete: null,
                    });
                    Chart.animationService = {
                        frameDuration: 17,
                        animations: [],
                        dropFrames: 0,
                        request: null,
                        /**
                         * @param {Chart} chart - The chart to animate.
                         * @param {Chart.Animation} animation - The animation that we will animate.
                         * @param {Number} duration - The animation duration in ms.
                         * @param {Boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions
                         */
                        addAnimation: function (chart, animation, duration, lazy) {
                            var animations = this.animations;
                            var i, ilen;
                            animation.chart = chart;
                            if (!lazy) {
                                chart.animating = true;
                            }
                            for (i = 0, ilen = animations.length; i < ilen; ++i) {
                                if (animations[i].chart === chart) {
                                    animations[i] = animation;
                                    return;
                                }
                            }
                            animations.push(animation);
                            // If there are no animations queued, manually kickstart a digest, for lack of a better word
                            if (animations.length === 1) {
                                this.requestAnimationFrame();
                            }
                        },
                        cancelAnimation: function (chart) {
                            var index = helpers.findIndex(this.animations, function (animation) {
                                return animation.chart === chart;
                            });
                            if (index !== -1) {
                                this.animations.splice(index, 1);
                                chart.animating = false;
                            }
                        },
                        requestAnimationFrame: function () {
                            var me = this;
                            if (me.request === null) {
                                // Skip animation frame requests until the active one is executed.
                                // This can happen when processing mouse events, e.g. 'mousemove'
                                // and 'mouseout' events will trigger multiple renders.
                                me.request = helpers.requestAnimFrame.call(window, function () {
                                    me.request = null;
                                    me.startDigest();
                                });
                            }
                        },
                        /**
                         * @private
                         */
                        startDigest: function () {
                            var me = this;
                            var startTime = Date.now();
                            var framesToDrop = 0;
                            if (me.dropFrames > 1) {
                                framesToDrop = Math.floor(me.dropFrames);
                                me.dropFrames = me.dropFrames % 1;
                            }
                            me.advance(1 + framesToDrop);
                            var endTime = Date.now();
                            me.dropFrames += (endTime - startTime) / me.frameDuration;
                            // Do we have more stuff to animate?
                            if (me.animations.length > 0) {
                                me.requestAnimationFrame();
                            }
                        },
                        /**
                         * @private
                         */
                        advance: function (count) {
                            var animations = this.animations;
                            var animation, chart;
                            var i = 0;
                            while (i < animations.length) {
                                animation = animations[i];
                                chart = animation.chart;
                                animation.currentStep = (animation.currentStep || 0) + count;
                                animation.currentStep = Math.min(animation.currentStep, animation.numSteps);
                                helpers.callback(animation.render, [chart, animation], chart);
                                helpers.callback(animation.onAnimationProgress, [animation], chart);
                                if (animation.currentStep >= animation.numSteps) {
                                    helpers.callback(animation.onAnimationComplete, [animation], chart);
                                    chart.animating = false;
                                    animations.splice(i, 1);
                                }
                                else {
                                    ++i;
                                }
                            }
                        }
                    };
                    /**
                     * Provided for backward compatibility, use Chart.Animation instead
                     * @prop Chart.Animation#animationObject
                     * @deprecated since version 2.6.0
                     * @todo remove at version 3
                     */
                    Object.defineProperty(Chart.Animation.prototype, 'animationObject', {
                        get: function () {
                            return this;
                        }
                    });
                    /**
                     * Provided for backward compatibility, use Chart.Animation#chart instead
                     * @prop Chart.Animation#chartInstance
                     * @deprecated since version 2.6.0
                     * @todo remove at version 3
                     */
                    Object.defineProperty(Chart.Animation.prototype, 'chartInstance', {
                        get: function () {
                            return this.chart;
                        },
                        set: function (value) {
                            this.chart = value;
                        }
                    });
                };
            }, { "25": 25, "26": 26, "45": 45 }], 23: [function (require, module, exports) {
                'use strict';
                var defaults = require(25);
                var helpers = require(45);
                var Interaction = require(28);
                var layouts = require(30);
                var platform = require(48);
                var plugins = require(31);
                module.exports = function (Chart) {
                    // Create a dictionary of chart types, to allow for extension of existing types
                    Chart.types = {};
                    // Store a reference to each instance - allowing us to globally resize chart instances on window resize.
                    // Destroy method on the chart will remove the instance of the chart from this reference.
                    Chart.instances = {};
                    // Controllers available for dataset visualization eg. bar, line, slice, etc.
                    Chart.controllers = {};
                    /**
                     * Initializes the given config with global and chart default values.
                     */
                    function initConfig(config) {
                        config = config || {};
                        // Do NOT use configMerge() for the data object because this method merges arrays
                        // and so would change references to labels and datasets, preventing data updates.
                        var data = config.data = config.data || {};
                        data.datasets = data.datasets || [];
                        data.labels = data.labels || [];
                        config.options = helpers.configMerge(defaults.global, defaults[config.type], config.options || {});
                        return config;
                    }
                    /**
                     * Updates the config of the chart
                     * @param chart {Chart} chart to update the options for
                     */
                    function updateConfig(chart) {
                        var newOptions = chart.options;
                        helpers.each(chart.scales, function (scale) {
                            layouts.removeBox(chart, scale);
                        });
                        newOptions = helpers.configMerge(Chart.defaults.global, Chart.defaults[chart.config.type], newOptions);
                        chart.options = chart.config.options = newOptions;
                        chart.ensureScalesHaveIDs();
                        chart.buildOrUpdateScales();
                        // Tooltip
                        chart.tooltip._options = newOptions.tooltips;
                        chart.tooltip.initialize();
                    }
                    function positionIsHorizontal(position) {
                        return position === 'top' || position === 'bottom';
                    }
                    helpers.extend(Chart.prototype, /** @lends Chart */ {
                        /**
                         * @private
                         */
                        construct: function (item, config) {
                            var me = this;
                            config = initConfig(config);
                            var context = platform.acquireContext(item, config);
                            var canvas = context && context.canvas;
                            var height = canvas && canvas.height;
                            var width = canvas && canvas.width;
                            me.id = helpers.uid();
                            me.ctx = context;
                            me.canvas = canvas;
                            me.config = config;
                            me.width = width;
                            me.height = height;
                            me.aspectRatio = height ? width / height : null;
                            me.options = config.options;
                            me._bufferedRender = false;
                            /**
                             * Provided for backward compatibility, Chart and Chart.Controller have been merged,
                             * the "instance" still need to be defined since it might be called from plugins.
                             * @prop Chart#chart
                             * @deprecated since version 2.6.0
                             * @todo remove at version 3
                             * @private
                             */
                            me.chart = me;
                            me.controller = me; // chart.chart.controller #inception
                            // Add the chart instance to the global namespace
                            Chart.instances[me.id] = me;
                            // Define alias to the config data: `chart.data === chart.config.data`
                            Object.defineProperty(me, 'data', {
                                get: function () {
                                    return me.config.data;
                                },
                                set: function (value) {
                                    me.config.data = value;
                                }
                            });
                            if (!context || !canvas) {
                                // The given item is not a compatible context2d element, let's return before finalizing
                                // the chart initialization but after setting basic chart / controller properties that
                                // can help to figure out that the chart is not valid (e.g chart.canvas !== null);
                                // https://github.com/chartjs/Chart.js/issues/2807
                                console.error("Failed to create chart: can't acquire context from the given item");
                                return;
                            }
                            me.initialize();
                            me.update();
                        },
                        /**
                         * @private
                         */
                        initialize: function () {
                            var me = this;
                            // Before init plugin notification
                            plugins.notify(me, 'beforeInit');
                            helpers.retinaScale(me, me.options.devicePixelRatio);
                            me.bindEvents();
                            if (me.options.responsive) {
                                // Initial resize before chart draws (must be silent to preserve initial animations).
                                me.resize(true);
                            }
                            // Make sure scales have IDs and are built before we build any controllers.
                            me.ensureScalesHaveIDs();
                            me.buildOrUpdateScales();
                            me.initToolTip();
                            // After init plugin notification
                            plugins.notify(me, 'afterInit');
                            return me;
                        },
                        clear: function () {
                            helpers.canvas.clear(this);
                            return this;
                        },
                        stop: function () {
                            // Stops any current animation loop occurring
                            Chart.animationService.cancelAnimation(this);
                            return this;
                        },
                        resize: function (silent) {
                            var me = this;
                            var options = me.options;
                            var canvas = me.canvas;
                            var aspectRatio = (options.maintainAspectRatio && me.aspectRatio) || null;
                            // the canvas render width and height will be casted to integers so make sure that
                            // the canvas display style uses the same integer values to avoid blurring effect.
                            // Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collased
                            var newWidth = Math.max(0, Math.floor(helpers.getMaximumWidth(canvas)));
                            var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers.getMaximumHeight(canvas)));
                            if (me.width === newWidth && me.height === newHeight) {
                                return;
                            }
                            canvas.width = me.width = newWidth;
                            canvas.height = me.height = newHeight;
                            canvas.style.width = newWidth + 'px';
                            canvas.style.height = newHeight + 'px';
                            helpers.retinaScale(me, options.devicePixelRatio);
                            if (!silent) {
                                // Notify any plugins about the resize
                                var newSize = { width: newWidth, height: newHeight };
                                plugins.notify(me, 'resize', [newSize]);
                                // Notify of resize
                                if (me.options.onResize) {
                                    me.options.onResize(me, newSize);
                                }
                                me.stop();
                                me.update(me.options.responsiveAnimationDuration);
                            }
                        },
                        ensureScalesHaveIDs: function () {
                            var options = this.options;
                            var scalesOptions = options.scales || {};
                            var scaleOptions = options.scale;
                            helpers.each(scalesOptions.xAxes, function (xAxisOptions, index) {
                                xAxisOptions.id = xAxisOptions.id || ('x-axis-' + index);
                            });
                            helpers.each(scalesOptions.yAxes, function (yAxisOptions, index) {
                                yAxisOptions.id = yAxisOptions.id || ('y-axis-' + index);
                            });
                            if (scaleOptions) {
                                scaleOptions.id = scaleOptions.id || 'scale';
                            }
                        },
                        /**
                         * Builds a map of scale ID to scale object for future lookup.
                         */
                        buildOrUpdateScales: function () {
                            var me = this;
                            var options = me.options;
                            var scales = me.scales || {};
                            var items = [];
                            var updated = Object.keys(scales).reduce(function (obj, id) {
                                obj[id] = false;
                                return obj;
                            }, {});
                            if (options.scales) {
                                items = items.concat((options.scales.xAxes || []).map(function (xAxisOptions) {
                                    return { options: xAxisOptions, dtype: 'category', dposition: 'bottom' };
                                }), (options.scales.yAxes || []).map(function (yAxisOptions) {
                                    return { options: yAxisOptions, dtype: 'linear', dposition: 'left' };
                                }));
                            }
                            if (options.scale) {
                                items.push({
                                    options: options.scale,
                                    dtype: 'radialLinear',
                                    isDefault: true,
                                    dposition: 'chartArea'
                                });
                            }
                            helpers.each(items, function (item) {
                                var scaleOptions = item.options;
                                var id = scaleOptions.id;
                                var scaleType = helpers.valueOrDefault(scaleOptions.type, item.dtype);
                                if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {
                                    scaleOptions.position = item.dposition;
                                }
                                updated[id] = true;
                                var scale = null;
                                if (id in scales && scales[id].type === scaleType) {
                                    scale = scales[id];
                                    scale.options = scaleOptions;
                                    scale.ctx = me.ctx;
                                    scale.chart = me;
                                }
                                else {
                                    var scaleClass = Chart.scaleService.getScaleConstructor(scaleType);
                                    if (!scaleClass) {
                                        return;
                                    }
                                    scale = new scaleClass({
                                        id: id,
                                        type: scaleType,
                                        options: scaleOptions,
                                        ctx: me.ctx,
                                        chart: me
                                    });
                                    scales[scale.id] = scale;
                                }
                                scale.mergeTicksOptions();
                                // TODO(SB): I think we should be able to remove this custom case (options.scale)
                                // and consider it as a regular scale part of the "scales"" map only! This would
                                // make the logic easier and remove some useless? custom code.
                                if (item.isDefault) {
                                    me.scale = scale;
                                }
                            });
                            // clear up discarded scales
                            helpers.each(updated, function (hasUpdated, id) {
                                if (!hasUpdated) {
                                    delete scales[id];
                                }
                            });
                            me.scales = scales;
                            Chart.scaleService.addScalesToLayout(this);
                        },
                        buildOrUpdateControllers: function () {
                            var me = this;
                            var types = [];
                            var newControllers = [];
                            helpers.each(me.data.datasets, function (dataset, datasetIndex) {
                                var meta = me.getDatasetMeta(datasetIndex);
                                var type = dataset.type || me.config.type;
                                if (meta.type && meta.type !== type) {
                                    me.destroyDatasetMeta(datasetIndex);
                                    meta = me.getDatasetMeta(datasetIndex);
                                }
                                meta.type = type;
                                types.push(meta.type);
                                if (meta.controller) {
                                    meta.controller.updateIndex(datasetIndex);
                                    meta.controller.linkScales();
                                }
                                else {
                                    var ControllerClass = Chart.controllers[meta.type];
                                    if (ControllerClass === undefined) {
                                        throw new Error('"' + meta.type + '" is not a chart type.');
                                    }
                                    meta.controller = new ControllerClass(me, datasetIndex);
                                    newControllers.push(meta.controller);
                                }
                            }, me);
                            return newControllers;
                        },
                        /**
                         * Reset the elements of all datasets
                         * @private
                         */
                        resetElements: function () {
                            var me = this;
                            helpers.each(me.data.datasets, function (dataset, datasetIndex) {
                                me.getDatasetMeta(datasetIndex).controller.reset();
                            }, me);
                        },
                        /**
                        * Resets the chart back to it's state before the initial animation
                        */
                        reset: function () {
                            this.resetElements();
                            this.tooltip.initialize();
                        },
                        update: function (config) {
                            var me = this;
                            if (!config || typeof config !== 'object') {
                                // backwards compatibility
                                config = {
                                    duration: config,
                                    lazy: arguments[1]
                                };
                            }
                            updateConfig(me);
                            // plugins options references might have change, let's invalidate the cache
                            // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
                            plugins._invalidate(me);
                            if (plugins.notify(me, 'beforeUpdate') === false) {
                                return;
                            }
                            // In case the entire data object changed
                            me.tooltip._data = me.data;
                            // Make sure dataset controllers are updated and new controllers are reset
                            var newControllers = me.buildOrUpdateControllers();
                            // Make sure all dataset controllers have correct meta data counts
                            helpers.each(me.data.datasets, function (dataset, datasetIndex) {
                                me.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();
                            }, me);
                            me.updateLayout();
                            // Can only reset the new controllers after the scales have been updated
                            if (me.options.animation && me.options.animation.duration) {
                                helpers.each(newControllers, function (controller) {
                                    controller.reset();
                                });
                            }
                            me.updateDatasets();
                            // Need to reset tooltip in case it is displayed with elements that are removed
                            // after update.
                            me.tooltip.initialize();
                            // Last active contains items that were previously in the tooltip.
                            // When we reset the tooltip, we need to clear it
                            me.lastActive = [];
                            // Do this before render so that any plugins that need final scale updates can use it
                            plugins.notify(me, 'afterUpdate');
                            if (me._bufferedRender) {
                                me._bufferedRequest = {
                                    duration: config.duration,
                                    easing: config.easing,
                                    lazy: config.lazy
                                };
                            }
                            else {
                                me.render(config);
                            }
                        },
                        /**
                         * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`
                         * hook, in which case, plugins will not be called on `afterLayout`.
                         * @private
                         */
                        updateLayout: function () {
                            var me = this;
                            if (plugins.notify(me, 'beforeLayout') === false) {
                                return;
                            }
                            layouts.update(this, this.width, this.height);
                            /**
                             * Provided for backward compatibility, use `afterLayout` instead.
                             * @method IPlugin#afterScaleUpdate
                             * @deprecated since version 2.5.0
                             * @todo remove at version 3
                             * @private
                             */
                            plugins.notify(me, 'afterScaleUpdate');
                            plugins.notify(me, 'afterLayout');
                        },
                        /**
                         * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`
                         * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.
                         * @private
                         */
                        updateDatasets: function () {
                            var me = this;
                            if (plugins.notify(me, 'beforeDatasetsUpdate') === false) {
                                return;
                            }
                            for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
                                me.updateDataset(i);
                            }
                            plugins.notify(me, 'afterDatasetsUpdate');
                        },
                        /**
                         * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`
                         * hook, in which case, plugins will not be called on `afterDatasetUpdate`.
                         * @private
                         */
                        updateDataset: function (index) {
                            var me = this;
                            var meta = me.getDatasetMeta(index);
                            var args = {
                                meta: meta,
                                index: index
                            };
                            if (plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {
                                return;
                            }
                            meta.controller.update();
                            plugins.notify(me, 'afterDatasetUpdate', [args]);
                        },
                        render: function (config) {
                            var me = this;
                            if (!config || typeof config !== 'object') {
                                // backwards compatibility
                                config = {
                                    duration: config,
                                    lazy: arguments[1]
                                };
                            }
                            var duration = config.duration;
                            var lazy = config.lazy;
                            if (plugins.notify(me, 'beforeRender') === false) {
                                return;
                            }
                            var animationOptions = me.options.animation;
                            var onComplete = function (animation) {
                                plugins.notify(me, 'afterRender');
                                helpers.callback(animationOptions && animationOptions.onComplete, [animation], me);
                            };
                            if (animationOptions && ((typeof duration !== 'undefined' && duration !== 0) || (typeof duration === 'undefined' && animationOptions.duration !== 0))) {
                                var animation = new Chart.Animation({
                                    numSteps: (duration || animationOptions.duration) / 16.66,
                                    easing: config.easing || animationOptions.easing,
                                    render: function (chart, animationObject) {
                                        var easingFunction = helpers.easing.effects[animationObject.easing];
                                        var currentStep = animationObject.currentStep;
                                        var stepDecimal = currentStep / animationObject.numSteps;
                                        chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);
                                    },
                                    onAnimationProgress: animationOptions.onProgress,
                                    onAnimationComplete: onComplete
                                });
                                Chart.animationService.addAnimation(me, animation, duration, lazy);
                            }
                            else {
                                me.draw();
                                // See https://github.com/chartjs/Chart.js/issues/3781
                                onComplete(new Chart.Animation({ numSteps: 0, chart: me }));
                            }
                            return me;
                        },
                        draw: function (easingValue) {
                            var me = this;
                            me.clear();
                            if (helpers.isNullOrUndef(easingValue)) {
                                easingValue = 1;
                            }
                            me.transition(easingValue);
                            if (plugins.notify(me, 'beforeDraw', [easingValue]) === false) {
                                return;
                            }
                            // Draw all the scales
                            helpers.each(me.boxes, function (box) {
                                box.draw(me.chartArea);
                            }, me);
                            if (me.scale) {
                                me.scale.draw();
                            }
                            me.drawDatasets(easingValue);
                            me._drawTooltip(easingValue);
                            plugins.notify(me, 'afterDraw', [easingValue]);
                        },
                        /**
                         * @private
                         */
                        transition: function (easingValue) {
                            var me = this;
                            for (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {
                                if (me.isDatasetVisible(i)) {
                                    me.getDatasetMeta(i).controller.transition(easingValue);
                                }
                            }
                            me.tooltip.transition(easingValue);
                        },
                        /**
                         * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`
                         * hook, in which case, plugins will not be called on `afterDatasetsDraw`.
                         * @private
                         */
                        drawDatasets: function (easingValue) {
                            var me = this;
                            if (plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {
                                return;
                            }
                            // Draw datasets reversed to support proper line stacking
                            for (var i = (me.data.datasets || []).length - 1; i >= 0; --i) {
                                if (me.isDatasetVisible(i)) {
                                    me.drawDataset(i, easingValue);
                                }
                            }
                            plugins.notify(me, 'afterDatasetsDraw', [easingValue]);
                        },
                        /**
                         * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`
                         * hook, in which case, plugins will not be called on `afterDatasetDraw`.
                         * @private
                         */
                        drawDataset: function (index, easingValue) {
                            var me = this;
                            var meta = me.getDatasetMeta(index);
                            var args = {
                                meta: meta,
                                index: index,
                                easingValue: easingValue
                            };
                            if (plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {
                                return;
                            }
                            meta.controller.draw(easingValue);
                            plugins.notify(me, 'afterDatasetDraw', [args]);
                        },
                        /**
                         * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`
                         * hook, in which case, plugins will not be called on `afterTooltipDraw`.
                         * @private
                         */
                        _drawTooltip: function (easingValue) {
                            var me = this;
                            var tooltip = me.tooltip;
                            var args = {
                                tooltip: tooltip,
                                easingValue: easingValue
                            };
                            if (plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {
                                return;
                            }
                            tooltip.draw();
                            plugins.notify(me, 'afterTooltipDraw', [args]);
                        },
                        // Get the single element that was clicked on
                        // @return : An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
                        getElementAtEvent: function (e) {
                            return Interaction.modes.single(this, e);
                        },
                        getElementsAtEvent: function (e) {
                            return Interaction.modes.label(this, e, { intersect: true });
                        },
                        getElementsAtXAxis: function (e) {
                            return Interaction.modes['x-axis'](this, e, { intersect: true });
                        },
                        getElementsAtEventForMode: function (e, mode, options) {
                            var method = Interaction.modes[mode];
                            if (typeof method === 'function') {
                                return method(this, e, options);
                            }
                            return [];
                        },
                        getDatasetAtEvent: function (e) {
                            return Interaction.modes.dataset(this, e, { intersect: true });
                        },
                        getDatasetMeta: function (datasetIndex) {
                            var me = this;
                            var dataset = me.data.datasets[datasetIndex];
                            if (!dataset._meta) {
                                dataset._meta = {};
                            }
                            var meta = dataset._meta[me.id];
                            if (!meta) {
                                meta = dataset._meta[me.id] = {
                                    type: null,
                                    data: [],
                                    dataset: null,
                                    controller: null,
                                    hidden: null,
                                    xAxisID: null,
                                    yAxisID: null
                                };
                            }
                            return meta;
                        },
                        getVisibleDatasetCount: function () {
                            var count = 0;
                            for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
                                if (this.isDatasetVisible(i)) {
                                    count++;
                                }
                            }
                            return count;
                        },
                        isDatasetVisible: function (datasetIndex) {
                            var meta = this.getDatasetMeta(datasetIndex);
                            // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,
                            // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.
                            return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
                        },
                        generateLegend: function () {
                            return this.options.legendCallback(this);
                        },
                        /**
                         * @private
                         */
                        destroyDatasetMeta: function (datasetIndex) {
                            var id = this.id;
                            var dataset = this.data.datasets[datasetIndex];
                            var meta = dataset._meta && dataset._meta[id];
                            if (meta) {
                                meta.controller.destroy();
                                delete dataset._meta[id];
                            }
                        },
                        destroy: function () {
                            var me = this;
                            var canvas = me.canvas;
                            var i, ilen;
                            me.stop();
                            // dataset controllers need to cleanup associated data
                            for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
                                me.destroyDatasetMeta(i);
                            }
                            if (canvas) {
                                me.unbindEvents();
                                helpers.canvas.clear(me);
                                platform.releaseContext(me.ctx);
                                me.canvas = null;
                                me.ctx = null;
                            }
                            plugins.notify(me, 'destroy');
                            delete Chart.instances[me.id];
                        },
                        toBase64Image: function () {
                            return this.canvas.toDataURL.apply(this.canvas, arguments);
                        },
                        initToolTip: function () {
                            var me = this;
                            me.tooltip = new Chart.Tooltip({
                                _chart: me,
                                _chartInstance: me,
                                _data: me.data,
                                _options: me.options.tooltips
                            }, me);
                        },
                        /**
                         * @private
                         */
                        bindEvents: function () {
                            var me = this;
                            var listeners = me._listeners = {};
                            var listener = function () {
                                me.eventHandler.apply(me, arguments);
                            };
                            helpers.each(me.options.events, function (type) {
                                platform.addEventListener(me, type, listener);
                                listeners[type] = listener;
                            });
                            // Elements used to detect size change should not be injected for non responsive charts.
                            // See https://github.com/chartjs/Chart.js/issues/2210
                            if (me.options.responsive) {
                                listener = function () {
                                    me.resize();
                                };
                                platform.addEventListener(me, 'resize', listener);
                                listeners.resize = listener;
                            }
                        },
                        /**
                         * @private
                         */
                        unbindEvents: function () {
                            var me = this;
                            var listeners = me._listeners;
                            if (!listeners) {
                                return;
                            }
                            delete me._listeners;
                            helpers.each(listeners, function (listener, type) {
                                platform.removeEventListener(me, type, listener);
                            });
                        },
                        updateHoverStyle: function (elements, mode, enabled) {
                            var method = enabled ? 'setHoverStyle' : 'removeHoverStyle';
                            var element, i, ilen;
                            for (i = 0, ilen = elements.length; i < ilen; ++i) {
                                element = elements[i];
                                if (element) {
                                    this.getDatasetMeta(element._datasetIndex).controller[method](element);
                                }
                            }
                        },
                        /**
                         * @private
                         */
                        eventHandler: function (e) {
                            var me = this;
                            var tooltip = me.tooltip;
                            if (plugins.notify(me, 'beforeEvent', [e]) === false) {
                                return;
                            }
                            // Buffer any update calls so that renders do not occur
                            me._bufferedRender = true;
                            me._bufferedRequest = null;
                            var changed = me.handleEvent(e);
                            // for smooth tooltip animations issue #4989
                            // the tooltip should be the source of change
                            // Animation check workaround:
                            // tooltip._start will be null when tooltip isn't animating
                            if (tooltip) {
                                changed = tooltip._start
                                    ? tooltip.handleEvent(e)
                                    : changed | tooltip.handleEvent(e);
                            }
                            plugins.notify(me, 'afterEvent', [e]);
                            var bufferedRequest = me._bufferedRequest;
                            if (bufferedRequest) {
                                // If we have an update that was triggered, we need to do a normal render
                                me.render(bufferedRequest);
                            }
                            else if (changed && !me.animating) {
                                // If entering, leaving, or changing elements, animate the change via pivot
                                me.stop();
                                // We only need to render at this point. Updating will cause scales to be
                                // recomputed generating flicker & using more memory than necessary.
                                me.render(me.options.hover.animationDuration, true);
                            }
                            me._bufferedRender = false;
                            me._bufferedRequest = null;
                            return me;
                        },
                        /**
                         * Handle an event
                         * @private
                         * @param {IEvent} event the event to handle
                         * @return {Boolean} true if the chart needs to re-render
                         */
                        handleEvent: function (e) {
                            var me = this;
                            var options = me.options || {};
                            var hoverOptions = options.hover;
                            var changed = false;
                            me.lastActive = me.lastActive || [];
                            // Find Active Elements for hover and tooltips
                            if (e.type === 'mouseout') {
                                me.active = [];
                            }
                            else {
                                me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
                            }
                            // Invoke onHover hook
                            // Need to call with native event here to not break backwards compatibility
                            helpers.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);
                            if (e.type === 'mouseup' || e.type === 'click') {
                                if (options.onClick) {
                                    // Use e.native here for backwards compatibility
                                    options.onClick.call(me, e.native, me.active);
                                }
                            }
                            // Remove styling for last active (even if it may still be active)
                            if (me.lastActive.length) {
                                me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
                            }
                            // Built in hover styling
                            if (me.active.length && hoverOptions.mode) {
                                me.updateHoverStyle(me.active, hoverOptions.mode, true);
                            }
                            changed = !helpers.arrayEquals(me.active, me.lastActive);
                            // Remember Last Actives
                            me.lastActive = me.active;
                            return changed;
                        }
                    });
                    /**
                     * Provided for backward compatibility, use Chart instead.
                     * @class Chart.Controller
                     * @deprecated since version 2.6.0
                     * @todo remove at version 3
                     * @private
                     */
                    Chart.Controller = Chart;
                };
            }, { "25": 25, "28": 28, "30": 30, "31": 31, "45": 45, "48": 48 }], 24: [function (require, module, exports) {
                'use strict';
                var helpers = require(45);
                module.exports = function (Chart) {
                    var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];
                    /**
                     * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',
                     * 'unshift') and notify the listener AFTER the array has been altered. Listeners are
                     * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.
                     */
                    function listenArrayEvents(array, listener) {
                        if (array._chartjs) {
                            array._chartjs.listeners.push(listener);
                            return;
                        }
                        Object.defineProperty(array, '_chartjs', {
                            configurable: true,
                            enumerable: false,
                            value: {
                                listeners: [listener]
                            }
                        });
                        arrayEvents.forEach(function (key) {
                            var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);
                            var base = array[key];
                            Object.defineProperty(array, key, {
                                configurable: true,
                                enumerable: false,
                                value: function () {
                                    var args = Array.prototype.slice.call(arguments);
                                    var res = base.apply(this, args);
                                    helpers.each(array._chartjs.listeners, function (object) {
                                        if (typeof object[method] === 'function') {
                                            object[method].apply(object, args);
                                        }
                                    });
                                    return res;
                                }
                            });
                        });
                    }
                    /**
                     * Removes the given array event listener and cleanup extra attached properties (such as
                     * the _chartjs stub and overridden methods) if array doesn't have any more listeners.
                     */
                    function unlistenArrayEvents(array, listener) {
                        var stub = array._chartjs;
                        if (!stub) {
                            return;
                        }
                        var listeners = stub.listeners;
                        var index = listeners.indexOf(listener);
                        if (index !== -1) {
                            listeners.splice(index, 1);
                        }
                        if (listeners.length > 0) {
                            return;
                        }
                        arrayEvents.forEach(function (key) {
                            delete array[key];
                        });
                        delete array._chartjs;
                    }
                    // Base class for all dataset controllers (line, bar, etc)
                    Chart.DatasetController = function (chart, datasetIndex) {
                        this.initialize(chart, datasetIndex);
                    };
                    helpers.extend(Chart.DatasetController.prototype, {
                        /**
                         * Element type used to generate a meta dataset (e.g. Chart.element.Line).
                         * @type {Chart.core.element}
                         */
                        datasetElementType: null,
                        /**
                         * Element type used to generate a meta data (e.g. Chart.element.Point).
                         * @type {Chart.core.element}
                         */
                        dataElementType: null,
                        initialize: function (chart, datasetIndex) {
                            var me = this;
                            me.chart = chart;
                            me.index = datasetIndex;
                            me.linkScales();
                            me.addElements();
                        },
                        updateIndex: function (datasetIndex) {
                            this.index = datasetIndex;
                        },
                        linkScales: function () {
                            var me = this;
                            var meta = me.getMeta();
                            var dataset = me.getDataset();
                            if (meta.xAxisID === null || !(meta.xAxisID in me.chart.scales)) {
                                meta.xAxisID = dataset.xAxisID || me.chart.options.scales.xAxes[0].id;
                            }
                            if (meta.yAxisID === null || !(meta.yAxisID in me.chart.scales)) {
                                meta.yAxisID = dataset.yAxisID || me.chart.options.scales.yAxes[0].id;
                            }
                        },
                        getDataset: function () {
                            return this.chart.data.datasets[this.index];
                        },
                        getMeta: function () {
                            return this.chart.getDatasetMeta(this.index);
                        },
                        getScaleForId: function (scaleID) {
                            return this.chart.scales[scaleID];
                        },
                        reset: function () {
                            this.update(true);
                        },
                        /**
                         * @private
                         */
                        destroy: function () {
                            if (this._data) {
                                unlistenArrayEvents(this._data, this);
                            }
                        },
                        createMetaDataset: function () {
                            var me = this;
                            var type = me.datasetElementType;
                            return type && new type({
                                _chart: me.chart,
                                _datasetIndex: me.index
                            });
                        },
                        createMetaData: function (index) {
                            var me = this;
                            var type = me.dataElementType;
                            return type && new type({
                                _chart: me.chart,
                                _datasetIndex: me.index,
                                _index: index
                            });
                        },
                        addElements: function () {
                            var me = this;
                            var meta = me.getMeta();
                            var data = me.getDataset().data || [];
                            var metaData = meta.data;
                            var i, ilen;
                            for (i = 0, ilen = data.length; i < ilen; ++i) {
                                metaData[i] = metaData[i] || me.createMetaData(i);
                            }
                            meta.dataset = meta.dataset || me.createMetaDataset();
                        },
                        addElementAndReset: function (index) {
                            var element = this.createMetaData(index);
                            this.getMeta().data.splice(index, 0, element);
                            this.updateElement(element, index, true);
                        },
                        buildOrUpdateElements: function () {
                            var me = this;
                            var dataset = me.getDataset();
                            var data = dataset.data || (dataset.data = []);
                            // In order to correctly handle data addition/deletion animation (an thus simulate
                            // real-time charts), we need to monitor these data modifications and synchronize
                            // the internal meta data accordingly.
                            if (me._data !== data) {
                                if (me._data) {
                                    // This case happens when the user replaced the data array instance.
                                    unlistenArrayEvents(me._data, me);
                                }
                                listenArrayEvents(data, me);
                                me._data = data;
                            }
                            // Re-sync meta data in case the user replaced the data array or if we missed
                            // any updates and so make sure that we handle number of datapoints changing.
                            me.resyncElements();
                        },
                        update: helpers.noop,
                        transition: function (easingValue) {
                            var meta = this.getMeta();
                            var elements = meta.data || [];
                            var ilen = elements.length;
                            var i = 0;
                            for (; i < ilen; ++i) {
                                elements[i].transition(easingValue);
                            }
                            if (meta.dataset) {
                                meta.dataset.transition(easingValue);
                            }
                        },
                        draw: function () {
                            var meta = this.getMeta();
                            var elements = meta.data || [];
                            var ilen = elements.length;
                            var i = 0;
                            if (meta.dataset) {
                                meta.dataset.draw();
                            }
                            for (; i < ilen; ++i) {
                                elements[i].draw();
                            }
                        },
                        removeHoverStyle: function (element, elementOpts) {
                            var dataset = this.chart.data.datasets[element._datasetIndex];
                            var index = element._index;
                            var custom = element.custom || {};
                            var valueOrDefault = helpers.valueAtIndexOrDefault;
                            var model = element._model;
                            model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : valueOrDefault(dataset.backgroundColor, index, elementOpts.backgroundColor);
                            model.borderColor = custom.borderColor ? custom.borderColor : valueOrDefault(dataset.borderColor, index, elementOpts.borderColor);
                            model.borderWidth = custom.borderWidth ? custom.borderWidth : valueOrDefault(dataset.borderWidth, index, elementOpts.borderWidth);
                        },
                        setHoverStyle: function (element) {
                            var dataset = this.chart.data.datasets[element._datasetIndex];
                            var index = element._index;
                            var custom = element.custom || {};
                            var valueOrDefault = helpers.valueAtIndexOrDefault;
                            var getHoverColor = helpers.getHoverColor;
                            var model = element._model;
                            model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : valueOrDefault(dataset.hoverBackgroundColor, index, getHoverColor(model.backgroundColor));
                            model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : valueOrDefault(dataset.hoverBorderColor, index, getHoverColor(model.borderColor));
                            model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : valueOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);
                        },
                        /**
                         * @private
                         */
                        resyncElements: function () {
                            var me = this;
                            var meta = me.getMeta();
                            var data = me.getDataset().data;
                            var numMeta = meta.data.length;
                            var numData = data.length;
                            if (numData < numMeta) {
                                meta.data.splice(numData, numMeta - numData);
                            }
                            else if (numData > numMeta) {
                                me.insertElements(numMeta, numData - numMeta);
                            }
                        },
                        /**
                         * @private
                         */
                        insertElements: function (start, count) {
                            for (var i = 0; i < count; ++i) {
                                this.addElementAndReset(start + i);
                            }
                        },
                        /**
                         * @private
                         */
                        onDataPush: function () {
                            this.insertElements(this.getDataset().data.length - 1, arguments.length);
                        },
                        /**
                         * @private
                         */
                        onDataPop: function () {
                            this.getMeta().data.pop();
                        },
                        /**
                         * @private
                         */
                        onDataShift: function () {
                            this.getMeta().data.shift();
                        },
                        /**
                         * @private
                         */
                        onDataSplice: function (start, count) {
                            this.getMeta().data.splice(start, count);
                            this.insertElements(start, arguments.length - 2);
                        },
                        /**
                         * @private
                         */
                        onDataUnshift: function () {
                            this.insertElements(0, arguments.length);
                        }
                    });
                    Chart.DatasetController.extend = helpers.inherits;
                };
            }, { "45": 45 }], 25: [function (require, module, exports) {
                'use strict';
                var helpers = require(45);
                module.exports = {
                    /**
                     * @private
                     */
                    _set: function (scope, values) {
                        return helpers.merge(this[scope] || (this[scope] = {}), values);
                    }
                };
            }, { "45": 45 }], 26: [function (require, module, exports) {
                'use strict';
                var color = require(3);
                var helpers = require(45);
                function interpolate(start, view, model, ease) {
                    var keys = Object.keys(model);
                    var i, ilen, key, actual, origin, target, type, c0, c1;
                    for (i = 0, ilen = keys.length; i < ilen; ++i) {
                        key = keys[i];
                        target = model[key];
                        // if a value is added to the model after pivot() has been called, the view
                        // doesn't contain it, so let's initialize the view to the target value.
                        if (!view.hasOwnProperty(key)) {
                            view[key] = target;
                        }
                        actual = view[key];
                        if (actual === target || key[0] === '_') {
                            continue;
                        }
                        if (!start.hasOwnProperty(key)) {
                            start[key] = actual;
                        }
                        origin = start[key];
                        type = typeof target;
                        if (type === typeof origin) {
                            if (type === 'string') {
                                c0 = color(origin);
                                if (c0.valid) {
                                    c1 = color(target);
                                    if (c1.valid) {
                                        view[key] = c1.mix(c0, ease).rgbString();
                                        continue;
                                    }
                                }
                            }
                            else if (type === 'number' && isFinite(origin) && isFinite(target)) {
                                view[key] = origin + (target - origin) * ease;
                                continue;
                            }
                        }
                        view[key] = target;
                    }
                }
                var Element = function (configuration) {
                    helpers.extend(this, configuration);
                    this.initialize.apply(this, arguments);
                };
                helpers.extend(Element.prototype, {
                    initialize: function () {
                        this.hidden = false;
                    },
                    pivot: function () {
                        var me = this;
                        if (!me._view) {
                            me._view = helpers.clone(me._model);
                        }
                        me._start = {};
                        return me;
                    },
                    transition: function (ease) {
                        var me = this;
                        var model = me._model;
                        var start = me._start;
                        var view = me._view;
                        // No animation -> No Transition
                        if (!model || ease === 1) {
                            me._view = model;
                            me._start = null;
                            return me;
                        }
                        if (!view) {
                            view = me._view = {};
                        }
                        if (!start) {
                            start = me._start = {};
                        }
                        interpolate(start, view, model, ease);
                        return me;
                    },
                    tooltipPosition: function () {
                        return {
                            x: this._model.x,
                            y: this._model.y
                        };
                    },
                    hasValue: function () {
                        return helpers.isNumber(this._model.x) && helpers.isNumber(this._model.y);
                    }
                });
                Element.extend = helpers.inherits;
                module.exports = Element;
            }, { "3": 3, "45": 45 }], 27: [function (require, module, exports) {
                /* global window: false */
                /* global document: false */
                'use strict';
                var color = require(3);
                var defaults = require(25);
                var helpers = require(45);
                module.exports = function (Chart) {
                    // -- Basic js utility methods
                    helpers.configMerge = function ( /* objects ... */) {
                        return helpers.merge(helpers.clone(arguments[0]), [].slice.call(arguments, 1), {
                            merger: function (key, target, source, options) {
                                var tval = target[key] || {};
                                var sval = source[key];
                                if (key === 'scales') {
                                    // scale config merging is complex. Add our own function here for that
                                    target[key] = helpers.scaleMerge(tval, sval);
                                }
                                else if (key === 'scale') {
                                    // used in polar area & radar charts since there is only one scale
                                    target[key] = helpers.merge(tval, [Chart.scaleService.getScaleDefaults(sval.type), sval]);
                                }
                                else {
                                    helpers._merger(key, target, source, options);
                                }
                            }
                        });
                    };
                    helpers.scaleMerge = function ( /* objects ... */) {
                        return helpers.merge(helpers.clone(arguments[0]), [].slice.call(arguments, 1), {
                            merger: function (key, target, source, options) {
                                if (key === 'xAxes' || key === 'yAxes') {
                                    var slen = source[key].length;
                                    var i, type, scale;
                                    if (!target[key]) {
                                        target[key] = [];
                                    }
                                    for (i = 0; i < slen; ++i) {
                                        scale = source[key][i];
                                        type = helpers.valueOrDefault(scale.type, key === 'xAxes' ? 'category' : 'linear');
                                        if (i >= target[key].length) {
                                            target[key].push({});
                                        }
                                        if (!target[key][i].type || (scale.type && scale.type !== target[key][i].type)) {
                                            // new/untyped scale or type changed: let's apply the new defaults
                                            // then merge source scale to correctly overwrite the defaults.
                                            helpers.merge(target[key][i], [Chart.scaleService.getScaleDefaults(type), scale]);
                                        }
                                        else {
                                            // scales type are the same
                                            helpers.merge(target[key][i], scale);
                                        }
                                    }
                                }
                                else {
                                    helpers._merger(key, target, source, options);
                                }
                            }
                        });
                    };
                    helpers.where = function (collection, filterCallback) {
                        if (helpers.isArray(collection) && Array.prototype.filter) {
                            return collection.filter(filterCallback);
                        }
                        var filtered = [];
                        helpers.each(collection, function (item) {
                            if (filterCallback(item)) {
                                filtered.push(item);
                            }
                        });
                        return filtered;
                    };
                    helpers.findIndex = Array.prototype.findIndex ?
                        function (array, callback, scope) {
                            return array.findIndex(callback, scope);
                        } :
                        function (array, callback, scope) {
                            scope = scope === undefined ? array : scope;
                            for (var i = 0, ilen = array.length; i < ilen; ++i) {
                                if (callback.call(scope, array[i], i, array)) {
                                    return i;
                                }
                            }
                            return -1;
                        };
                    helpers.findNextWhere = function (arrayToSearch, filterCallback, startIndex) {
                        // Default to start of the array
                        if (helpers.isNullOrUndef(startIndex)) {
                            startIndex = -1;
                        }
                        for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
                            var currentItem = arrayToSearch[i];
                            if (filterCallback(currentItem)) {
                                return currentItem;
                            }
                        }
                    };
                    helpers.findPreviousWhere = function (arrayToSearch, filterCallback, startIndex) {
                        // Default to end of the array
                        if (helpers.isNullOrUndef(startIndex)) {
                            startIndex = arrayToSearch.length;
                        }
                        for (var i = startIndex - 1; i >= 0; i--) {
                            var currentItem = arrayToSearch[i];
                            if (filterCallback(currentItem)) {
                                return currentItem;
                            }
                        }
                    };
                    // -- Math methods
                    helpers.isNumber = function (n) {
                        return !isNaN(parseFloat(n)) && isFinite(n);
                    };
                    helpers.almostEquals = function (x, y, epsilon) {
                        return Math.abs(x - y) < epsilon;
                    };
                    helpers.almostWhole = function (x, epsilon) {
                        var rounded = Math.round(x);
                        return (((rounded - epsilon) < x) && ((rounded + epsilon) > x));
                    };
                    helpers.max = function (array) {
                        return array.reduce(function (max, value) {
                            if (!isNaN(value)) {
                                return Math.max(max, value);
                            }
                            return max;
                        }, Number.NEGATIVE_INFINITY);
                    };
                    helpers.min = function (array) {
                        return array.reduce(function (min, value) {
                            if (!isNaN(value)) {
                                return Math.min(min, value);
                            }
                            return min;
                        }, Number.POSITIVE_INFINITY);
                    };
                    helpers.sign = Math.sign ?
                        function (x) {
                            return Math.sign(x);
                        } :
                        function (x) {
                            x = +x; // convert to a number
                            if (x === 0 || isNaN(x)) {
                                return x;
                            }
                            return x > 0 ? 1 : -1;
                        };
                    helpers.log10 = Math.log10 ?
                        function (x) {
                            return Math.log10(x);
                        } :
                        function (x) {
                            var exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.
                            // Check for whole powers of 10,
                            // which due to floating point rounding error should be corrected.
                            var powerOf10 = Math.round(exponent);
                            var isPowerOf10 = x === Math.pow(10, powerOf10);
                            return isPowerOf10 ? powerOf10 : exponent;
                        };
                    helpers.toRadians = function (degrees) {
                        return degrees * (Math.PI / 180);
                    };
                    helpers.toDegrees = function (radians) {
                        return radians * (180 / Math.PI);
                    };
                    // Gets the angle from vertical upright to the point about a centre.
                    helpers.getAngleFromPoint = function (centrePoint, anglePoint) {
                        var distanceFromXCenter = anglePoint.x - centrePoint.x;
                        var distanceFromYCenter = anglePoint.y - centrePoint.y;
                        var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
                        var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
                        if (angle < (-0.5 * Math.PI)) {
                            angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
                        }
                        return {
                            angle: angle,
                            distance: radialDistanceFromCenter
                        };
                    };
                    helpers.distanceBetweenPoints = function (pt1, pt2) {
                        return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
                    };
                    helpers.aliasPixel = function (pixelWidth) {
                        return (pixelWidth % 2 === 0) ? 0 : 0.5;
                    };
                    helpers.splineCurve = function (firstPoint, middlePoint, afterPoint, t) {
                        // Props to Rob Spencer at scaled innovation for his post on splining between points
                        // http://scaledinnovation.com/analytics/splines/aboutSplines.html
                        // This function must also respect "skipped" points
                        var previous = firstPoint.skip ? middlePoint : firstPoint;
                        var current = middlePoint;
                        var next = afterPoint.skip ? middlePoint : afterPoint;
                        var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
                        var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));
                        var s01 = d01 / (d01 + d12);
                        var s12 = d12 / (d01 + d12);
                        // If all points are the same, s01 & s02 will be inf
                        s01 = isNaN(s01) ? 0 : s01;
                        s12 = isNaN(s12) ? 0 : s12;
                        var fa = t * s01; // scaling factor for triangle Ta
                        var fb = t * s12;
                        return {
                            previous: {
                                x: current.x - fa * (next.x - previous.x),
                                y: current.y - fa * (next.y - previous.y)
                            },
                            next: {
                                x: current.x + fb * (next.x - previous.x),
                                y: current.y + fb * (next.y - previous.y)
                            }
                        };
                    };
                    helpers.EPSILON = Number.EPSILON || 1e-14;
                    helpers.splineCurveMonotone = function (points) {
                        // This function calculates Bézier control points in a similar way than |splineCurve|,
                        // but preserves monotonicity of the provided data and ensures no local extremums are added
                        // between the dataset discrete points due to the interpolation.
                        // See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation
                        var pointsWithTangents = (points || []).map(function (point) {
                            return {
                                model: point._model,
                                deltaK: 0,
                                mK: 0
                            };
                        });
                        // Calculate slopes (deltaK) and initialize tangents (mK)
                        var pointsLen = pointsWithTangents.length;
                        var i, pointBefore, pointCurrent, pointAfter;
                        for (i = 0; i < pointsLen; ++i) {
                            pointCurrent = pointsWithTangents[i];
                            if (pointCurrent.model.skip) {
                                continue;
                            }
                            pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
                            pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
                            if (pointAfter && !pointAfter.model.skip) {
                                var slopeDeltaX = (pointAfter.model.x - pointCurrent.model.x);
                                // In the case of two points that appear at the same x pixel, slopeDeltaX is 0
                                pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
                            }
                            if (!pointBefore || pointBefore.model.skip) {
                                pointCurrent.mK = pointCurrent.deltaK;
                            }
                            else if (!pointAfter || pointAfter.model.skip) {
                                pointCurrent.mK = pointBefore.deltaK;
                            }
                            else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
                                pointCurrent.mK = 0;
                            }
                            else {
                                pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
                            }
                        }
                        // Adjust tangents to ensure monotonic properties
                        var alphaK, betaK, tauK, squaredMagnitude;
                        for (i = 0; i < pointsLen - 1; ++i) {
                            pointCurrent = pointsWithTangents[i];
                            pointAfter = pointsWithTangents[i + 1];
                            if (pointCurrent.model.skip || pointAfter.model.skip) {
                                continue;
                            }
                            if (helpers.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
                                pointCurrent.mK = pointAfter.mK = 0;
                                continue;
                            }
                            alphaK = pointCurrent.mK / pointCurrent.deltaK;
                            betaK = pointAfter.mK / pointCurrent.deltaK;
                            squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
                            if (squaredMagnitude <= 9) {
                                continue;
                            }
                            tauK = 3 / Math.sqrt(squaredMagnitude);
                            pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
                            pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
                        }
                        // Compute control points
                        var deltaX;
                        for (i = 0; i < pointsLen; ++i) {
                            pointCurrent = pointsWithTangents[i];
                            if (pointCurrent.model.skip) {
                                continue;
                            }
                            pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
                            pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
                            if (pointBefore && !pointBefore.model.skip) {
                                deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
                                pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
                                pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
                            }
                            if (pointAfter && !pointAfter.model.skip) {
                                deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
                                pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
                                pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
                            }
                        }
                    };
                    helpers.nextItem = function (collection, index, loop) {
                        if (loop) {
                            return index >= collection.length - 1 ? collection[0] : collection[index + 1];
                        }
                        return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
                    };
                    helpers.previousItem = function (collection, index, loop) {
                        if (loop) {
                            return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
                        }
                        return index <= 0 ? collection[0] : collection[index - 1];
                    };
                    // Implementation of the nice number algorithm used in determining where axis labels will go
                    helpers.niceNum = function (range, round) {
                        var exponent = Math.floor(helpers.log10(range));
                        var fraction = range / Math.pow(10, exponent);
                        var niceFraction;
                        if (round) {
                            if (fraction < 1.5) {
                                niceFraction = 1;
                            }
                            else if (fraction < 3) {
                                niceFraction = 2;
                            }
                            else if (fraction < 7) {
                                niceFraction = 5;
                            }
                            else {
                                niceFraction = 10;
                            }
                        }
                        else if (fraction <= 1.0) {
                            niceFraction = 1;
                        }
                        else if (fraction <= 2) {
                            niceFraction = 2;
                        }
                        else if (fraction <= 5) {
                            niceFraction = 5;
                        }
                        else {
                            niceFraction = 10;
                        }
                        return niceFraction * Math.pow(10, exponent);
                    };
                    // Request animation polyfill - http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
                    helpers.requestAnimFrame = (function () {
                        if (typeof window === 'undefined') {
                            return function (callback) {
                                callback();
                            };
                        }
                        return window.requestAnimationFrame ||
                            window.webkitRequestAnimationFrame ||
                            window.mozRequestAnimationFrame ||
                            window.oRequestAnimationFrame ||
                            window.msRequestAnimationFrame ||
                            function (callback) {
                                return window.setTimeout(callback, 1000 / 60);
                            };
                    }());
                    // -- DOM methods
                    helpers.getRelativePosition = function (evt, chart) {
                        var mouseX, mouseY;
                        var e = evt.originalEvent || evt;
                        var canvas = evt.currentTarget || evt.srcElement;
                        var boundingRect = canvas.getBoundingClientRect();
                        var touches = e.touches;
                        if (touches && touches.length > 0) {
                            mouseX = touches[0].clientX;
                            mouseY = touches[0].clientY;
                        }
                        else {
                            mouseX = e.clientX;
                            mouseY = e.clientY;
                        }
                        // Scale mouse coordinates into canvas coordinates
                        // by following the pattern laid out by 'jerryj' in the comments of
                        // http://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/
                        var paddingLeft = parseFloat(helpers.getStyle(canvas, 'padding-left'));
                        var paddingTop = parseFloat(helpers.getStyle(canvas, 'padding-top'));
                        var paddingRight = parseFloat(helpers.getStyle(canvas, 'padding-right'));
                        var paddingBottom = parseFloat(helpers.getStyle(canvas, 'padding-bottom'));
                        var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
                        var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;
                        // We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However
                        // the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here
                        mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);
                        mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);
                        return {
                            x: mouseX,
                            y: mouseY
                        };
                    };
                    // Private helper function to convert max-width/max-height values that may be percentages into a number
                    function parseMaxStyle(styleValue, node, parentProperty) {
                        var valueInPixels;
                        if (typeof styleValue === 'string') {
                            valueInPixels = parseInt(styleValue, 10);
                            if (styleValue.indexOf('%') !== -1) {
                                // percentage * size in dimension
                                valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
                            }
                        }
                        else {
                            valueInPixels = styleValue;
                        }
                        return valueInPixels;
                    }
                    /**
                     * Returns if the given value contains an effective constraint.
                     * @private
                     */
                    function isConstrainedValue(value) {
                        return value !== undefined && value !== null && value !== 'none';
                    }
                    // Private helper to get a constraint dimension
                    // @param domNode : the node to check the constraint on
                    // @param maxStyle : the style that defines the maximum for the direction we are using (maxWidth / maxHeight)
                    // @param percentageProperty : property of parent to use when calculating width as a percentage
                    // @see http://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser
                    function getConstraintDimension(domNode, maxStyle, percentageProperty) {
                        var view = document.defaultView;
                        var parentNode = domNode.parentNode;
                        var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
                        var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
                        var hasCNode = isConstrainedValue(constrainedNode);
                        var hasCContainer = isConstrainedValue(constrainedContainer);
                        var infinity = Number.POSITIVE_INFINITY;
                        if (hasCNode || hasCContainer) {
                            return Math.min(hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity, hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
                        }
                        return 'none';
                    }
                    // returns Number or undefined if no constraint
                    helpers.getConstraintWidth = function (domNode) {
                        return getConstraintDimension(domNode, 'max-width', 'clientWidth');
                    };
                    // returns Number or undefined if no constraint
                    helpers.getConstraintHeight = function (domNode) {
                        return getConstraintDimension(domNode, 'max-height', 'clientHeight');
                    };
                    helpers.getMaximumWidth = function (domNode) {
                        var container = domNode.parentNode;
                        if (!container) {
                            return domNode.clientWidth;
                        }
                        var paddingLeft = parseInt(helpers.getStyle(container, 'padding-left'), 10);
                        var paddingRight = parseInt(helpers.getStyle(container, 'padding-right'), 10);
                        var w = container.clientWidth - paddingLeft - paddingRight;
                        var cw = helpers.getConstraintWidth(domNode);
                        return isNaN(cw) ? w : Math.min(w, cw);
                    };
                    helpers.getMaximumHeight = function (domNode) {
                        var container = domNode.parentNode;
                        if (!container) {
                            return domNode.clientHeight;
                        }
                        var paddingTop = parseInt(helpers.getStyle(container, 'padding-top'), 10);
                        var paddingBottom = parseInt(helpers.getStyle(container, 'padding-bottom'), 10);
                        var h = container.clientHeight - paddingTop - paddingBottom;
                        var ch = helpers.getConstraintHeight(domNode);
                        return isNaN(ch) ? h : Math.min(h, ch);
                    };
                    helpers.getStyle = function (el, property) {
                        return el.currentStyle ?
                            el.currentStyle[property] :
                            document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
                    };
                    helpers.retinaScale = function (chart, forceRatio) {
                        var pixelRatio = chart.currentDevicePixelRatio = forceRatio || window.devicePixelRatio || 1;
                        if (pixelRatio === 1) {
                            return;
                        }
                        var canvas = chart.canvas;
                        var height = chart.height;
                        var width = chart.width;
                        canvas.height = height * pixelRatio;
                        canvas.width = width * pixelRatio;
                        chart.ctx.scale(pixelRatio, pixelRatio);
                        // If no style has been set on the canvas, the render size is used as display size,
                        // making the chart visually bigger, so let's enforce it to the "correct" values.
                        // See https://github.com/chartjs/Chart.js/issues/3575
                        if (!canvas.style.height && !canvas.style.width) {
                            canvas.style.height = height + 'px';
                            canvas.style.width = width + 'px';
                        }
                    };
                    // -- Canvas methods
                    helpers.fontString = function (pixelSize, fontStyle, fontFamily) {
                        return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
                    };
                    helpers.longestText = function (ctx, font, arrayOfThings, cache) {
                        cache = cache || {};
                        var data = cache.data = cache.data || {};
                        var gc = cache.garbageCollect = cache.garbageCollect || [];
                        if (cache.font !== font) {
                            data = cache.data = {};
                            gc = cache.garbageCollect = [];
                            cache.font = font;
                        }
                        ctx.font = font;
                        var longest = 0;
                        helpers.each(arrayOfThings, function (thing) {
                            // Undefined strings and arrays should not be measured
                            if (thing !== undefined && thing !== null && helpers.isArray(thing) !== true) {
                                longest = helpers.measureText(ctx, data, gc, longest, thing);
                            }
                            else if (helpers.isArray(thing)) {
                                // if it is an array lets measure each element
                                // to do maybe simplify this function a bit so we can do this more recursively?
                                helpers.each(thing, function (nestedThing) {
                                    // Undefined strings and arrays should not be measured
                                    if (nestedThing !== undefined && nestedThing !== null && !helpers.isArray(nestedThing)) {
                                        longest = helpers.measureText(ctx, data, gc, longest, nestedThing);
                                    }
                                });
                            }
                        });
                        var gcLen = gc.length / 2;
                        if (gcLen > arrayOfThings.length) {
                            for (var i = 0; i < gcLen; i++) {
                                delete data[gc[i]];
                            }
                            gc.splice(0, gcLen);
                        }
                        return longest;
                    };
                    helpers.measureText = function (ctx, data, gc, longest, string) {
                        var textWidth = data[string];
                        if (!textWidth) {
                            textWidth = data[string] = ctx.measureText(string).width;
                            gc.push(string);
                        }
                        if (textWidth > longest) {
                            longest = textWidth;
                        }
                        return longest;
                    };
                    helpers.numberOfLabelLines = function (arrayOfThings) {
                        var numberOfLines = 1;
                        helpers.each(arrayOfThings, function (thing) {
                            if (helpers.isArray(thing)) {
                                if (thing.length > numberOfLines) {
                                    numberOfLines = thing.length;
                                }
                            }
                        });
                        return numberOfLines;
                    };
                    helpers.color = !color ?
                        function (value) {
                            console.error('Color.js not found!');
                            return value;
                        } :
                        function (value) {
                            /* global CanvasGradient */
                            if (value instanceof CanvasGradient) {
                                value = defaults.global.defaultColor;
                            }
                            return color(value);
                        };
                    helpers.getHoverColor = function (colorValue) {
                        /* global CanvasPattern */
                        return (colorValue instanceof CanvasPattern) ?
                            colorValue :
                            helpers.color(colorValue).saturate(0.5).darken(0.1).rgbString();
                    };
                };
            }, { "25": 25, "3": 3, "45": 45 }], 28: [function (require, module, exports) {
                'use strict';
                var helpers = require(45);
                /**
                 * Helper function to get relative position for an event
                 * @param {Event|IEvent} event - The event to get the position for
                 * @param {Chart} chart - The chart
                 * @returns {Point} the event position
                 */
                function getRelativePosition(e, chart) {
                    if (e.native) {
                        return {
                            x: e.x,
                            y: e.y
                        };
                    }
                    return helpers.getRelativePosition(e, chart);
                }
                /**
                 * Helper function to traverse all of the visible elements in the chart
                 * @param chart {chart} the chart
                 * @param handler {Function} the callback to execute for each visible item
                 */
                function parseVisibleItems(chart, handler) {
                    var datasets = chart.data.datasets;
                    var meta, i, j, ilen, jlen;
                    for (i = 0, ilen = datasets.length; i < ilen; ++i) {
                        if (!chart.isDatasetVisible(i)) {
                            continue;
                        }
                        meta = chart.getDatasetMeta(i);
                        for (j = 0, jlen = meta.data.length; j < jlen; ++j) {
                            var element = meta.data[j];
                            if (!element._view.skip) {
                                handler(element);
                            }
                        }
                    }
                }
                /**
                 * Helper function to get the items that intersect the event position
                 * @param items {ChartElement[]} elements to filter
                 * @param position {Point} the point to be nearest to
                 * @return {ChartElement[]} the nearest items
                 */
                function getIntersectItems(chart, position) {
                    var elements = [];
                    parseVisibleItems(chart, function (element) {
                        if (element.inRange(position.x, position.y)) {
                            elements.push(element);
                        }
                    });
                    return elements;
                }
                /**
                 * Helper function to get the items nearest to the event position considering all visible items in teh chart
                 * @param chart {Chart} the chart to look at elements from
                 * @param position {Point} the point to be nearest to
                 * @param intersect {Boolean} if true, only consider items that intersect the position
                 * @param distanceMetric {Function} function to provide the distance between points
                 * @return {ChartElement[]} the nearest items
                 */
                function getNearestItems(chart, position, intersect, distanceMetric) {
                    var minDistance = Number.POSITIVE_INFINITY;
                    var nearestItems = [];
                    parseVisibleItems(chart, function (element) {
                        if (intersect && !element.inRange(position.x, position.y)) {
                            return;
                        }
                        var center = element.getCenterPoint();
                        var distance = distanceMetric(position, center);
                        if (distance < minDistance) {
                            nearestItems = [element];
                            minDistance = distance;
                        }
                        else if (distance === minDistance) {
                            // Can have multiple items at the same distance in which case we sort by size
                            nearestItems.push(element);
                        }
                    });
                    return nearestItems;
                }
                /**
                 * Get a distance metric function for two points based on the
                 * axis mode setting
                 * @param {String} axis the axis mode. x|y|xy
                 */
                function getDistanceMetricForAxis(axis) {
                    var useX = axis.indexOf('x') !== -1;
                    var useY = axis.indexOf('y') !== -1;
                    return function (pt1, pt2) {
                        var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
                        var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
                        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
                    };
                }
                function indexMode(chart, e, options) {
                    var position = getRelativePosition(e, chart);
                    // Default axis for index mode is 'x' to match old behaviour
                    options.axis = options.axis || 'x';
                    var distanceMetric = getDistanceMetricForAxis(options.axis);
                    var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
                    var elements = [];
                    if (!items.length) {
                        return [];
                    }
                    chart.data.datasets.forEach(function (dataset, datasetIndex) {
                        if (chart.isDatasetVisible(datasetIndex)) {
                            var meta = chart.getDatasetMeta(datasetIndex);
                            var element = meta.data[items[0]._index];
                            // don't count items that are skipped (null data)
                            if (element && !element._view.skip) {
                                elements.push(element);
                            }
                        }
                    });
                    return elements;
                }
                /**
                 * @interface IInteractionOptions
                 */
                /**
                 * If true, only consider items that intersect the point
                 * @name IInterfaceOptions#boolean
                 * @type Boolean
                 */
                /**
                 * Contains interaction related functions
                 * @namespace Chart.Interaction
                 */
                module.exports = {
                    // Helper function for different modes
                    modes: {
                        single: function (chart, e) {
                            var position = getRelativePosition(e, chart);
                            var elements = [];
                            parseVisibleItems(chart, function (element) {
                                if (element.inRange(position.x, position.y)) {
                                    elements.push(element);
                                    return elements;
                                }
                            });
                            return elements.slice(0, 1);
                        },
                        /**
                         * @function Chart.Interaction.modes.label
                         * @deprecated since version 2.4.0
                         * @todo remove at version 3
                         * @private
                         */
                        label: indexMode,
                        /**
                         * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something
                         * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item
                         * @function Chart.Interaction.modes.index
                         * @since v2.4.0
                         * @param chart {chart} the chart we are returning items from
                         * @param e {Event} the event we are find things at
                         * @param options {IInteractionOptions} options to use during interaction
                         * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
                         */
                        index: indexMode,
                        /**
                         * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something
                         * If the options.intersect is false, we find the nearest item and return the items in that dataset
                         * @function Chart.Interaction.modes.dataset
                         * @param chart {chart} the chart we are returning items from
                         * @param e {Event} the event we are find things at
                         * @param options {IInteractionOptions} options to use during interaction
                         * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
                         */
                        dataset: function (chart, e, options) {
                            var position = getRelativePosition(e, chart);
                            options.axis = options.axis || 'xy';
                            var distanceMetric = getDistanceMetricForAxis(options.axis);
                            var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
                            if (items.length > 0) {
                                items = chart.getDatasetMeta(items[0]._datasetIndex).data;
                            }
                            return items;
                        },
                        /**
                         * @function Chart.Interaction.modes.x-axis
                         * @deprecated since version 2.4.0. Use index mode and intersect == true
                         * @todo remove at version 3
                         * @private
                         */
                        'x-axis': function (chart, e) {
                            return indexMode(chart, e, { intersect: false });
                        },
                        /**
                         * Point mode returns all elements that hit test based on the event position
                         * of the event
                         * @function Chart.Interaction.modes.intersect
                         * @param chart {chart} the chart we are returning items from
                         * @param e {Event} the event we are find things at
                         * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
                         */
                        point: function (chart, e) {
                            var position = getRelativePosition(e, chart);
                            return getIntersectItems(chart, position);
                        },
                        /**
                         * nearest mode returns the element closest to the point
                         * @function Chart.Interaction.modes.intersect
                         * @param chart {chart} the chart we are returning items from
                         * @param e {Event} the event we are find things at
                         * @param options {IInteractionOptions} options to use
                         * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
                         */
                        nearest: function (chart, e, options) {
                            var position = getRelativePosition(e, chart);
                            options.axis = options.axis || 'xy';
                            var distanceMetric = getDistanceMetricForAxis(options.axis);
                            var nearestItems = getNearestItems(chart, position, options.intersect, distanceMetric);
                            // We have multiple items at the same distance from the event. Now sort by smallest
                            if (nearestItems.length > 1) {
                                nearestItems.sort(function (a, b) {
                                    var sizeA = a.getArea();
                                    var sizeB = b.getArea();
                                    var ret = sizeA - sizeB;
                                    if (ret === 0) {
                                        // if equal sort by dataset index
                                        ret = a._datasetIndex - b._datasetIndex;
                                    }
                                    return ret;
                                });
                            }
                            // Return only 1 item
                            return nearestItems.slice(0, 1);
                        },
                        /**
                         * x mode returns the elements that hit-test at the current x coordinate
                         * @function Chart.Interaction.modes.x
                         * @param chart {chart} the chart we are returning items from
                         * @param e {Event} the event we are find things at
                         * @param options {IInteractionOptions} options to use
                         * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
                         */
                        x: function (chart, e, options) {
                            var position = getRelativePosition(e, chart);
                            var items = [];
                            var intersectsItem = false;
                            parseVisibleItems(chart, function (element) {
                                if (element.inXRange(position.x)) {
                                    items.push(element);
                                }
                                if (element.inRange(position.x, position.y)) {
                                    intersectsItem = true;
                                }
                            });
                            // If we want to trigger on an intersect and we don't have any items
                            // that intersect the position, return nothing
                            if (options.intersect && !intersectsItem) {
                                items = [];
                            }
                            return items;
                        },
                        /**
                         * y mode returns the elements that hit-test at the current y coordinate
                         * @function Chart.Interaction.modes.y
                         * @param chart {chart} the chart we are returning items from
                         * @param e {Event} the event we are find things at
                         * @param options {IInteractionOptions} options to use
                         * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
                         */
                        y: function (chart, e, options) {
                            var position = getRelativePosition(e, chart);
                            var items = [];
                            var intersectsItem = false;
                            parseVisibleItems(chart, function (element) {
                                if (element.inYRange(position.y)) {
                                    items.push(element);
                                }
                                if (element.inRange(position.x, position.y)) {
                                    intersectsItem = true;
                                }
                            });
                            // If we want to trigger on an intersect and we don't have any items
                            // that intersect the position, return nothing
                            if (options.intersect && !intersectsItem) {
                                items = [];
                            }
                            return items;
                        }
                    }
                };
            }, { "45": 45 }], 29: [function (require, module, exports) {
                'use strict';
                var defaults = require(25);
                defaults._set('global', {
                    responsive: true,
                    responsiveAnimationDuration: 0,
                    maintainAspectRatio: true,
                    events: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],
                    hover: {
                        onHover: null,
                        mode: 'nearest',
                        intersect: true,
                        animationDuration: 400
                    },
                    onClick: null,
                    defaultColor: 'rgba(0,0,0,0.1)',
                    defaultFontColor: '#666',
                    defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                    defaultFontSize: 12,
                    defaultFontStyle: 'normal',
                    showLines: true,
                    // Element defaults defined in element extensions
                    elements: {},
                    // Layout options such as padding
                    layout: {
                        padding: {
                            top: 0,
                            right: 0,
                            bottom: 0,
                            left: 0
                        }
                    }
                });
                module.exports = function () {
                    // Occupy the global variable of Chart, and create a simple base class
                    var Chart = function (item, config) {
                        this.construct(item, config);
                        return this;
                    };
                    Chart.Chart = Chart;
                    return Chart;
                };
            }, { "25": 25 }], 30: [function (require, module, exports) {
                'use strict';
                var helpers = require(45);
                function filterByPosition(array, position) {
                    return helpers.where(array, function (v) {
                        return v.position === position;
                    });
                }
                function sortByWeight(array, reverse) {
                    array.forEach(function (v, i) {
                        v._tmpIndex_ = i;
                        return v;
                    });
                    array.sort(function (a, b) {
                        var v0 = reverse ? b : a;
                        var v1 = reverse ? a : b;
                        return v0.weight === v1.weight ?
                            v0._tmpIndex_ - v1._tmpIndex_ :
                            v0.weight - v1.weight;
                    });
                    array.forEach(function (v) {
                        delete v._tmpIndex_;
                    });
                }
                /**
                 * @interface ILayoutItem
                 * @prop {String} position - The position of the item in the chart layout. Possible values are
                 * 'left', 'top', 'right', 'bottom', and 'chartArea'
                 * @prop {Number} weight - The weight used to sort the item. Higher weights are further away from the chart area
                 * @prop {Boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down
                 * @prop {Function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)
                 * @prop {Function} update - Takes two parameters: width and height. Returns size of item
                 * @prop {Function} getPadding -  Returns an object with padding on the edges
                 * @prop {Number} width - Width of item. Must be valid after update()
                 * @prop {Number} height - Height of item. Must be valid after update()
                 * @prop {Number} left - Left edge of the item. Set by layout system and cannot be used in update
                 * @prop {Number} top - Top edge of the item. Set by layout system and cannot be used in update
                 * @prop {Number} right - Right edge of the item. Set by layout system and cannot be used in update
                 * @prop {Number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update
                 */
                // The layout service is very self explanatory.  It's responsible for the layout within a chart.
                // Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need
                // It is this service's responsibility of carrying out that layout.
                module.exports = {
                    defaults: {},
                    /**
                     * Register a box to a chart.
                     * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.
                     * @param {Chart} chart - the chart to use
                     * @param {ILayoutItem} item - the item to add to be layed out
                     */
                    addBox: function (chart, item) {
                        if (!chart.boxes) {
                            chart.boxes = [];
                        }
                        // initialize item with default values
                        item.fullWidth = item.fullWidth || false;
                        item.position = item.position || 'top';
                        item.weight = item.weight || 0;
                        chart.boxes.push(item);
                    },
                    /**
                     * Remove a layoutItem from a chart
                     * @param {Chart} chart - the chart to remove the box from
                     * @param {Object} layoutItem - the item to remove from the layout
                     */
                    removeBox: function (chart, layoutItem) {
                        var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
                        if (index !== -1) {
                            chart.boxes.splice(index, 1);
                        }
                    },
                    /**
                     * Sets (or updates) options on the given `item`.
                     * @param {Chart} chart - the chart in which the item lives (or will be added to)
                     * @param {Object} item - the item to configure with the given options
                     * @param {Object} options - the new item options.
                     */
                    configure: function (chart, item, options) {
                        var props = ['fullWidth', 'position', 'weight'];
                        var ilen = props.length;
                        var i = 0;
                        var prop;
                        for (; i < ilen; ++i) {
                            prop = props[i];
                            if (options.hasOwnProperty(prop)) {
                                item[prop] = options[prop];
                            }
                        }
                    },
                    /**
                     * Fits boxes of the given chart into the given size by having each box measure itself
                     * then running a fitting algorithm
                     * @param {Chart} chart - the chart
                     * @param {Number} width - the width to fit into
                     * @param {Number} height - the height to fit into
                     */
                    update: function (chart, width, height) {
                        if (!chart) {
                            return;
                        }
                        var layoutOptions = chart.options.layout || {};
                        var padding = helpers.options.toPadding(layoutOptions.padding);
                        var leftPadding = padding.left;
                        var rightPadding = padding.right;
                        var topPadding = padding.top;
                        var bottomPadding = padding.bottom;
                        var leftBoxes = filterByPosition(chart.boxes, 'left');
                        var rightBoxes = filterByPosition(chart.boxes, 'right');
                        var topBoxes = filterByPosition(chart.boxes, 'top');
                        var bottomBoxes = filterByPosition(chart.boxes, 'bottom');
                        var chartAreaBoxes = filterByPosition(chart.boxes, 'chartArea');
                        // Sort boxes by weight. A higher weight is further away from the chart area
                        sortByWeight(leftBoxes, true);
                        sortByWeight(rightBoxes, false);
                        sortByWeight(topBoxes, true);
                        sortByWeight(bottomBoxes, false);
                        // Essentially we now have any number of boxes on each of the 4 sides.
                        // Our canvas looks like the following.
                        // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and
                        // B1 is the bottom axis
                        // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays
                        // These locations are single-box locations only, when trying to register a chartArea location that is already taken,
                        // an error will be thrown.
                        //
                        // |----------------------------------------------------|
                        // |                  T1 (Full Width)                   |
                        // |----------------------------------------------------|
                        // |    |    |                 T2                  |    |
                        // |    |----|-------------------------------------|----|
                        // |    |    | C1 |                           | C2 |    |
                        // |    |    |----|                           |----|    |
                        // |    |    |                                     |    |
                        // | L1 | L2 |           ChartArea (C0)            | R1 |
                        // |    |    |                                     |    |
                        // |    |    |----|                           |----|    |
                        // |    |    | C3 |                           | C4 |    |
                        // |    |----|-------------------------------------|----|
                        // |    |    |                 B1                  |    |
                        // |----------------------------------------------------|
                        // |                  B2 (Full Width)                   |
                        // |----------------------------------------------------|
                        //
                        // What we do to find the best sizing, we do the following
                        // 1. Determine the minimum size of the chart area.
                        // 2. Split the remaining width equally between each vertical axis
                        // 3. Split the remaining height equally between each horizontal axis
                        // 4. Give each layout the maximum size it can be. The layout will return it's minimum size
                        // 5. Adjust the sizes of each axis based on it's minimum reported size.
                        // 6. Refit each axis
                        // 7. Position each axis in the final location
                        // 8. Tell the chart the final location of the chart area
                        // 9. Tell any axes that overlay the chart area the positions of the chart area
                        // Step 1
                        var chartWidth = width - leftPadding - rightPadding;
                        var chartHeight = height - topPadding - bottomPadding;
                        var chartAreaWidth = chartWidth / 2; // min 50%
                        var chartAreaHeight = chartHeight / 2; // min 50%
                        // Step 2
                        var verticalBoxWidth = (width - chartAreaWidth) / (leftBoxes.length + rightBoxes.length);
                        // Step 3
                        var horizontalBoxHeight = (height - chartAreaHeight) / (topBoxes.length + bottomBoxes.length);
                        // Step 4
                        var maxChartAreaWidth = chartWidth;
                        var maxChartAreaHeight = chartHeight;
                        var minBoxSizes = [];
                        function getMinimumBoxSize(box) {
                            var minSize;
                            var isHorizontal = box.isHorizontal();
                            if (isHorizontal) {
                                minSize = box.update(box.fullWidth ? chartWidth : maxChartAreaWidth, horizontalBoxHeight);
                                maxChartAreaHeight -= minSize.height;
                            }
                            else {
                                minSize = box.update(verticalBoxWidth, maxChartAreaHeight);
                                maxChartAreaWidth -= minSize.width;
                            }
                            minBoxSizes.push({
                                horizontal: isHorizontal,
                                minSize: minSize,
                                box: box,
                            });
                        }
                        helpers.each(leftBoxes.concat(rightBoxes, topBoxes, bottomBoxes), getMinimumBoxSize);
                        // If a horizontal box has padding, we move the left boxes over to avoid ugly charts (see issue #2478)
                        var maxHorizontalLeftPadding = 0;
                        var maxHorizontalRightPadding = 0;
                        var maxVerticalTopPadding = 0;
                        var maxVerticalBottomPadding = 0;
                        helpers.each(topBoxes.concat(bottomBoxes), function (horizontalBox) {
                            if (horizontalBox.getPadding) {
                                var boxPadding = horizontalBox.getPadding();
                                maxHorizontalLeftPadding = Math.max(maxHorizontalLeftPadding, boxPadding.left);
                                maxHorizontalRightPadding = Math.max(maxHorizontalRightPadding, boxPadding.right);
                            }
                        });
                        helpers.each(leftBoxes.concat(rightBoxes), function (verticalBox) {
                            if (verticalBox.getPadding) {
                                var boxPadding = verticalBox.getPadding();
                                maxVerticalTopPadding = Math.max(maxVerticalTopPadding, boxPadding.top);
                                maxVerticalBottomPadding = Math.max(maxVerticalBottomPadding, boxPadding.bottom);
                            }
                        });
                        // At this point, maxChartAreaHeight and maxChartAreaWidth are the size the chart area could
                        // be if the axes are drawn at their minimum sizes.
                        // Steps 5 & 6
                        var totalLeftBoxesWidth = leftPadding;
                        var totalRightBoxesWidth = rightPadding;
                        var totalTopBoxesHeight = topPadding;
                        var totalBottomBoxesHeight = bottomPadding;
                        // Function to fit a box
                        function fitBox(box) {
                            var minBoxSize = helpers.findNextWhere(minBoxSizes, function (minBox) {
                                return minBox.box === box;
                            });
                            if (minBoxSize) {
                                if (box.isHorizontal()) {
                                    var scaleMargin = {
                                        left: Math.max(totalLeftBoxesWidth, maxHorizontalLeftPadding),
                                        right: Math.max(totalRightBoxesWidth, maxHorizontalRightPadding),
                                        top: 0,
                                        bottom: 0
                                    };
                                    // Don't use min size here because of label rotation. When the labels are rotated, their rotation highly depends
                                    // on the margin. Sometimes they need to increase in size slightly
                                    box.update(box.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);
                                }
                                else {
                                    box.update(minBoxSize.minSize.width, maxChartAreaHeight);
                                }
                            }
                        }
                        // Update, and calculate the left and right margins for the horizontal boxes
                        helpers.each(leftBoxes.concat(rightBoxes), fitBox);
                        helpers.each(leftBoxes, function (box) {
                            totalLeftBoxesWidth += box.width;
                        });
                        helpers.each(rightBoxes, function (box) {
                            totalRightBoxesWidth += box.width;
                        });
                        // Set the Left and Right margins for the horizontal boxes
                        helpers.each(topBoxes.concat(bottomBoxes), fitBox);
                        // Figure out how much margin is on the top and bottom of the vertical boxes
                        helpers.each(topBoxes, function (box) {
                            totalTopBoxesHeight += box.height;
                        });
                        helpers.each(bottomBoxes, function (box) {
                            totalBottomBoxesHeight += box.height;
                        });
                        function finalFitVerticalBox(box) {
                            var minBoxSize = helpers.findNextWhere(minBoxSizes, function (minSize) {
                                return minSize.box === box;
                            });
                            var scaleMargin = {
                                left: 0,
                                right: 0,
                                top: totalTopBoxesHeight,
                                bottom: totalBottomBoxesHeight
                            };
                            if (minBoxSize) {
                                box.update(minBoxSize.minSize.width, maxChartAreaHeight, scaleMargin);
                            }
                        }
                        // Let the left layout know the final margin
                        helpers.each(leftBoxes.concat(rightBoxes), finalFitVerticalBox);
                        // Recalculate because the size of each layout might have changed slightly due to the margins (label rotation for instance)
                        totalLeftBoxesWidth = leftPadding;
                        totalRightBoxesWidth = rightPadding;
                        totalTopBoxesHeight = topPadding;
                        totalBottomBoxesHeight = bottomPadding;
                        helpers.each(leftBoxes, function (box) {
                            totalLeftBoxesWidth += box.width;
                        });
                        helpers.each(rightBoxes, function (box) {
                            totalRightBoxesWidth += box.width;
                        });
                        helpers.each(topBoxes, function (box) {
                            totalTopBoxesHeight += box.height;
                        });
                        helpers.each(bottomBoxes, function (box) {
                            totalBottomBoxesHeight += box.height;
                        });
                        // We may be adding some padding to account for rotated x axis labels
                        var leftPaddingAddition = Math.max(maxHorizontalLeftPadding - totalLeftBoxesWidth, 0);
                        totalLeftBoxesWidth += leftPaddingAddition;
                        totalRightBoxesWidth += Math.max(maxHorizontalRightPadding - totalRightBoxesWidth, 0);
                        var topPaddingAddition = Math.max(maxVerticalTopPadding - totalTopBoxesHeight, 0);
                        totalTopBoxesHeight += topPaddingAddition;
                        totalBottomBoxesHeight += Math.max(maxVerticalBottomPadding - totalBottomBoxesHeight, 0);
                        // Figure out if our chart area changed. This would occur if the dataset layout label rotation
                        // changed due to the application of the margins in step 6. Since we can only get bigger, this is safe to do
                        // without calling `fit` again
                        var newMaxChartAreaHeight = height - totalTopBoxesHeight - totalBottomBoxesHeight;
                        var newMaxChartAreaWidth = width - totalLeftBoxesWidth - totalRightBoxesWidth;
                        if (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {
                            helpers.each(leftBoxes, function (box) {
                                box.height = newMaxChartAreaHeight;
                            });
                            helpers.each(rightBoxes, function (box) {
                                box.height = newMaxChartAreaHeight;
                            });
                            helpers.each(topBoxes, function (box) {
                                if (!box.fullWidth) {
                                    box.width = newMaxChartAreaWidth;
                                }
                            });
                            helpers.each(bottomBoxes, function (box) {
                                if (!box.fullWidth) {
                                    box.width = newMaxChartAreaWidth;
                                }
                            });
                            maxChartAreaHeight = newMaxChartAreaHeight;
                            maxChartAreaWidth = newMaxChartAreaWidth;
                        }
                        // Step 7 - Position the boxes
                        var left = leftPadding + leftPaddingAddition;
                        var top = topPadding + topPaddingAddition;
                        function placeBox(box) {
                            if (box.isHorizontal()) {
                                box.left = box.fullWidth ? leftPadding : totalLeftBoxesWidth;
                                box.right = box.fullWidth ? width - rightPadding : totalLeftBoxesWidth + maxChartAreaWidth;
                                box.top = top;
                                box.bottom = top + box.height;
                                // Move to next point
                                top = box.bottom;
                            }
                            else {
                                box.left = left;
                                box.right = left + box.width;
                                box.top = totalTopBoxesHeight;
                                box.bottom = totalTopBoxesHeight + maxChartAreaHeight;
                                // Move to next point
                                left = box.right;
                            }
                        }
                        helpers.each(leftBoxes.concat(topBoxes), placeBox);
                        // Account for chart width and height
                        left += maxChartAreaWidth;
                        top += maxChartAreaHeight;
                        helpers.each(rightBoxes, placeBox);
                        helpers.each(bottomBoxes, placeBox);
                        // Step 8
                        chart.chartArea = {
                            left: totalLeftBoxesWidth,
                            top: totalTopBoxesHeight,
                            right: totalLeftBoxesWidth + maxChartAreaWidth,
                            bottom: totalTopBoxesHeight + maxChartAreaHeight
                        };
                        // Step 9
                        helpers.each(chartAreaBoxes, function (box) {
                            box.left = chart.chartArea.left;
                            box.top = chart.chartArea.top;
                            box.right = chart.chartArea.right;
                            box.bottom = chart.chartArea.bottom;
                            box.update(maxChartAreaWidth, maxChartAreaHeight);
                        });
                    }
                };
            }, { "45": 45 }], 31: [function (require, module, exports) {
                'use strict';
                var defaults = require(25);
                var helpers = require(45);
                defaults._set('global', {
                    plugins: {}
                });
                /**
                 * The plugin service singleton
                 * @namespace Chart.plugins
                 * @since 2.1.0
                 */
                module.exports = {
                    /**
                     * Globally registered plugins.
                     * @private
                     */
                    _plugins: [],
                    /**
                     * This identifier is used to invalidate the descriptors cache attached to each chart
                     * when a global plugin is registered or unregistered. In this case, the cache ID is
                     * incremented and descriptors are regenerated during following API calls.
                     * @private
                     */
                    _cacheId: 0,
                    /**
                     * Registers the given plugin(s) if not already registered.
                     * @param {Array|Object} plugins plugin instance(s).
                     */
                    register: function (plugins) {
                        var p = this._plugins;
                        ([]).concat(plugins).forEach(function (plugin) {
                            if (p.indexOf(plugin) === -1) {
                                p.push(plugin);
                            }
                        });
                        this._cacheId++;
                    },
                    /**
                     * Unregisters the given plugin(s) only if registered.
                     * @param {Array|Object} plugins plugin instance(s).
                     */
                    unregister: function (plugins) {
                        var p = this._plugins;
                        ([]).concat(plugins).forEach(function (plugin) {
                            var idx = p.indexOf(plugin);
                            if (idx !== -1) {
                                p.splice(idx, 1);
                            }
                        });
                        this._cacheId++;
                    },
                    /**
                     * Remove all registered plugins.
                     * @since 2.1.5
                     */
                    clear: function () {
                        this._plugins = [];
                        this._cacheId++;
                    },
                    /**
                     * Returns the number of registered plugins?
                     * @returns {Number}
                     * @since 2.1.5
                     */
                    count: function () {
                        return this._plugins.length;
                    },
                    /**
                     * Returns all registered plugin instances.
                     * @returns {Array} array of plugin objects.
                     * @since 2.1.5
                     */
                    getAll: function () {
                        return this._plugins;
                    },
                    /**
                     * Calls enabled plugins for `chart` on the specified hook and with the given args.
                     * This method immediately returns as soon as a plugin explicitly returns false. The
                     * returned value can be used, for instance, to interrupt the current action.
                     * @param {Object} chart - The chart instance for which plugins should be called.
                     * @param {String} hook - The name of the plugin method to call (e.g. 'beforeUpdate').
                     * @param {Array} [args] - Extra arguments to apply to the hook call.
                     * @returns {Boolean} false if any of the plugins return false, else returns true.
                     */
                    notify: function (chart, hook, args) {
                        var descriptors = this.descriptors(chart);
                        var ilen = descriptors.length;
                        var i, descriptor, plugin, params, method;
                        for (i = 0; i < ilen; ++i) {
                            descriptor = descriptors[i];
                            plugin = descriptor.plugin;
                            method = plugin[hook];
                            if (typeof method === 'function') {
                                params = [chart].concat(args || []);
                                params.push(descriptor.options);
                                if (method.apply(plugin, params) === false) {
                                    return false;
                                }
                            }
                        }
                        return true;
                    },
                    /**
                     * Returns descriptors of enabled plugins for the given chart.
                     * @returns {Array} [{ plugin, options }]
                     * @private
                     */
                    descriptors: function (chart) {
                        var cache = chart.$plugins || (chart.$plugins = {});
                        if (cache.id === this._cacheId) {
                            return cache.descriptors;
                        }
                        var plugins = [];
                        var descriptors = [];
                        var config = (chart && chart.config) || {};
                        var options = (config.options && config.options.plugins) || {};
                        this._plugins.concat(config.plugins || []).forEach(function (plugin) {
                            var idx = plugins.indexOf(plugin);
                            if (idx !== -1) {
                                return;
                            }
                            var id = plugin.id;
                            var opts = options[id];
                            if (opts === false) {
                                return;
                            }
                            if (opts === true) {
                                opts = helpers.clone(defaults.global.plugins[id]);
                            }
                            plugins.push(plugin);
                            descriptors.push({
                                plugin: plugin,
                                options: opts || {}
                            });
                        });
                        cache.descriptors = descriptors;
                        cache.id = this._cacheId;
                        return descriptors;
                    },
                    /**
                     * Invalidates cache for the given chart: descriptors hold a reference on plugin option,
                     * but in some cases, this reference can be changed by the user when updating options.
                     * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
                     * @private
                     */
                    _invalidate: function (chart) {
                        delete chart.$plugins;
                    }
                };
                /**
                 * Plugin extension hooks.
                 * @interface IPlugin
                 * @since 2.1.0
                 */
                /**
                 * @method IPlugin#beforeInit
                 * @desc Called before initializing `chart`.
                 * @param {Chart.Controller} chart - The chart instance.
                 * @param {Object} options - The plugin options.
                 */
                /**
                 * @method IPlugin#afterInit
                 * @desc Called after `chart` has been initialized and before the first update.
                 * @param {Chart.Controller} chart - The chart instance.
                 * @param {Object} options - The plugin options.
                 */
                /**
                 * @method IPlugin#beforeUpdate
                 * @desc Called before updating `chart`. If any plugin returns `false`, the update
                 * is cancelled (and thus subsequent render(s)) until another `update` is triggered.
                 * @param {Chart.Controller} chart - The chart instance.
                 * @param {Object} options - The plugin options.
                 * @returns {Boolean} `false` to cancel the chart update.
                 */
                /**
                 * @method IPlugin#afterUpdate
                 * @desc Called after `chart` has been updated and before rendering. Note that this
                 * hook will not be called if the chart update has been previously cancelled.
                 * @param {Chart.Controller} chart - The chart instance.
                 * @param {Object} options - The plugin options.
                 */
                /**
                 * @method IPlugin#beforeDatasetsUpdate
                 * @desc Called before updating the `chart` datasets. If any plugin returns `false`,
                 * the datasets update is cancelled until another `update` is triggered.
                 * @param {Chart.Controller} chart - The chart instance.
                 * @param {Object} options - The plugin options.
                 * @returns {Boolean} false to cancel the datasets update.
                 * @since version 2.1.5
                */
                /**
                 * @method IPlugin#afterDatasetsUpdate
                 * @desc Called after the `chart` datasets have been updated. Note that this hook
                 * will not be called if the datasets update has been previously cancelled.
                 * @param {Chart.Controller} chart - The chart instance.
                 * @param {Object} options - The plugin options.
                 * @since version 2.1.5
                 */
                /**
                 * @method IPlugin#beforeDatasetUpdate
                 * @desc Called before updating the `chart` dataset at the given `args.index`. If any plugin
                 * returns `false`, the datasets update is cancelled until another `update` is triggered.
                 * @param {Chart} chart - The chart instance.
                 * @param {Object} args - The call arguments.
                 * @param {Number} args.index - The dataset index.
                 * @param {Object} args.meta - The dataset metadata.
                 * @param {Object} options - The plugin options.
                 * @returns {Boolean} `false` to cancel the chart datasets drawing.
                 */
                /**
                 * @method IPlugin#afterDatasetUpdate
                 * @desc Called after the `chart` datasets at the given `args.index` has been updated. Note
                 * that this hook will not be called if the datasets update has been previously cancelled.
                 * @param {Chart} chart - The chart instance.
                 * @param {Object} args - The call arguments.
                 * @param {Number} args.index - The dataset index.
                 * @param {Object} args.meta - The dataset metadata.
                 * @param {Object} options - The plugin options.
                 */
                /**
                 * @method IPlugin#beforeLayout
                 * @desc Called before laying out `chart`. If any plugin returns `false`,
                 * the layout update is cancelled until another `update` is triggered.
                 * @param {Chart.Controller} chart - The chart instance.
                 * @param {Object} options - The plugin options.
                 * @returns {Boolean} `false` to cancel the chart layout.
                 */
                /**
                 * @method IPlugin#afterLayout
                 * @desc Called after the `chart` has been layed out. Note that this hook will not
                 * be called if the layout update has been previously cancelled.
                 * @param {Chart.Controller} chart - The chart instance.
                 * @param {Object} options - The plugin options.
                 */
                /**
                 * @method IPlugin#beforeRender
                 * @desc Called before rendering `chart`. If any plugin returns `false`,
                 * the rendering is cancelled until another `render` is triggered.
                 * @param {Chart.Controller} chart - The chart instance.
                 * @param {Object} options - The plugin options.
                 * @returns {Boolean} `false` to cancel the chart rendering.
                 */
                /**
                 * @method IPlugin#afterRender
                 * @desc Called after the `chart` has been fully rendered (and animation completed). Note
                 * that this hook will not be called if the rendering has been previously cancelled.
                 * @param {Chart.Controller} chart - The chart instance.
                 * @param {Object} options - The plugin options.
                 */
                /**
                 * @method IPlugin#beforeDraw
                 * @desc Called before drawing `chart` at every animation frame specified by the given
                 * easing value. If any plugin returns `false`, the frame drawing is cancelled until
                 * another `render` is triggered.
                 * @param {Chart.Controller} chart - The chart instance.
                 * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
                 * @param {Object} options - The plugin options.
                 * @returns {Boolean} `false` to cancel the chart drawing.
                 */
                /**
                 * @method IPlugin#afterDraw
                 * @desc Called after the `chart` has been drawn for the specific easing value. Note
                 * that this hook will not be called if the drawing has been previously cancelled.
                 * @param {Chart.Controller} chart - The chart instance.
                 * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
                 * @param {Object} options - The plugin options.
                 */
                /**
                 * @method IPlugin#beforeDatasetsDraw
                 * @desc Called before drawing the `chart` datasets. If any plugin returns `false`,
                 * the datasets drawing is cancelled until another `render` is triggered.
                 * @param {Chart.Controller} chart - The chart instance.
                 * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
                 * @param {Object} options - The plugin options.
                 * @returns {Boolean} `false` to cancel the chart datasets drawing.
                 */
                /**
                 * @method IPlugin#afterDatasetsDraw
                 * @desc Called after the `chart` datasets have been drawn. Note that this hook
                 * will not be called if the datasets drawing has been previously cancelled.
                 * @param {Chart.Controller} chart - The chart instance.
                 * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
                 * @param {Object} options - The plugin options.
                 */
                /**
                 * @method IPlugin#beforeDatasetDraw
                 * @desc Called before drawing the `chart` dataset at the given `args.index` (datasets
                 * are drawn in the reverse order). If any plugin returns `false`, the datasets drawing
                 * is cancelled until another `render` is triggered.
                 * @param {Chart} chart - The chart instance.
                 * @param {Object} args - The call arguments.
                 * @param {Number} args.index - The dataset index.
                 * @param {Object} args.meta - The dataset metadata.
                 * @param {Number} args.easingValue - The current animation value, between 0.0 and 1.0.
                 * @param {Object} options - The plugin options.
                 * @returns {Boolean} `false` to cancel the chart datasets drawing.
                 */
                /**
                 * @method IPlugin#afterDatasetDraw
                 * @desc Called after the `chart` datasets at the given `args.index` have been drawn
                 * (datasets are drawn in the reverse order). Note that this hook will not be called
                 * if the datasets drawing has been previously cancelled.
                 * @param {Chart} chart - The chart instance.
                 * @param {Object} args - The call arguments.
                 * @param {Number} args.index - The dataset index.
                 * @param {Object} args.meta - The dataset metadata.
                 * @param {Number} args.easingValue - The current animation value, between 0.0 and 1.0.
                 * @param {Object} options - The plugin options.
                 */
                /**
                 * @method IPlugin#beforeTooltipDraw
                 * @desc Called before drawing the `tooltip`. If any plugin returns `false`,
                 * the tooltip drawing is cancelled until another `render` is triggered.
                 * @param {Chart} chart - The chart instance.
                 * @param {Object} args - The call arguments.
                 * @param {Object} args.tooltip - The tooltip.
                 * @param {Number} args.easingValue - The current animation value, between 0.0 and 1.0.
                 * @param {Object} options - The plugin options.
                 * @returns {Boolean} `false` to cancel the chart tooltip drawing.
                 */
                /**
                 * @method IPlugin#afterTooltipDraw
                 * @desc Called after drawing the `tooltip`. Note that this hook will not
                 * be called if the tooltip drawing has been previously cancelled.
                 * @param {Chart} chart - The chart instance.
                 * @param {Object} args - The call arguments.
                 * @param {Object} args.tooltip - The tooltip.
                 * @param {Number} args.easingValue - The current animation value, between 0.0 and 1.0.
                 * @param {Object} options - The plugin options.
                 */
                /**
                 * @method IPlugin#beforeEvent
                 * @desc Called before processing the specified `event`. If any plugin returns `false`,
                 * the event will be discarded.
                 * @param {Chart.Controller} chart - The chart instance.
                 * @param {IEvent} event - The event object.
                 * @param {Object} options - The plugin options.
                 */
                /**
                 * @method IPlugin#afterEvent
                 * @desc Called after the `event` has been consumed. Note that this hook
                 * will not be called if the `event` has been previously discarded.
                 * @param {Chart.Controller} chart - The chart instance.
                 * @param {IEvent} event - The event object.
                 * @param {Object} options - The plugin options.
                 */
                /**
                 * @method IPlugin#resize
                 * @desc Called after the chart as been resized.
                 * @param {Chart.Controller} chart - The chart instance.
                 * @param {Number} size - The new canvas display size (eq. canvas.style width & height).
                 * @param {Object} options - The plugin options.
                 */
                /**
                 * @method IPlugin#destroy
                 * @desc Called after the chart as been destroyed.
                 * @param {Chart.Controller} chart - The chart instance.
                 * @param {Object} options - The plugin options.
                 */
            }, { "25": 25, "45": 45 }], 32: [function (require, module, exports) {
                'use strict';
                var defaults = require(25);
                var Element = require(26);
                var helpers = require(45);
                var Ticks = require(34);
                defaults._set('scale', {
                    display: true,
                    position: 'left',
                    offset: false,
                    // grid line settings
                    gridLines: {
                        display: true,
                        color: 'rgba(0, 0, 0, 0.1)',
                        lineWidth: 1,
                        drawBorder: true,
                        drawOnChartArea: true,
                        drawTicks: true,
                        tickMarkLength: 10,
                        zeroLineWidth: 1,
                        zeroLineColor: 'rgba(0,0,0,0.25)',
                        zeroLineBorderDash: [],
                        zeroLineBorderDashOffset: 0.0,
                        offsetGridLines: false,
                        borderDash: [],
                        borderDashOffset: 0.0
                    },
                    // scale label
                    scaleLabel: {
                        // display property
                        display: false,
                        // actual label
                        labelString: '',
                        // line height
                        lineHeight: 1.2,
                        // top/bottom padding
                        padding: {
                            top: 4,
                            bottom: 4
                        }
                    },
                    // label settings
                    ticks: {
                        beginAtZero: false,
                        minRotation: 0,
                        maxRotation: 50,
                        mirror: false,
                        padding: 0,
                        reverse: false,
                        display: true,
                        autoSkip: true,
                        autoSkipPadding: 0,
                        labelOffset: 0,
                        // We pass through arrays to be rendered as multiline labels, we convert Others to strings here.
                        callback: Ticks.formatters.values,
                        minor: {},
                        major: {}
                    }
                });
                function labelsFromTicks(ticks) {
                    var labels = [];
                    var i, ilen;
                    for (i = 0, ilen = ticks.length; i < ilen; ++i) {
                        labels.push(ticks[i].label);
                    }
                    return labels;
                }
                function getLineValue(scale, index, offsetGridLines) {
                    var lineValue = scale.getPixelForTick(index);
                    if (offsetGridLines) {
                        if (index === 0) {
                            lineValue -= (scale.getPixelForTick(1) - lineValue) / 2;
                        }
                        else {
                            lineValue -= (lineValue - scale.getPixelForTick(index - 1)) / 2;
                        }
                    }
                    return lineValue;
                }
                module.exports = function (Chart) {
                    function computeTextSize(context, tick, font) {
                        return helpers.isArray(tick) ?
                            helpers.longestText(context, font, tick) :
                            context.measureText(tick).width;
                    }
                    function parseFontOptions(options) {
                        var valueOrDefault = helpers.valueOrDefault;
                        var globalDefaults = defaults.global;
                        var size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);
                        var style = valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle);
                        var family = valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily);
                        return {
                            size: size,
                            style: style,
                            family: family,
                            font: helpers.fontString(size, style, family)
                        };
                    }
                    function parseLineHeight(options) {
                        return helpers.options.toLineHeight(helpers.valueOrDefault(options.lineHeight, 1.2), helpers.valueOrDefault(options.fontSize, defaults.global.defaultFontSize));
                    }
                    Chart.Scale = Element.extend({
                        /**
                         * Get the padding needed for the scale
                         * @method getPadding
                         * @private
                         * @returns {Padding} the necessary padding
                         */
                        getPadding: function () {
                            var me = this;
                            return {
                                left: me.paddingLeft || 0,
                                top: me.paddingTop || 0,
                                right: me.paddingRight || 0,
                                bottom: me.paddingBottom || 0
                            };
                        },
                        /**
                         * Returns the scale tick objects ({label, major})
                         * @since 2.7
                         */
                        getTicks: function () {
                            return this._ticks;
                        },
                        // These methods are ordered by lifecyle. Utilities then follow.
                        // Any function defined here is inherited by all scale types.
                        // Any function can be extended by the scale type
                        mergeTicksOptions: function () {
                            var ticks = this.options.ticks;
                            if (ticks.minor === false) {
                                ticks.minor = {
                                    display: false
                                };
                            }
                            if (ticks.major === false) {
                                ticks.major = {
                                    display: false
                                };
                            }
                            for (var key in ticks) {
                                if (key !== 'major' && key !== 'minor') {
                                    if (typeof ticks.minor[key] === 'undefined') {
                                        ticks.minor[key] = ticks[key];
                                    }
                                    if (typeof ticks.major[key] === 'undefined') {
                                        ticks.major[key] = ticks[key];
                                    }
                                }
                            }
                        },
                        beforeUpdate: function () {
                            helpers.callback(this.options.beforeUpdate, [this]);
                        },
                        update: function (maxWidth, maxHeight, margins) {
                            var me = this;
                            var i, ilen, labels, label, ticks, tick;
                            // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
                            me.beforeUpdate();
                            // Absorb the master measurements
                            me.maxWidth = maxWidth;
                            me.maxHeight = maxHeight;
                            me.margins = helpers.extend({
                                left: 0,
                                right: 0,
                                top: 0,
                                bottom: 0
                            }, margins);
                            me.longestTextCache = me.longestTextCache || {};
                            // Dimensions
                            me.beforeSetDimensions();
                            me.setDimensions();
                            me.afterSetDimensions();
                            // Data min/max
                            me.beforeDataLimits();
                            me.determineDataLimits();
                            me.afterDataLimits();
                            // Ticks - `this.ticks` is now DEPRECATED!
                            // Internal ticks are now stored as objects in the PRIVATE `this._ticks` member
                            // and must not be accessed directly from outside this class. `this.ticks` being
                            // around for long time and not marked as private, we can't change its structure
                            // without unexpected breaking changes. If you need to access the scale ticks,
                            // use scale.getTicks() instead.
                            me.beforeBuildTicks();
                            // New implementations should return an array of objects but for BACKWARD COMPAT,
                            // we still support no return (`this.ticks` internally set by calling this method).
                            ticks = me.buildTicks() || [];
                            me.afterBuildTicks();
                            me.beforeTickToLabelConversion();
                            // New implementations should return the formatted tick labels but for BACKWARD
                            // COMPAT, we still support no return (`this.ticks` internally changed by calling
                            // this method and supposed to contain only string values).
                            labels = me.convertTicksToLabels(ticks) || me.ticks;
                            me.afterTickToLabelConversion();
                            me.ticks = labels; // BACKWARD COMPATIBILITY
                            // IMPORTANT: from this point, we consider that `this.ticks` will NEVER change!
                            // BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)
                            for (i = 0, ilen = labels.length; i < ilen; ++i) {
                                label = labels[i];
                                tick = ticks[i];
                                if (!tick) {
                                    ticks.push(tick = {
                                        label: label,
                                        major: false
                                    });
                                }
                                else {
                                    tick.label = label;
                                }
                            }
                            me._ticks = ticks;
                            // Tick Rotation
                            me.beforeCalculateTickRotation();
                            me.calculateTickRotation();
                            me.afterCalculateTickRotation();
                            // Fit
                            me.beforeFit();
                            me.fit();
                            me.afterFit();
                            //
                            me.afterUpdate();
                            return me.minSize;
                        },
                        afterUpdate: function () {
                            helpers.callback(this.options.afterUpdate, [this]);
                        },
                        //
                        beforeSetDimensions: function () {
                            helpers.callback(this.options.beforeSetDimensions, [this]);
                        },
                        setDimensions: function () {
                            var me = this;
                            // Set the unconstrained dimension before label rotation
                            if (me.isHorizontal()) {
                                // Reset position before calculating rotation
                                me.width = me.maxWidth;
                                me.left = 0;
                                me.right = me.width;
                            }
                            else {
                                me.height = me.maxHeight;
                                // Reset position before calculating rotation
                                me.top = 0;
                                me.bottom = me.height;
                            }
                            // Reset padding
                            me.paddingLeft = 0;
                            me.paddingTop = 0;
                            me.paddingRight = 0;
                            me.paddingBottom = 0;
                        },
                        afterSetDimensions: function () {
                            helpers.callback(this.options.afterSetDimensions, [this]);
                        },
                        // Data limits
                        beforeDataLimits: function () {
                            helpers.callback(this.options.beforeDataLimits, [this]);
                        },
                        determineDataLimits: helpers.noop,
                        afterDataLimits: function () {
                            helpers.callback(this.options.afterDataLimits, [this]);
                        },
                        //
                        beforeBuildTicks: function () {
                            helpers.callback(this.options.beforeBuildTicks, [this]);
                        },
                        buildTicks: helpers.noop,
                        afterBuildTicks: function () {
                            helpers.callback(this.options.afterBuildTicks, [this]);
                        },
                        beforeTickToLabelConversion: function () {
                            helpers.callback(this.options.beforeTickToLabelConversion, [this]);
                        },
                        convertTicksToLabels: function () {
                            var me = this;
                            // Convert ticks to strings
                            var tickOpts = me.options.ticks;
                            me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);
                        },
                        afterTickToLabelConversion: function () {
                            helpers.callback(this.options.afterTickToLabelConversion, [this]);
                        },
                        //
                        beforeCalculateTickRotation: function () {
                            helpers.callback(this.options.beforeCalculateTickRotation, [this]);
                        },
                        calculateTickRotation: function () {
                            var me = this;
                            var context = me.ctx;
                            var tickOpts = me.options.ticks;
                            var labels = labelsFromTicks(me._ticks);
                            // Get the width of each grid by calculating the difference
                            // between x offsets between 0 and 1.
                            var tickFont = parseFontOptions(tickOpts);
                            context.font = tickFont.font;
                            var labelRotation = tickOpts.minRotation || 0;
                            if (labels.length && me.options.display && me.isHorizontal()) {
                                var originalLabelWidth = helpers.longestText(context, tickFont.font, labels, me.longestTextCache);
                                var labelWidth = originalLabelWidth;
                                var cosRotation, sinRotation;
                                // Allow 3 pixels x2 padding either side for label readability
                                var tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6;
                                // Max label rotation can be set or default to 90 - also act as a loop counter
                                while (labelWidth > tickWidth && labelRotation < tickOpts.maxRotation) {
                                    var angleRadians = helpers.toRadians(labelRotation);
                                    cosRotation = Math.cos(angleRadians);
                                    sinRotation = Math.sin(angleRadians);
                                    if (sinRotation * originalLabelWidth > me.maxHeight) {
                                        // go back one step
                                        labelRotation--;
                                        break;
                                    }
                                    labelRotation++;
                                    labelWidth = cosRotation * originalLabelWidth;
                                }
                            }
                            me.labelRotation = labelRotation;
                        },
                        afterCalculateTickRotation: function () {
                            helpers.callback(this.options.afterCalculateTickRotation, [this]);
                        },
                        //
                        beforeFit: function () {
                            helpers.callback(this.options.beforeFit, [this]);
                        },
                        fit: function () {
                            var me = this;
                            // Reset
                            var minSize = me.minSize = {
                                width: 0,
                                height: 0
                            };
                            var labels = labelsFromTicks(me._ticks);
                            var opts = me.options;
                            var tickOpts = opts.ticks;
                            var scaleLabelOpts = opts.scaleLabel;
                            var gridLineOpts = opts.gridLines;
                            var display = opts.display;
                            var isHorizontal = me.isHorizontal();
                            var tickFont = parseFontOptions(tickOpts);
                            var tickMarkLength = opts.gridLines.tickMarkLength;
                            // Width
                            if (isHorizontal) {
                                // subtract the margins to line up with the chartArea if we are a full width scale
                                minSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;
                            }
                            else {
                                minSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
                            }
                            // height
                            if (isHorizontal) {
                                minSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
                            }
                            else {
                                minSize.height = me.maxHeight; // fill all the height
                            }
                            // Are we showing a title for the scale?
                            if (scaleLabelOpts.display && display) {
                                var scaleLabelLineHeight = parseLineHeight(scaleLabelOpts);
                                var scaleLabelPadding = helpers.options.toPadding(scaleLabelOpts.padding);
                                var deltaHeight = scaleLabelLineHeight + scaleLabelPadding.height;
                                if (isHorizontal) {
                                    minSize.height += deltaHeight;
                                }
                                else {
                                    minSize.width += deltaHeight;
                                }
                            }
                            // Don't bother fitting the ticks if we are not showing them
                            if (tickOpts.display && display) {
                                var largestTextWidth = helpers.longestText(me.ctx, tickFont.font, labels, me.longestTextCache);
                                var tallestLabelHeightInLines = helpers.numberOfLabelLines(labels);
                                var lineSpace = tickFont.size * 0.5;
                                var tickPadding = me.options.ticks.padding;
                                if (isHorizontal) {
                                    // A horizontal axis is more constrained by the height.
                                    me.longestLabelWidth = largestTextWidth;
                                    var angleRadians = helpers.toRadians(me.labelRotation);
                                    var cosRotation = Math.cos(angleRadians);
                                    var sinRotation = Math.sin(angleRadians);
                                    // TODO - improve this calculation
                                    var labelHeight = (sinRotation * largestTextWidth)
                                        + (tickFont.size * tallestLabelHeightInLines)
                                        + (lineSpace * (tallestLabelHeightInLines - 1))
                                        + lineSpace; // padding
                                    minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);
                                    me.ctx.font = tickFont.font;
                                    var firstLabelWidth = computeTextSize(me.ctx, labels[0], tickFont.font);
                                    var lastLabelWidth = computeTextSize(me.ctx, labels[labels.length - 1], tickFont.font);
                                    // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned
                                    // which means that the right padding is dominated by the font height
                                    if (me.labelRotation !== 0) {
                                        me.paddingLeft = opts.position === 'bottom' ? (cosRotation * firstLabelWidth) + 3 : (cosRotation * lineSpace) + 3; // add 3 px to move away from canvas edges
                                        me.paddingRight = opts.position === 'bottom' ? (cosRotation * lineSpace) + 3 : (cosRotation * lastLabelWidth) + 3;
                                    }
                                    else {
                                        me.paddingLeft = firstLabelWidth / 2 + 3; // add 3 px to move away from canvas edges
                                        me.paddingRight = lastLabelWidth / 2 + 3;
                                    }
                                }
                                else {
                                    // A vertical axis is more constrained by the width. Labels are the
                                    // dominant factor here, so get that length first and account for padding
                                    if (tickOpts.mirror) {
                                        largestTextWidth = 0;
                                    }
                                    else {
                                        // use lineSpace for consistency with horizontal axis
                                        // tickPadding is not implemented for horizontal
                                        largestTextWidth += tickPadding + lineSpace;
                                    }
                                    minSize.width = Math.min(me.maxWidth, minSize.width + largestTextWidth);
                                    me.paddingTop = tickFont.size / 2;
                                    me.paddingBottom = tickFont.size / 2;
                                }
                            }
                            me.handleMargins();
                            me.width = minSize.width;
                            me.height = minSize.height;
                        },
                        /**
                         * Handle margins and padding interactions
                         * @private
                         */
                        handleMargins: function () {
                            var me = this;
                            if (me.margins) {
                                me.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);
                                me.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);
                                me.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);
                                me.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);
                            }
                        },
                        afterFit: function () {
                            helpers.callback(this.options.afterFit, [this]);
                        },
                        // Shared Methods
                        isHorizontal: function () {
                            return this.options.position === 'top' || this.options.position === 'bottom';
                        },
                        isFullWidth: function () {
                            return (this.options.fullWidth);
                        },
                        // Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
                        getRightValue: function (rawValue) {
                            // Null and undefined values first
                            if (helpers.isNullOrUndef(rawValue)) {
                                return NaN;
                            }
                            // isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values
                            if (typeof rawValue === 'number' && !isFinite(rawValue)) {
                                return NaN;
                            }
                            // If it is in fact an object, dive in one more level
                            if (rawValue) {
                                if (this.isHorizontal()) {
                                    if (rawValue.x !== undefined) {
                                        return this.getRightValue(rawValue.x);
                                    }
                                }
                                else if (rawValue.y !== undefined) {
                                    return this.getRightValue(rawValue.y);
                                }
                            }
                            // Value is good, return it
                            return rawValue;
                        },
                        /**
                         * Used to get the value to display in the tooltip for the data at the given index
                         * @param index
                         * @param datasetIndex
                         */
                        getLabelForIndex: helpers.noop,
                        /**
                         * Returns the location of the given data point. Value can either be an index or a numerical value
                         * The coordinate (0, 0) is at the upper-left corner of the canvas
                         * @param value
                         * @param index
                         * @param datasetIndex
                         */
                        getPixelForValue: helpers.noop,
                        /**
                         * Used to get the data value from a given pixel. This is the inverse of getPixelForValue
                         * The coordinate (0, 0) is at the upper-left corner of the canvas
                         * @param pixel
                         */
                        getValueForPixel: helpers.noop,
                        /**
                         * Returns the location of the tick at the given index
                         * The coordinate (0, 0) is at the upper-left corner of the canvas
                         */
                        getPixelForTick: function (index) {
                            var me = this;
                            var offset = me.options.offset;
                            if (me.isHorizontal()) {
                                var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
                                var tickWidth = innerWidth / Math.max((me._ticks.length - (offset ? 0 : 1)), 1);
                                var pixel = (tickWidth * index) + me.paddingLeft;
                                if (offset) {
                                    pixel += tickWidth / 2;
                                }
                                var finalVal = me.left + Math.round(pixel);
                                finalVal += me.isFullWidth() ? me.margins.left : 0;
                                return finalVal;
                            }
                            var innerHeight = me.height - (me.paddingTop + me.paddingBottom);
                            return me.top + (index * (innerHeight / (me._ticks.length - 1)));
                        },
                        /**
                         * Utility for getting the pixel location of a percentage of scale
                         * The coordinate (0, 0) is at the upper-left corner of the canvas
                         */
                        getPixelForDecimal: function (decimal) {
                            var me = this;
                            if (me.isHorizontal()) {
                                var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
                                var valueOffset = (innerWidth * decimal) + me.paddingLeft;
                                var finalVal = me.left + Math.round(valueOffset);
                                finalVal += me.isFullWidth() ? me.margins.left : 0;
                                return finalVal;
                            }
                            return me.top + (decimal * me.height);
                        },
                        /**
                         * Returns the pixel for the minimum chart value
                         * The coordinate (0, 0) is at the upper-left corner of the canvas
                         */
                        getBasePixel: function () {
                            return this.getPixelForValue(this.getBaseValue());
                        },
                        getBaseValue: function () {
                            var me = this;
                            var min = me.min;
                            var max = me.max;
                            return me.beginAtZero ? 0 :
                                min < 0 && max < 0 ? max :
                                    min > 0 && max > 0 ? min :
                                        0;
                        },
                        /**
                         * Returns a subset of ticks to be plotted to avoid overlapping labels.
                         * @private
                         */
                        _autoSkip: function (ticks) {
                            var skipRatio;
                            var me = this;
                            var isHorizontal = me.isHorizontal();
                            var optionTicks = me.options.ticks.minor;
                            var tickCount = ticks.length;
                            var labelRotationRadians = helpers.toRadians(me.labelRotation);
                            var cosRotation = Math.cos(labelRotationRadians);
                            var longestRotatedLabel = me.longestLabelWidth * cosRotation;
                            var result = [];
                            var i, tick, shouldSkip;
                            // figure out the maximum number of gridlines to show
                            var maxTicks;
                            if (optionTicks.maxTicksLimit) {
                                maxTicks = optionTicks.maxTicksLimit;
                            }
                            if (isHorizontal) {
                                skipRatio = false;
                                if ((longestRotatedLabel + optionTicks.autoSkipPadding) * tickCount > (me.width - (me.paddingLeft + me.paddingRight))) {
                                    skipRatio = 1 + Math.floor(((longestRotatedLabel + optionTicks.autoSkipPadding) * tickCount) / (me.width - (me.paddingLeft + me.paddingRight)));
                                }
                                // if they defined a max number of optionTicks,
                                // increase skipRatio until that number is met
                                if (maxTicks && tickCount > maxTicks) {
                                    skipRatio = Math.max(skipRatio, Math.floor(tickCount / maxTicks));
                                }
                            }
                            for (i = 0; i < tickCount; i++) {
                                tick = ticks[i];
                                // Since we always show the last tick,we need may need to hide the last shown one before
                                shouldSkip = (skipRatio > 1 && i % skipRatio > 0) || (i % skipRatio === 0 && i + skipRatio >= tickCount);
                                if (shouldSkip && i !== tickCount - 1) {
                                    // leave tick in place but make sure it's not displayed (#4635)
                                    delete tick.label;
                                }
                                result.push(tick);
                            }
                            return result;
                        },
                        // Actually draw the scale on the canvas
                        // @param {rectangle} chartArea : the area of the chart to draw full grid lines on
                        draw: function (chartArea) {
                            var me = this;
                            var options = me.options;
                            if (!options.display) {
                                return;
                            }
                            var context = me.ctx;
                            var globalDefaults = defaults.global;
                            var optionTicks = options.ticks.minor;
                            var optionMajorTicks = options.ticks.major || optionTicks;
                            var gridLines = options.gridLines;
                            var scaleLabel = options.scaleLabel;
                            var isRotated = me.labelRotation !== 0;
                            var isHorizontal = me.isHorizontal();
                            var ticks = optionTicks.autoSkip ? me._autoSkip(me.getTicks()) : me.getTicks();
                            var tickFontColor = helpers.valueOrDefault(optionTicks.fontColor, globalDefaults.defaultFontColor);
                            var tickFont = parseFontOptions(optionTicks);
                            var majorTickFontColor = helpers.valueOrDefault(optionMajorTicks.fontColor, globalDefaults.defaultFontColor);
                            var majorTickFont = parseFontOptions(optionMajorTicks);
                            var tl = gridLines.drawTicks ? gridLines.tickMarkLength : 0;
                            var scaleLabelFontColor = helpers.valueOrDefault(scaleLabel.fontColor, globalDefaults.defaultFontColor);
                            var scaleLabelFont = parseFontOptions(scaleLabel);
                            var scaleLabelPadding = helpers.options.toPadding(scaleLabel.padding);
                            var labelRotationRadians = helpers.toRadians(me.labelRotation);
                            var itemsToDraw = [];
                            var axisWidth = me.options.gridLines.lineWidth;
                            var xTickStart = options.position === 'right' ? me.right : me.right - axisWidth - tl;
                            var xTickEnd = options.position === 'right' ? me.right + tl : me.right;
                            var yTickStart = options.position === 'bottom' ? me.top + axisWidth : me.bottom - tl - axisWidth;
                            var yTickEnd = options.position === 'bottom' ? me.top + axisWidth + tl : me.bottom + axisWidth;
                            helpers.each(ticks, function (tick, index) {
                                // autoskipper skipped this tick (#4635)
                                if (helpers.isNullOrUndef(tick.label)) {
                                    return;
                                }
                                var label = tick.label;
                                var lineWidth, lineColor, borderDash, borderDashOffset;
                                if (index === me.zeroLineIndex && options.offset === gridLines.offsetGridLines) {
                                    // Draw the first index specially
                                    lineWidth = gridLines.zeroLineWidth;
                                    lineColor = gridLines.zeroLineColor;
                                    borderDash = gridLines.zeroLineBorderDash;
                                    borderDashOffset = gridLines.zeroLineBorderDashOffset;
                                }
                                else {
                                    lineWidth = helpers.valueAtIndexOrDefault(gridLines.lineWidth, index);
                                    lineColor = helpers.valueAtIndexOrDefault(gridLines.color, index);
                                    borderDash = helpers.valueOrDefault(gridLines.borderDash, globalDefaults.borderDash);
                                    borderDashOffset = helpers.valueOrDefault(gridLines.borderDashOffset, globalDefaults.borderDashOffset);
                                }
                                // Common properties
                                var tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY;
                                var textAlign = 'middle';
                                var textBaseline = 'middle';
                                var tickPadding = optionTicks.padding;
                                if (isHorizontal) {
                                    var labelYOffset = tl + tickPadding;
                                    if (options.position === 'bottom') {
                                        // bottom
                                        textBaseline = !isRotated ? 'top' : 'middle';
                                        textAlign = !isRotated ? 'center' : 'right';
                                        labelY = me.top + labelYOffset;
                                    }
                                    else {
                                        // top
                                        textBaseline = !isRotated ? 'bottom' : 'middle';
                                        textAlign = !isRotated ? 'center' : 'left';
                                        labelY = me.bottom - labelYOffset;
                                    }
                                    var xLineValue = getLineValue(me, index, gridLines.offsetGridLines && ticks.length > 1);
                                    if (xLineValue < me.left) {
                                        lineColor = 'rgba(0,0,0,0)';
                                    }
                                    xLineValue += helpers.aliasPixel(lineWidth);
                                    labelX = me.getPixelForTick(index) + optionTicks.labelOffset; // x values for optionTicks (need to consider offsetLabel option)
                                    tx1 = tx2 = x1 = x2 = xLineValue;
                                    ty1 = yTickStart;
                                    ty2 = yTickEnd;
                                    y1 = chartArea.top;
                                    y2 = chartArea.bottom + axisWidth;
                                }
                                else {
                                    var isLeft = options.position === 'left';
                                    var labelXOffset;
                                    if (optionTicks.mirror) {
                                        textAlign = isLeft ? 'left' : 'right';
                                        labelXOffset = tickPadding;
                                    }
                                    else {
                                        textAlign = isLeft ? 'right' : 'left';
                                        labelXOffset = tl + tickPadding;
                                    }
                                    labelX = isLeft ? me.right - labelXOffset : me.left + labelXOffset;
                                    var yLineValue = getLineValue(me, index, gridLines.offsetGridLines && ticks.length > 1);
                                    if (yLineValue < me.top) {
                                        lineColor = 'rgba(0,0,0,0)';
                                    }
                                    yLineValue += helpers.aliasPixel(lineWidth);
                                    labelY = me.getPixelForTick(index) + optionTicks.labelOffset;
                                    tx1 = xTickStart;
                                    tx2 = xTickEnd;
                                    x1 = chartArea.left;
                                    x2 = chartArea.right + axisWidth;
                                    ty1 = ty2 = y1 = y2 = yLineValue;
                                }
                                itemsToDraw.push({
                                    tx1: tx1,
                                    ty1: ty1,
                                    tx2: tx2,
                                    ty2: ty2,
                                    x1: x1,
                                    y1: y1,
                                    x2: x2,
                                    y2: y2,
                                    labelX: labelX,
                                    labelY: labelY,
                                    glWidth: lineWidth,
                                    glColor: lineColor,
                                    glBorderDash: borderDash,
                                    glBorderDashOffset: borderDashOffset,
                                    rotation: -1 * labelRotationRadians,
                                    label: label,
                                    major: tick.major,
                                    textBaseline: textBaseline,
                                    textAlign: textAlign
                                });
                            });
                            // Draw all of the tick labels, tick marks, and grid lines at the correct places
                            helpers.each(itemsToDraw, function (itemToDraw) {
                                if (gridLines.display) {
                                    context.save();
                                    context.lineWidth = itemToDraw.glWidth;
                                    context.strokeStyle = itemToDraw.glColor;
                                    if (context.setLineDash) {
                                        context.setLineDash(itemToDraw.glBorderDash);
                                        context.lineDashOffset = itemToDraw.glBorderDashOffset;
                                    }
                                    context.beginPath();
                                    if (gridLines.drawTicks) {
                                        context.moveTo(itemToDraw.tx1, itemToDraw.ty1);
                                        context.lineTo(itemToDraw.tx2, itemToDraw.ty2);
                                    }
                                    if (gridLines.drawOnChartArea) {
                                        context.moveTo(itemToDraw.x1, itemToDraw.y1);
                                        context.lineTo(itemToDraw.x2, itemToDraw.y2);
                                    }
                                    context.stroke();
                                    context.restore();
                                }
                                if (optionTicks.display) {
                                    // Make sure we draw text in the correct color and font
                                    context.save();
                                    context.translate(itemToDraw.labelX, itemToDraw.labelY);
                                    context.rotate(itemToDraw.rotation);
                                    context.font = itemToDraw.major ? majorTickFont.font : tickFont.font;
                                    context.fillStyle = itemToDraw.major ? majorTickFontColor : tickFontColor;
                                    context.textBaseline = itemToDraw.textBaseline;
                                    context.textAlign = itemToDraw.textAlign;
                                    var label = itemToDraw.label;
                                    if (helpers.isArray(label)) {
                                        var lineCount = label.length;
                                        var lineHeight = tickFont.size * 1.5;
                                        var y = me.isHorizontal() ? 0 : -lineHeight * (lineCount - 1) / 2;
                                        for (var i = 0; i < lineCount; ++i) {
                                            // We just make sure the multiline element is a string here..
                                            context.fillText('' + label[i], 0, y);
                                            // apply same lineSpacing as calculated @ L#320
                                            y += lineHeight;
                                        }
                                    }
                                    else {
                                        context.fillText(label, 0, 0);
                                    }
                                    context.restore();
                                }
                            });
                            if (scaleLabel.display) {
                                // Draw the scale label
                                var scaleLabelX;
                                var scaleLabelY;
                                var rotation = 0;
                                var halfLineHeight = parseLineHeight(scaleLabel) / 2;
                                if (isHorizontal) {
                                    scaleLabelX = me.left + ((me.right - me.left) / 2); // midpoint of the width
                                    scaleLabelY = options.position === 'bottom'
                                        ? me.bottom - halfLineHeight - scaleLabelPadding.bottom
                                        : me.top + halfLineHeight + scaleLabelPadding.top;
                                }
                                else {
                                    var isLeft = options.position === 'left';
                                    scaleLabelX = isLeft
                                        ? me.left + halfLineHeight + scaleLabelPadding.top
                                        : me.right - halfLineHeight - scaleLabelPadding.top;
                                    scaleLabelY = me.top + ((me.bottom - me.top) / 2);
                                    rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
                                }
                                context.save();
                                context.translate(scaleLabelX, scaleLabelY);
                                context.rotate(rotation);
                                context.textAlign = 'center';
                                context.textBaseline = 'middle';
                                context.fillStyle = scaleLabelFontColor; // render in correct colour
                                context.font = scaleLabelFont.font;
                                context.fillText(scaleLabel.labelString, 0, 0);
                                context.restore();
                            }
                            if (gridLines.drawBorder) {
                                // Draw the line at the edge of the axis
                                context.lineWidth = helpers.valueAtIndexOrDefault(gridLines.lineWidth, 0);
                                context.strokeStyle = helpers.valueAtIndexOrDefault(gridLines.color, 0);
                                var x1 = me.left;
                                var x2 = me.right + axisWidth;
                                var y1 = me.top;
                                var y2 = me.bottom + axisWidth;
                                var aliasPixel = helpers.aliasPixel(context.lineWidth);
                                if (isHorizontal) {
                                    y1 = y2 = options.position === 'top' ? me.bottom : me.top;
                                    y1 += aliasPixel;
                                    y2 += aliasPixel;
                                }
                                else {
                                    x1 = x2 = options.position === 'left' ? me.right : me.left;
                                    x1 += aliasPixel;
                                    x2 += aliasPixel;
                                }
                                context.beginPath();
                                context.moveTo(x1, y1);
                                context.lineTo(x2, y2);
                                context.stroke();
                            }
                        }
                    });
                };
            }, { "25": 25, "26": 26, "34": 34, "45": 45 }], 33: [function (require, module, exports) {
                'use strict';
                var defaults = require(25);
                var helpers = require(45);
                var layouts = require(30);
                module.exports = function (Chart) {
                    Chart.scaleService = {
                        // Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
                        // use the new chart options to grab the correct scale
                        constructors: {},
                        // Use a registration function so that we can move to an ES6 map when we no longer need to support
                        // old browsers
                        // Scale config defaults
                        defaults: {},
                        registerScaleType: function (type, scaleConstructor, scaleDefaults) {
                            this.constructors[type] = scaleConstructor;
                            this.defaults[type] = helpers.clone(scaleDefaults);
                        },
                        getScaleConstructor: function (type) {
                            return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
                        },
                        getScaleDefaults: function (type) {
                            // Return the scale defaults merged with the global settings so that we always use the latest ones
                            return this.defaults.hasOwnProperty(type) ? helpers.merge({}, [defaults.scale, this.defaults[type]]) : {};
                        },
                        updateScaleDefaults: function (type, additions) {
                            var me = this;
                            if (me.defaults.hasOwnProperty(type)) {
                                me.defaults[type] = helpers.extend(me.defaults[type], additions);
                            }
                        },
                        addScalesToLayout: function (chart) {
                            // Adds each scale to the chart.boxes array to be sized accordingly
                            helpers.each(chart.scales, function (scale) {
                                // Set ILayoutItem parameters for backwards compatibility
                                scale.fullWidth = scale.options.fullWidth;
                                scale.position = scale.options.position;
                                scale.weight = scale.options.weight;
                                layouts.addBox(chart, scale);
                            });
                        }
                    };
                };
            }, { "25": 25, "30": 30, "45": 45 }], 34: [function (require, module, exports) {
                'use strict';
                var helpers = require(45);
                /**
                 * Namespace to hold static tick generation functions
                 * @namespace Chart.Ticks
                 */
                module.exports = {
                    /**
                     * Namespace to hold formatters for different types of ticks
                     * @namespace Chart.Ticks.formatters
                     */
                    formatters: {
                        /**
                         * Formatter for value labels
                         * @method Chart.Ticks.formatters.values
                         * @param value the value to display
                         * @return {String|Array} the label to display
                         */
                        values: function (value) {
                            return helpers.isArray(value) ? value : '' + value;
                        },
                        /**
                         * Formatter for linear numeric ticks
                         * @method Chart.Ticks.formatters.linear
                         * @param tickValue {Number} the value to be formatted
                         * @param index {Number} the position of the tickValue parameter in the ticks array
                         * @param ticks {Array<Number>} the list of ticks being converted
                         * @return {String} string representation of the tickValue parameter
                         */
                        linear: function (tickValue, index, ticks) {
                            // If we have lots of ticks, don't use the ones
                            var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];
                            // If we have a number like 2.5 as the delta, figure out how many decimal places we need
                            if (Math.abs(delta) > 1) {
                                if (tickValue !== Math.floor(tickValue)) {
                                    // not an integer
                                    delta = tickValue - Math.floor(tickValue);
                                }
                            }
                            var logDelta = helpers.log10(Math.abs(delta));
                            var tickString = '';
                            if (tickValue !== 0) {
                                var numDecimal = -1 * Math.floor(logDelta);
                                numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places
                                tickString = tickValue.toFixed(numDecimal);
                            }
                            else {
                                tickString = '0'; // never show decimal places for 0
                            }
                            return tickString;
                        },
                        logarithmic: function (tickValue, index, ticks) {
                            var remain = tickValue / (Math.pow(10, Math.floor(helpers.log10(tickValue))));
                            if (tickValue === 0) {
                                return '0';
                            }
                            else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
                                return tickValue.toExponential();
                            }
                            return '';
                        }
                    }
                };
            }, { "45": 45 }], 35: [function (require, module, exports) {
                'use strict';
                var defaults = require(25);
                var Element = require(26);
                var helpers = require(45);
                defaults._set('global', {
                    tooltips: {
                        enabled: true,
                        custom: null,
                        mode: 'nearest',
                        position: 'average',
                        intersect: true,
                        backgroundColor: 'rgba(0,0,0,0.8)',
                        titleFontStyle: 'bold',
                        titleSpacing: 2,
                        titleMarginBottom: 6,
                        titleFontColor: '#fff',
                        titleAlign: 'left',
                        bodySpacing: 2,
                        bodyFontColor: '#fff',
                        bodyAlign: 'left',
                        footerFontStyle: 'bold',
                        footerSpacing: 2,
                        footerMarginTop: 6,
                        footerFontColor: '#fff',
                        footerAlign: 'left',
                        yPadding: 6,
                        xPadding: 6,
                        caretPadding: 2,
                        caretSize: 5,
                        cornerRadius: 6,
                        multiKeyBackground: '#fff',
                        displayColors: true,
                        borderColor: 'rgba(0,0,0,0)',
                        borderWidth: 0,
                        callbacks: {
                            // Args are: (tooltipItems, data)
                            beforeTitle: helpers.noop,
                            title: function (tooltipItems, data) {
                                // Pick first xLabel for now
                                var title = '';
                                var labels = data.labels;
                                var labelCount = labels ? labels.length : 0;
                                if (tooltipItems.length > 0) {
                                    var item = tooltipItems[0];
                                    if (item.xLabel) {
                                        title = item.xLabel;
                                    }
                                    else if (labelCount > 0 && item.index < labelCount) {
                                        title = labels[item.index];
                                    }
                                }
                                return title;
                            },
                            afterTitle: helpers.noop,
                            // Args are: (tooltipItems, data)
                            beforeBody: helpers.noop,
                            // Args are: (tooltipItem, data)
                            beforeLabel: helpers.noop,
                            label: function (tooltipItem, data) {
                                var label = data.datasets[tooltipItem.datasetIndex].label || '';
                                if (label) {
                                    label += ': ';
                                }
                                label += tooltipItem.yLabel;
                                return label;
                            },
                            labelColor: function (tooltipItem, chart) {
                                var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);
                                var activeElement = meta.data[tooltipItem.index];
                                var view = activeElement._view;
                                return {
                                    borderColor: view.borderColor,
                                    backgroundColor: view.backgroundColor
                                };
                            },
                            labelTextColor: function () {
                                return this._options.bodyFontColor;
                            },
                            afterLabel: helpers.noop,
                            // Args are: (tooltipItems, data)
                            afterBody: helpers.noop,
                            // Args are: (tooltipItems, data)
                            beforeFooter: helpers.noop,
                            footer: helpers.noop,
                            afterFooter: helpers.noop
                        }
                    }
                });
                module.exports = function (Chart) {
                    /**
                     * Helper method to merge the opacity into a color
                     */
                    function mergeOpacity(colorString, opacity) {
                        var color = helpers.color(colorString);
                        return color.alpha(opacity * color.alpha()).rgbaString();
                    }
                    // Helper to push or concat based on if the 2nd parameter is an array or not
                    function pushOrConcat(base, toPush) {
                        if (toPush) {
                            if (helpers.isArray(toPush)) {
                                // base = base.concat(toPush);
                                Array.prototype.push.apply(base, toPush);
                            }
                            else {
                                base.push(toPush);
                            }
                        }
                        return base;
                    }
                    // Private helper to create a tooltip item model
                    // @param element : the chart element (point, arc, bar) to create the tooltip item for
                    // @return : new tooltip item
                    function createTooltipItem(element) {
                        var xScale = element._xScale;
                        var yScale = element._yScale || element._scale; // handle radar || polarArea charts
                        var index = element._index;
                        var datasetIndex = element._datasetIndex;
                        return {
                            xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',
                            yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',
                            index: index,
                            datasetIndex: datasetIndex,
                            x: element._model.x,
                            y: element._model.y
                        };
                    }
                    /**
                     * Helper to get the reset model for the tooltip
                     * @param tooltipOpts {Object} the tooltip options
                     */
                    function getBaseModel(tooltipOpts) {
                        var globalDefaults = defaults.global;
                        var valueOrDefault = helpers.valueOrDefault;
                        return {
                            // Positioning
                            xPadding: tooltipOpts.xPadding,
                            yPadding: tooltipOpts.yPadding,
                            xAlign: tooltipOpts.xAlign,
                            yAlign: tooltipOpts.yAlign,
                            // Body
                            bodyFontColor: tooltipOpts.bodyFontColor,
                            _bodyFontFamily: valueOrDefault(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
                            _bodyFontStyle: valueOrDefault(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
                            _bodyAlign: tooltipOpts.bodyAlign,
                            bodyFontSize: valueOrDefault(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
                            bodySpacing: tooltipOpts.bodySpacing,
                            // Title
                            titleFontColor: tooltipOpts.titleFontColor,
                            _titleFontFamily: valueOrDefault(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
                            _titleFontStyle: valueOrDefault(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
                            titleFontSize: valueOrDefault(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
                            _titleAlign: tooltipOpts.titleAlign,
                            titleSpacing: tooltipOpts.titleSpacing,
                            titleMarginBottom: tooltipOpts.titleMarginBottom,
                            // Footer
                            footerFontColor: tooltipOpts.footerFontColor,
                            _footerFontFamily: valueOrDefault(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
                            _footerFontStyle: valueOrDefault(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
                            footerFontSize: valueOrDefault(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
                            _footerAlign: tooltipOpts.footerAlign,
                            footerSpacing: tooltipOpts.footerSpacing,
                            footerMarginTop: tooltipOpts.footerMarginTop,
                            // Appearance
                            caretSize: tooltipOpts.caretSize,
                            cornerRadius: tooltipOpts.cornerRadius,
                            backgroundColor: tooltipOpts.backgroundColor,
                            opacity: 0,
                            legendColorBackground: tooltipOpts.multiKeyBackground,
                            displayColors: tooltipOpts.displayColors,
                            borderColor: tooltipOpts.borderColor,
                            borderWidth: tooltipOpts.borderWidth
                        };
                    }
                    /**
                     * Get the size of the tooltip
                     */
                    function getTooltipSize(tooltip, model) {
                        var ctx = tooltip._chart.ctx;
                        var height = model.yPadding * 2; // Tooltip Padding
                        var width = 0;
                        // Count of all lines in the body
                        var body = model.body;
                        var combinedBodyLength = body.reduce(function (count, bodyItem) {
                            return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
                        }, 0);
                        combinedBodyLength += model.beforeBody.length + model.afterBody.length;
                        var titleLineCount = model.title.length;
                        var footerLineCount = model.footer.length;
                        var titleFontSize = model.titleFontSize;
                        var bodyFontSize = model.bodyFontSize;
                        var footerFontSize = model.footerFontSize;
                        height += titleLineCount * titleFontSize; // Title Lines
                        height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing
                        height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin
                        height += combinedBodyLength * bodyFontSize; // Body Lines
                        height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing
                        height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin
                        height += footerLineCount * (footerFontSize); // Footer Lines
                        height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing
                        // Title width
                        var widthPadding = 0;
                        var maxLineWidth = function (line) {
                            width = Math.max(width, ctx.measureText(line).width + widthPadding);
                        };
                        ctx.font = helpers.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
                        helpers.each(model.title, maxLineWidth);
                        // Body width
                        ctx.font = helpers.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
                        helpers.each(model.beforeBody.concat(model.afterBody), maxLineWidth);
                        // Body lines may include some extra width due to the color box
                        widthPadding = model.displayColors ? (bodyFontSize + 2) : 0;
                        helpers.each(body, function (bodyItem) {
                            helpers.each(bodyItem.before, maxLineWidth);
                            helpers.each(bodyItem.lines, maxLineWidth);
                            helpers.each(bodyItem.after, maxLineWidth);
                        });
                        // Reset back to 0
                        widthPadding = 0;
                        // Footer width
                        ctx.font = helpers.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
                        helpers.each(model.footer, maxLineWidth);
                        // Add padding
                        width += 2 * model.xPadding;
                        return {
                            width: width,
                            height: height
                        };
                    }
                    /**
                     * Helper to get the alignment of a tooltip given the size
                     */
                    function determineAlignment(tooltip, size) {
                        var model = tooltip._model;
                        var chart = tooltip._chart;
                        var chartArea = tooltip._chart.chartArea;
                        var xAlign = 'center';
                        var yAlign = 'center';
                        if (model.y < size.height) {
                            yAlign = 'top';
                        }
                        else if (model.y > (chart.height - size.height)) {
                            yAlign = 'bottom';
                        }
                        var lf, rf; // functions to determine left, right alignment
                        var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart
                        var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges
                        var midX = (chartArea.left + chartArea.right) / 2;
                        var midY = (chartArea.top + chartArea.bottom) / 2;
                        if (yAlign === 'center') {
                            lf = function (x) {
                                return x <= midX;
                            };
                            rf = function (x) {
                                return x > midX;
                            };
                        }
                        else {
                            lf = function (x) {
                                return x <= (size.width / 2);
                            };
                            rf = function (x) {
                                return x >= (chart.width - (size.width / 2));
                            };
                        }
                        olf = function (x) {
                            return x + size.width + model.caretSize + model.caretPadding > chart.width;
                        };
                        orf = function (x) {
                            return x - size.width - model.caretSize - model.caretPadding < 0;
                        };
                        yf = function (y) {
                            return y <= midY ? 'top' : 'bottom';
                        };
                        if (lf(model.x)) {
                            xAlign = 'left';
                            // Is tooltip too wide and goes over the right side of the chart.?
                            if (olf(model.x)) {
                                xAlign = 'center';
                                yAlign = yf(model.y);
                            }
                        }
                        else if (rf(model.x)) {
                            xAlign = 'right';
                            // Is tooltip too wide and goes outside left edge of canvas?
                            if (orf(model.x)) {
                                xAlign = 'center';
                                yAlign = yf(model.y);
                            }
                        }
                        var opts = tooltip._options;
                        return {
                            xAlign: opts.xAlign ? opts.xAlign : xAlign,
                            yAlign: opts.yAlign ? opts.yAlign : yAlign
                        };
                    }
                    /**
                     * @Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment
                     */
                    function getBackgroundPoint(vm, size, alignment, chart) {
                        // Background Position
                        var x = vm.x;
                        var y = vm.y;
                        var caretSize = vm.caretSize;
                        var caretPadding = vm.caretPadding;
                        var cornerRadius = vm.cornerRadius;
                        var xAlign = alignment.xAlign;
                        var yAlign = alignment.yAlign;
                        var paddingAndSize = caretSize + caretPadding;
                        var radiusAndPadding = cornerRadius + caretPadding;
                        if (xAlign === 'right') {
                            x -= size.width;
                        }
                        else if (xAlign === 'center') {
                            x -= (size.width / 2);
                            if (x + size.width > chart.width) {
                                x = chart.width - size.width;
                            }
                            if (x < 0) {
                                x = 0;
                            }
                        }
                        if (yAlign === 'top') {
                            y += paddingAndSize;
                        }
                        else if (yAlign === 'bottom') {
                            y -= size.height + paddingAndSize;
                        }
                        else {
                            y -= (size.height / 2);
                        }
                        if (yAlign === 'center') {
                            if (xAlign === 'left') {
                                x += paddingAndSize;
                            }
                            else if (xAlign === 'right') {
                                x -= paddingAndSize;
                            }
                        }
                        else if (xAlign === 'left') {
                            x -= radiusAndPadding;
                        }
                        else if (xAlign === 'right') {
                            x += radiusAndPadding;
                        }
                        return {
                            x: x,
                            y: y
                        };
                    }
                    Chart.Tooltip = Element.extend({
                        initialize: function () {
                            this._model = getBaseModel(this._options);
                            this._lastActive = [];
                        },
                        // Get the title
                        // Args are: (tooltipItem, data)
                        getTitle: function () {
                            var me = this;
                            var opts = me._options;
                            var callbacks = opts.callbacks;
                            var beforeTitle = callbacks.beforeTitle.apply(me, arguments);
                            var title = callbacks.title.apply(me, arguments);
                            var afterTitle = callbacks.afterTitle.apply(me, arguments);
                            var lines = [];
                            lines = pushOrConcat(lines, beforeTitle);
                            lines = pushOrConcat(lines, title);
                            lines = pushOrConcat(lines, afterTitle);
                            return lines;
                        },
                        // Args are: (tooltipItem, data)
                        getBeforeBody: function () {
                            var lines = this._options.callbacks.beforeBody.apply(this, arguments);
                            return helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];
                        },
                        // Args are: (tooltipItem, data)
                        getBody: function (tooltipItems, data) {
                            var me = this;
                            var callbacks = me._options.callbacks;
                            var bodyItems = [];
                            helpers.each(tooltipItems, function (tooltipItem) {
                                var bodyItem = {
                                    before: [],
                                    lines: [],
                                    after: []
                                };
                                pushOrConcat(bodyItem.before, callbacks.beforeLabel.call(me, tooltipItem, data));
                                pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
                                pushOrConcat(bodyItem.after, callbacks.afterLabel.call(me, tooltipItem, data));
                                bodyItems.push(bodyItem);
                            });
                            return bodyItems;
                        },
                        // Args are: (tooltipItem, data)
                        getAfterBody: function () {
                            var lines = this._options.callbacks.afterBody.apply(this, arguments);
                            return helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];
                        },
                        // Get the footer and beforeFooter and afterFooter lines
                        // Args are: (tooltipItem, data)
                        getFooter: function () {
                            var me = this;
                            var callbacks = me._options.callbacks;
                            var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
                            var footer = callbacks.footer.apply(me, arguments);
                            var afterFooter = callbacks.afterFooter.apply(me, arguments);
                            var lines = [];
                            lines = pushOrConcat(lines, beforeFooter);
                            lines = pushOrConcat(lines, footer);
                            lines = pushOrConcat(lines, afterFooter);
                            return lines;
                        },
                        update: function (changed) {
                            var me = this;
                            var opts = me._options;
                            // Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition
                            // that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time
                            // which breaks any animations.
                            var existingModel = me._model;
                            var model = me._model = getBaseModel(opts);
                            var active = me._active;
                            var data = me._data;
                            // In the case where active.length === 0 we need to keep these at existing values for good animations
                            var alignment = {
                                xAlign: existingModel.xAlign,
                                yAlign: existingModel.yAlign
                            };
                            var backgroundPoint = {
                                x: existingModel.x,
                                y: existingModel.y
                            };
                            var tooltipSize = {
                                width: existingModel.width,
                                height: existingModel.height
                            };
                            var tooltipPosition = {
                                x: existingModel.caretX,
                                y: existingModel.caretY
                            };
                            var i, len;
                            if (active.length) {
                                model.opacity = 1;
                                var labelColors = [];
                                var labelTextColors = [];
                                tooltipPosition = Chart.Tooltip.positioners[opts.position].call(me, active, me._eventPosition);
                                var tooltipItems = [];
                                for (i = 0, len = active.length; i < len; ++i) {
                                    tooltipItems.push(createTooltipItem(active[i]));
                                }
                                // If the user provided a filter function, use it to modify the tooltip items
                                if (opts.filter) {
                                    tooltipItems = tooltipItems.filter(function (a) {
                                        return opts.filter(a, data);
                                    });
                                }
                                // If the user provided a sorting function, use it to modify the tooltip items
                                if (opts.itemSort) {
                                    tooltipItems = tooltipItems.sort(function (a, b) {
                                        return opts.itemSort(a, b, data);
                                    });
                                }
                                // Determine colors for boxes
                                helpers.each(tooltipItems, function (tooltipItem) {
                                    labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));
                                    labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));
                                });
                                // Build the Text Lines
                                model.title = me.getTitle(tooltipItems, data);
                                model.beforeBody = me.getBeforeBody(tooltipItems, data);
                                model.body = me.getBody(tooltipItems, data);
                                model.afterBody = me.getAfterBody(tooltipItems, data);
                                model.footer = me.getFooter(tooltipItems, data);
                                // Initial positioning and colors
                                model.x = Math.round(tooltipPosition.x);
                                model.y = Math.round(tooltipPosition.y);
                                model.caretPadding = opts.caretPadding;
                                model.labelColors = labelColors;
                                model.labelTextColors = labelTextColors;
                                // data points
                                model.dataPoints = tooltipItems;
                                // We need to determine alignment of the tooltip
                                tooltipSize = getTooltipSize(this, model);
                                alignment = determineAlignment(this, tooltipSize);
                                // Final Size and Position
                                backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);
                            }
                            else {
                                model.opacity = 0;
                            }
                            model.xAlign = alignment.xAlign;
                            model.yAlign = alignment.yAlign;
                            model.x = backgroundPoint.x;
                            model.y = backgroundPoint.y;
                            model.width = tooltipSize.width;
                            model.height = tooltipSize.height;
                            // Point where the caret on the tooltip points to
                            model.caretX = tooltipPosition.x;
                            model.caretY = tooltipPosition.y;
                            me._model = model;
                            if (changed && opts.custom) {
                                opts.custom.call(me, model);
                            }
                            return me;
                        },
                        drawCaret: function (tooltipPoint, size) {
                            var ctx = this._chart.ctx;
                            var vm = this._view;
                            var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);
                            ctx.lineTo(caretPosition.x1, caretPosition.y1);
                            ctx.lineTo(caretPosition.x2, caretPosition.y2);
                            ctx.lineTo(caretPosition.x3, caretPosition.y3);
                        },
                        getCaretPosition: function (tooltipPoint, size, vm) {
                            var x1, x2, x3, y1, y2, y3;
                            var caretSize = vm.caretSize;
                            var cornerRadius = vm.cornerRadius;
                            var xAlign = vm.xAlign;
                            var yAlign = vm.yAlign;
                            var ptX = tooltipPoint.x;
                            var ptY = tooltipPoint.y;
                            var width = size.width;
                            var height = size.height;
                            if (yAlign === 'center') {
                                y2 = ptY + (height / 2);
                                if (xAlign === 'left') {
                                    x1 = ptX;
                                    x2 = x1 - caretSize;
                                    x3 = x1;
                                    y1 = y2 + caretSize;
                                    y3 = y2 - caretSize;
                                }
                                else {
                                    x1 = ptX + width;
                                    x2 = x1 + caretSize;
                                    x3 = x1;
                                    y1 = y2 - caretSize;
                                    y3 = y2 + caretSize;
                                }
                            }
                            else {
                                if (xAlign === 'left') {
                                    x2 = ptX + cornerRadius + (caretSize);
                                    x1 = x2 - caretSize;
                                    x3 = x2 + caretSize;
                                }
                                else if (xAlign === 'right') {
                                    x2 = ptX + width - cornerRadius - caretSize;
                                    x1 = x2 - caretSize;
                                    x3 = x2 + caretSize;
                                }
                                else {
                                    x2 = vm.caretX;
                                    x1 = x2 - caretSize;
                                    x3 = x2 + caretSize;
                                }
                                if (yAlign === 'top') {
                                    y1 = ptY;
                                    y2 = y1 - caretSize;
                                    y3 = y1;
                                }
                                else {
                                    y1 = ptY + height;
                                    y2 = y1 + caretSize;
                                    y3 = y1;
                                    // invert drawing order
                                    var tmp = x3;
                                    x3 = x1;
                                    x1 = tmp;
                                }
                            }
                            return { x1: x1, x2: x2, x3: x3, y1: y1, y2: y2, y3: y3 };
                        },
                        drawTitle: function (pt, vm, ctx, opacity) {
                            var title = vm.title;
                            if (title.length) {
                                ctx.textAlign = vm._titleAlign;
                                ctx.textBaseline = 'top';
                                var titleFontSize = vm.titleFontSize;
                                var titleSpacing = vm.titleSpacing;
                                ctx.fillStyle = mergeOpacity(vm.titleFontColor, opacity);
                                ctx.font = helpers.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);
                                var i, len;
                                for (i = 0, len = title.length; i < len; ++i) {
                                    ctx.fillText(title[i], pt.x, pt.y);
                                    pt.y += titleFontSize + titleSpacing; // Line Height and spacing
                                    if (i + 1 === title.length) {
                                        pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing
                                    }
                                }
                            }
                        },
                        drawBody: function (pt, vm, ctx, opacity) {
                            var bodyFontSize = vm.bodyFontSize;
                            var bodySpacing = vm.bodySpacing;
                            var body = vm.body;
                            ctx.textAlign = vm._bodyAlign;
                            ctx.textBaseline = 'top';
                            ctx.font = helpers.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);
                            // Before Body
                            var xLinePadding = 0;
                            var fillLineOfText = function (line) {
                                ctx.fillText(line, pt.x + xLinePadding, pt.y);
                                pt.y += bodyFontSize + bodySpacing;
                            };
                            // Before body lines
                            ctx.fillStyle = mergeOpacity(vm.bodyFontColor, opacity);
                            helpers.each(vm.beforeBody, fillLineOfText);
                            var drawColorBoxes = vm.displayColors;
                            xLinePadding = drawColorBoxes ? (bodyFontSize + 2) : 0;
                            // Draw body lines now
                            helpers.each(body, function (bodyItem, i) {
                                var textColor = mergeOpacity(vm.labelTextColors[i], opacity);
                                ctx.fillStyle = textColor;
                                helpers.each(bodyItem.before, fillLineOfText);
                                helpers.each(bodyItem.lines, function (line) {
                                    // Draw Legend-like boxes if needed
                                    if (drawColorBoxes) {
                                        // Fill a white rect so that colours merge nicely if the opacity is < 1
                                        ctx.fillStyle = mergeOpacity(vm.legendColorBackground, opacity);
                                        ctx.fillRect(pt.x, pt.y, bodyFontSize, bodyFontSize);
                                        // Border
                                        ctx.lineWidth = 1;
                                        ctx.strokeStyle = mergeOpacity(vm.labelColors[i].borderColor, opacity);
                                        ctx.strokeRect(pt.x, pt.y, bodyFontSize, bodyFontSize);
                                        // Inner square
                                        ctx.fillStyle = mergeOpacity(vm.labelColors[i].backgroundColor, opacity);
                                        ctx.fillRect(pt.x + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
                                        ctx.fillStyle = textColor;
                                    }
                                    fillLineOfText(line);
                                });
                                helpers.each(bodyItem.after, fillLineOfText);
                            });
                            // Reset back to 0 for after body
                            xLinePadding = 0;
                            // After body lines
                            helpers.each(vm.afterBody, fillLineOfText);
                            pt.y -= bodySpacing; // Remove last body spacing
                        },
                        drawFooter: function (pt, vm, ctx, opacity) {
                            var footer = vm.footer;
                            if (footer.length) {
                                pt.y += vm.footerMarginTop;
                                ctx.textAlign = vm._footerAlign;
                                ctx.textBaseline = 'top';
                                ctx.fillStyle = mergeOpacity(vm.footerFontColor, opacity);
                                ctx.font = helpers.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);
                                helpers.each(footer, function (line) {
                                    ctx.fillText(line, pt.x, pt.y);
                                    pt.y += vm.footerFontSize + vm.footerSpacing;
                                });
                            }
                        },
                        drawBackground: function (pt, vm, ctx, tooltipSize, opacity) {
                            ctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);
                            ctx.strokeStyle = mergeOpacity(vm.borderColor, opacity);
                            ctx.lineWidth = vm.borderWidth;
                            var xAlign = vm.xAlign;
                            var yAlign = vm.yAlign;
                            var x = pt.x;
                            var y = pt.y;
                            var width = tooltipSize.width;
                            var height = tooltipSize.height;
                            var radius = vm.cornerRadius;
                            ctx.beginPath();
                            ctx.moveTo(x + radius, y);
                            if (yAlign === 'top') {
                                this.drawCaret(pt, tooltipSize);
                            }
                            ctx.lineTo(x + width - radius, y);
                            ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
                            if (yAlign === 'center' && xAlign === 'right') {
                                this.drawCaret(pt, tooltipSize);
                            }
                            ctx.lineTo(x + width, y + height - radius);
                            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
                            if (yAlign === 'bottom') {
                                this.drawCaret(pt, tooltipSize);
                            }
                            ctx.lineTo(x + radius, y + height);
                            ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
                            if (yAlign === 'center' && xAlign === 'left') {
                                this.drawCaret(pt, tooltipSize);
                            }
                            ctx.lineTo(x, y + radius);
                            ctx.quadraticCurveTo(x, y, x + radius, y);
                            ctx.closePath();
                            ctx.fill();
                            if (vm.borderWidth > 0) {
                                ctx.stroke();
                            }
                        },
                        draw: function () {
                            var ctx = this._chart.ctx;
                            var vm = this._view;
                            if (vm.opacity === 0) {
                                return;
                            }
                            var tooltipSize = {
                                width: vm.width,
                                height: vm.height
                            };
                            var pt = {
                                x: vm.x,
                                y: vm.y
                            };
                            // IE11/Edge does not like very small opacities, so snap to 0
                            var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;
                            // Truthy/falsey value for empty tooltip
                            var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;
                            if (this._options.enabled && hasTooltipContent) {
                                // Draw Background
                                this.drawBackground(pt, vm, ctx, tooltipSize, opacity);
                                // Draw Title, Body, and Footer
                                pt.x += vm.xPadding;
                                pt.y += vm.yPadding;
                                // Titles
                                this.drawTitle(pt, vm, ctx, opacity);
                                // Body
                                this.drawBody(pt, vm, ctx, opacity);
                                // Footer
                                this.drawFooter(pt, vm, ctx, opacity);
                            }
                        },
                        /**
                         * Handle an event
                         * @private
                         * @param {IEvent} event - The event to handle
                         * @returns {Boolean} true if the tooltip changed
                         */
                        handleEvent: function (e) {
                            var me = this;
                            var options = me._options;
                            var changed = false;
                            me._lastActive = me._lastActive || [];
                            // Find Active Elements for tooltips
                            if (e.type === 'mouseout') {
                                me._active = [];
                            }
                            else {
                                me._active = me._chart.getElementsAtEventForMode(e, options.mode, options);
                            }
                            // Remember Last Actives
                            changed = !helpers.arrayEquals(me._active, me._lastActive);
                            // Only handle target event on tooltip change
                            if (changed) {
                                me._lastActive = me._active;
                                if (options.enabled || options.custom) {
                                    me._eventPosition = {
                                        x: e.x,
                                        y: e.y
                                    };
                                    me.update(true);
                                    me.pivot();
                                }
                            }
                            return changed;
                        }
                    });
                    /**
                     * @namespace Chart.Tooltip.positioners
                     */
                    Chart.Tooltip.positioners = {
                        /**
                         * Average mode places the tooltip at the average position of the elements shown
                         * @function Chart.Tooltip.positioners.average
                         * @param elements {ChartElement[]} the elements being displayed in the tooltip
                         * @returns {Point} tooltip position
                         */
                        average: function (elements) {
                            if (!elements.length) {
                                return false;
                            }
                            var i, len;
                            var x = 0;
                            var y = 0;
                            var count = 0;
                            for (i = 0, len = elements.length; i < len; ++i) {
                                var el = elements[i];
                                if (el && el.hasValue()) {
                                    var pos = el.tooltipPosition();
                                    x += pos.x;
                                    y += pos.y;
                                    ++count;
                                }
                            }
                            return {
                                x: Math.round(x / count),
                                y: Math.round(y / count)
                            };
                        },
                        /**
                         * Gets the tooltip position nearest of the item nearest to the event position
                         * @function Chart.Tooltip.positioners.nearest
                         * @param elements {Chart.Element[]} the tooltip elements
                         * @param eventPosition {Point} the position of the event in canvas coordinates
                         * @returns {Point} the tooltip position
                         */
                        nearest: function (elements, eventPosition) {
                            var x = eventPosition.x;
                            var y = eventPosition.y;
                            var minDistance = Number.POSITIVE_INFINITY;
                            var i, len, nearestElement;
                            for (i = 0, len = elements.length; i < len; ++i) {
                                var el = elements[i];
                                if (el && el.hasValue()) {
                                    var center = el.getCenterPoint();
                                    var d = helpers.distanceBetweenPoints(eventPosition, center);
                                    if (d < minDistance) {
                                        minDistance = d;
                                        nearestElement = el;
                                    }
                                }
                            }
                            if (nearestElement) {
                                var tp = nearestElement.tooltipPosition();
                                x = tp.x;
                                y = tp.y;
                            }
                            return {
                                x: x,
                                y: y
                            };
                        }
                    };
                };
            }, { "25": 25, "26": 26, "45": 45 }], 36: [function (require, module, exports) {
                'use strict';
                var defaults = require(25);
                var Element = require(26);
                var helpers = require(45);
                defaults._set('global', {
                    elements: {
                        arc: {
                            backgroundColor: defaults.global.defaultColor,
                            borderColor: '#fff',
                            borderWidth: 2
                        }
                    }
                });
                module.exports = Element.extend({
                    inLabelRange: function (mouseX) {
                        var vm = this._view;
                        if (vm) {
                            return (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));
                        }
                        return false;
                    },
                    inRange: function (chartX, chartY) {
                        var vm = this._view;
                        if (vm) {
                            var pointRelativePosition = helpers.getAngleFromPoint(vm, { x: chartX, y: chartY });
                            var angle = pointRelativePosition.angle;
                            var distance = pointRelativePosition.distance;
                            // Sanitise angle range
                            var startAngle = vm.startAngle;
                            var endAngle = vm.endAngle;
                            while (endAngle < startAngle) {
                                endAngle += 2.0 * Math.PI;
                            }
                            while (angle > endAngle) {
                                angle -= 2.0 * Math.PI;
                            }
                            while (angle < startAngle) {
                                angle += 2.0 * Math.PI;
                            }
                            // Check if within the range of the open/close angle
                            var betweenAngles = (angle >= startAngle && angle <= endAngle);
                            var withinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);
                            return (betweenAngles && withinRadius);
                        }
                        return false;
                    },
                    getCenterPoint: function () {
                        var vm = this._view;
                        var halfAngle = (vm.startAngle + vm.endAngle) / 2;
                        var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
                        return {
                            x: vm.x + Math.cos(halfAngle) * halfRadius,
                            y: vm.y + Math.sin(halfAngle) * halfRadius
                        };
                    },
                    getArea: function () {
                        var vm = this._view;
                        return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
                    },
                    tooltipPosition: function () {
                        var vm = this._view;
                        var centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2);
                        var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;
                        return {
                            x: vm.x + (Math.cos(centreAngle) * rangeFromCentre),
                            y: vm.y + (Math.sin(centreAngle) * rangeFromCentre)
                        };
                    },
                    draw: function () {
                        var ctx = this._chart.ctx;
                        var vm = this._view;
                        var sA = vm.startAngle;
                        var eA = vm.endAngle;
                        ctx.beginPath();
                        ctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);
                        ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);
                        ctx.closePath();
                        ctx.strokeStyle = vm.borderColor;
                        ctx.lineWidth = vm.borderWidth;
                        ctx.fillStyle = vm.backgroundColor;
                        ctx.fill();
                        ctx.lineJoin = 'bevel';
                        if (vm.borderWidth) {
                            ctx.stroke();
                        }
                    }
                });
            }, { "25": 25, "26": 26, "45": 45 }], 37: [function (require, module, exports) {
                'use strict';
                var defaults = require(25);
                var Element = require(26);
                var helpers = require(45);
                var globalDefaults = defaults.global;
                defaults._set('global', {
                    elements: {
                        line: {
                            tension: 0.4,
                            backgroundColor: globalDefaults.defaultColor,
                            borderWidth: 3,
                            borderColor: globalDefaults.defaultColor,
                            borderCapStyle: 'butt',
                            borderDash: [],
                            borderDashOffset: 0.0,
                            borderJoinStyle: 'miter',
                            capBezierPoints: true,
                            fill: true,
                        }
                    }
                });
                module.exports = Element.extend({
                    draw: function () {
                        var me = this;
                        var vm = me._view;
                        var ctx = me._chart.ctx;
                        var spanGaps = vm.spanGaps;
                        var points = me._children.slice(); // clone array
                        var globalOptionLineElements = globalDefaults.elements.line;
                        var lastDrawnIndex = -1;
                        var index, current, previous, currentVM;
                        // If we are looping, adding the first point again
                        if (me._loop && points.length) {
                            points.push(points[0]);
                        }
                        ctx.save();
                        // Stroke Line Options
                        ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;
                        // IE 9 and 10 do not support line dash
                        if (ctx.setLineDash) {
                            ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
                        }
                        ctx.lineDashOffset = vm.borderDashOffset || globalOptionLineElements.borderDashOffset;
                        ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
                        ctx.lineWidth = vm.borderWidth || globalOptionLineElements.borderWidth;
                        ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;
                        // Stroke Line
                        ctx.beginPath();
                        lastDrawnIndex = -1;
                        for (index = 0; index < points.length; ++index) {
                            current = points[index];
                            previous = helpers.previousItem(points, index);
                            currentVM = current._view;
                            // First point moves to it's starting position no matter what
                            if (index === 0) {
                                if (!currentVM.skip) {
                                    ctx.moveTo(currentVM.x, currentVM.y);
                                    lastDrawnIndex = index;
                                }
                            }
                            else {
                                previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];
                                if (!currentVM.skip) {
                                    if ((lastDrawnIndex !== (index - 1) && !spanGaps) || lastDrawnIndex === -1) {
                                        // There was a gap and this is the first point after the gap
                                        ctx.moveTo(currentVM.x, currentVM.y);
                                    }
                                    else {
                                        // Line to next point
                                        helpers.canvas.lineTo(ctx, previous._view, current._view);
                                    }
                                    lastDrawnIndex = index;
                                }
                            }
                        }
                        ctx.stroke();
                        ctx.restore();
                    }
                });
            }, { "25": 25, "26": 26, "45": 45 }], 38: [function (require, module, exports) {
                'use strict';
                var defaults = require(25);
                var Element = require(26);
                var helpers = require(45);
                var defaultColor = defaults.global.defaultColor;
                defaults._set('global', {
                    elements: {
                        point: {
                            radius: 3,
                            pointStyle: 'circle',
                            backgroundColor: defaultColor,
                            borderColor: defaultColor,
                            borderWidth: 1,
                            // Hover
                            hitRadius: 1,
                            hoverRadius: 4,
                            hoverBorderWidth: 1
                        }
                    }
                });
                function xRange(mouseX) {
                    var vm = this._view;
                    return vm ? (Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius) : false;
                }
                function yRange(mouseY) {
                    var vm = this._view;
                    return vm ? (Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius) : false;
                }
                module.exports = Element.extend({
                    inRange: function (mouseX, mouseY) {
                        var vm = this._view;
                        return vm ? ((Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2)) < Math.pow(vm.hitRadius + vm.radius, 2)) : false;
                    },
                    inLabelRange: xRange,
                    inXRange: xRange,
                    inYRange: yRange,
                    getCenterPoint: function () {
                        var vm = this._view;
                        return {
                            x: vm.x,
                            y: vm.y
                        };
                    },
                    getArea: function () {
                        return Math.PI * Math.pow(this._view.radius, 2);
                    },
                    tooltipPosition: function () {
                        var vm = this._view;
                        return {
                            x: vm.x,
                            y: vm.y,
                            padding: vm.radius + vm.borderWidth
                        };
                    },
                    draw: function (chartArea) {
                        var vm = this._view;
                        var model = this._model;
                        var ctx = this._chart.ctx;
                        var pointStyle = vm.pointStyle;
                        var radius = vm.radius;
                        var x = vm.x;
                        var y = vm.y;
                        var color = helpers.color;
                        var errMargin = 1.01; // 1.01 is margin for Accumulated error. (Especially Edge, IE.)
                        var ratio = 0;
                        if (vm.skip) {
                            return;
                        }
                        ctx.strokeStyle = vm.borderColor || defaultColor;
                        ctx.lineWidth = helpers.valueOrDefault(vm.borderWidth, defaults.global.elements.point.borderWidth);
                        ctx.fillStyle = vm.backgroundColor || defaultColor;
                        // Cliping for Points.
                        // going out from inner charArea?
                        if ((chartArea !== undefined) && ((model.x < chartArea.left) || (chartArea.right * errMargin < model.x) || (model.y < chartArea.top) || (chartArea.bottom * errMargin < model.y))) {
                            // Point fade out
                            if (model.x < chartArea.left) {
                                ratio = (x - model.x) / (chartArea.left - model.x);
                            }
                            else if (chartArea.right * errMargin < model.x) {
                                ratio = (model.x - x) / (model.x - chartArea.right);
                            }
                            else if (model.y < chartArea.top) {
                                ratio = (y - model.y) / (chartArea.top - model.y);
                            }
                            else if (chartArea.bottom * errMargin < model.y) {
                                ratio = (model.y - y) / (model.y - chartArea.bottom);
                            }
                            ratio = Math.round(ratio * 100) / 100;
                            ctx.strokeStyle = color(ctx.strokeStyle).alpha(ratio).rgbString();
                            ctx.fillStyle = color(ctx.fillStyle).alpha(ratio).rgbString();
                        }
                        helpers.canvas.drawPoint(ctx, pointStyle, radius, x, y);
                    }
                });
            }, { "25": 25, "26": 26, "45": 45 }], 39: [function (require, module, exports) {
                'use strict';
                var defaults = require(25);
                var Element = require(26);
                defaults._set('global', {
                    elements: {
                        rectangle: {
                            backgroundColor: defaults.global.defaultColor,
                            borderColor: defaults.global.defaultColor,
                            borderSkipped: 'bottom',
                            borderWidth: 0
                        }
                    }
                });
                function isVertical(bar) {
                    return bar._view.width !== undefined;
                }
                /**
                 * Helper function to get the bounds of the bar regardless of the orientation
                 * @param bar {Chart.Element.Rectangle} the bar
                 * @return {Bounds} bounds of the bar
                 * @private
                 */
                function getBarBounds(bar) {
                    var vm = bar._view;
                    var x1, x2, y1, y2;
                    if (isVertical(bar)) {
                        // vertical
                        var halfWidth = vm.width / 2;
                        x1 = vm.x - halfWidth;
                        x2 = vm.x + halfWidth;
                        y1 = Math.min(vm.y, vm.base);
                        y2 = Math.max(vm.y, vm.base);
                    }
                    else {
                        // horizontal bar
                        var halfHeight = vm.height / 2;
                        x1 = Math.min(vm.x, vm.base);
                        x2 = Math.max(vm.x, vm.base);
                        y1 = vm.y - halfHeight;
                        y2 = vm.y + halfHeight;
                    }
                    return {
                        left: x1,
                        top: y1,
                        right: x2,
                        bottom: y2
                    };
                }
                module.exports = Element.extend({
                    draw: function () {
                        var ctx = this._chart.ctx;
                        var vm = this._view;
                        var left, right, top, bottom, signX, signY, borderSkipped;
                        var borderWidth = vm.borderWidth;
                        if (!vm.horizontal) {
                            // bar
                            left = vm.x - vm.width / 2;
                            right = vm.x + vm.width / 2;
                            top = vm.y;
                            bottom = vm.base;
                            signX = 1;
                            signY = bottom > top ? 1 : -1;
                            borderSkipped = vm.borderSkipped || 'bottom';
                        }
                        else {
                            // horizontal bar
                            left = vm.base;
                            right = vm.x;
                            top = vm.y - vm.height / 2;
                            bottom = vm.y + vm.height / 2;
                            signX = right > left ? 1 : -1;
                            signY = 1;
                            borderSkipped = vm.borderSkipped || 'left';
                        }
                        // Canvas doesn't allow us to stroke inside the width so we can
                        // adjust the sizes to fit if we're setting a stroke on the line
                        if (borderWidth) {
                            // borderWidth shold be less than bar width and bar height.
                            var barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));
                            borderWidth = borderWidth > barSize ? barSize : borderWidth;
                            var halfStroke = borderWidth / 2;
                            // Adjust borderWidth when bar top position is near vm.base(zero).
                            var borderLeft = left + (borderSkipped !== 'left' ? halfStroke * signX : 0);
                            var borderRight = right + (borderSkipped !== 'right' ? -halfStroke * signX : 0);
                            var borderTop = top + (borderSkipped !== 'top' ? halfStroke * signY : 0);
                            var borderBottom = bottom + (borderSkipped !== 'bottom' ? -halfStroke * signY : 0);
                            // not become a vertical line?
                            if (borderLeft !== borderRight) {
                                top = borderTop;
                                bottom = borderBottom;
                            }
                            // not become a horizontal line?
                            if (borderTop !== borderBottom) {
                                left = borderLeft;
                                right = borderRight;
                            }
                        }
                        ctx.beginPath();
                        ctx.fillStyle = vm.backgroundColor;
                        ctx.strokeStyle = vm.borderColor;
                        ctx.lineWidth = borderWidth;
                        // Corner points, from bottom-left to bottom-right clockwise
                        // | 1 2 |
                        // | 0 3 |
                        var corners = [
                            [left, bottom],
                            [left, top],
                            [right, top],
                            [right, bottom]
                        ];
                        // Find first (starting) corner with fallback to 'bottom'
                        var borders = ['bottom', 'left', 'top', 'right'];
                        var startCorner = borders.indexOf(borderSkipped, 0);
                        if (startCorner === -1) {
                            startCorner = 0;
                        }
                        function cornerAt(index) {
                            return corners[(startCorner + index) % 4];
                        }
                        // Draw rectangle from 'startCorner'
                        var corner = cornerAt(0);
                        ctx.moveTo(corner[0], corner[1]);
                        for (var i = 1; i < 4; i++) {
                            corner = cornerAt(i);
                            ctx.lineTo(corner[0], corner[1]);
                        }
                        ctx.fill();
                        if (borderWidth) {
                            ctx.stroke();
                        }
                    },
                    height: function () {
                        var vm = this._view;
                        return vm.base - vm.y;
                    },
                    inRange: function (mouseX, mouseY) {
                        var inRange = false;
                        if (this._view) {
                            var bounds = getBarBounds(this);
                            inRange = mouseX >= bounds.left && mouseX <= bounds.right && mouseY >= bounds.top && mouseY <= bounds.bottom;
                        }
                        return inRange;
                    },
                    inLabelRange: function (mouseX, mouseY) {
                        var me = this;
                        if (!me._view) {
                            return false;
                        }
                        var inRange = false;
                        var bounds = getBarBounds(me);
                        if (isVertical(me)) {
                            inRange = mouseX >= bounds.left && mouseX <= bounds.right;
                        }
                        else {
                            inRange = mouseY >= bounds.top && mouseY <= bounds.bottom;
                        }
                        return inRange;
                    },
                    inXRange: function (mouseX) {
                        var bounds = getBarBounds(this);
                        return mouseX >= bounds.left && mouseX <= bounds.right;
                    },
                    inYRange: function (mouseY) {
                        var bounds = getBarBounds(this);
                        return mouseY >= bounds.top && mouseY <= bounds.bottom;
                    },
                    getCenterPoint: function () {
                        var vm = this._view;
                        var x, y;
                        if (isVertical(this)) {
                            x = vm.x;
                            y = (vm.y + vm.base) / 2;
                        }
                        else {
                            x = (vm.x + vm.base) / 2;
                            y = vm.y;
                        }
                        return { x: x, y: y };
                    },
                    getArea: function () {
                        var vm = this._view;
                        return vm.width * Math.abs(vm.y - vm.base);
                    },
                    tooltipPosition: function () {
                        var vm = this._view;
                        return {
                            x: vm.x,
                            y: vm.y
                        };
                    }
                });
            }, { "25": 25, "26": 26 }], 40: [function (require, module, exports) {
                'use strict';
                module.exports = {};
                module.exports.Arc = require(36);
                module.exports.Line = require(37);
                module.exports.Point = require(38);
                module.exports.Rectangle = require(39);
            }, { "36": 36, "37": 37, "38": 38, "39": 39 }], 41: [function (require, module, exports) {
                'use strict';
                var helpers = require(42);
                /**
                 * @namespace Chart.helpers.canvas
                 */
                var exports = module.exports = {
                    /**
                     * Clears the entire canvas associated to the given `chart`.
                     * @param {Chart} chart - The chart for which to clear the canvas.
                     */
                    clear: function (chart) {
                        chart.ctx.clearRect(0, 0, chart.width, chart.height);
                    },
                    /**
                     * Creates a "path" for a rectangle with rounded corners at position (x, y) with a
                     * given size (width, height) and the same `radius` for all corners.
                     * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.
                     * @param {Number} x - The x axis of the coordinate for the rectangle starting point.
                     * @param {Number} y - The y axis of the coordinate for the rectangle starting point.
                     * @param {Number} width - The rectangle's width.
                     * @param {Number} height - The rectangle's height.
                     * @param {Number} radius - The rounded amount (in pixels) for the four corners.
                     * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?
                     */
                    roundedRect: function (ctx, x, y, width, height, radius) {
                        if (radius) {
                            var rx = Math.min(radius, width / 2);
                            var ry = Math.min(radius, height / 2);
                            ctx.moveTo(x + rx, y);
                            ctx.lineTo(x + width - rx, y);
                            ctx.quadraticCurveTo(x + width, y, x + width, y + ry);
                            ctx.lineTo(x + width, y + height - ry);
                            ctx.quadraticCurveTo(x + width, y + height, x + width - rx, y + height);
                            ctx.lineTo(x + rx, y + height);
                            ctx.quadraticCurveTo(x, y + height, x, y + height - ry);
                            ctx.lineTo(x, y + ry);
                            ctx.quadraticCurveTo(x, y, x + rx, y);
                        }
                        else {
                            ctx.rect(x, y, width, height);
                        }
                    },
                    drawPoint: function (ctx, style, radius, x, y) {
                        var type, edgeLength, xOffset, yOffset, height, size;
                        if (style && typeof style === 'object') {
                            type = style.toString();
                            if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
                                ctx.drawImage(style, x - style.width / 2, y - style.height / 2, style.width, style.height);
                                return;
                            }
                        }
                        if (isNaN(radius) || radius <= 0) {
                            return;
                        }
                        switch (style) {
                            // Default includes circle
                            default:
                                ctx.beginPath();
                                ctx.arc(x, y, radius, 0, Math.PI * 2);
                                ctx.closePath();
                                ctx.fill();
                                break;
                            case 'triangle':
                                ctx.beginPath();
                                edgeLength = 3 * radius / Math.sqrt(3);
                                height = edgeLength * Math.sqrt(3) / 2;
                                ctx.moveTo(x - edgeLength / 2, y + height / 3);
                                ctx.lineTo(x + edgeLength / 2, y + height / 3);
                                ctx.lineTo(x, y - 2 * height / 3);
                                ctx.closePath();
                                ctx.fill();
                                break;
                            case 'rect':
                                size = 1 / Math.SQRT2 * radius;
                                ctx.beginPath();
                                ctx.fillRect(x - size, y - size, 2 * size, 2 * size);
                                ctx.strokeRect(x - size, y - size, 2 * size, 2 * size);
                                break;
                            case 'rectRounded':
                                var offset = radius / Math.SQRT2;
                                var leftX = x - offset;
                                var topY = y - offset;
                                var sideSize = Math.SQRT2 * radius;
                                ctx.beginPath();
                                this.roundedRect(ctx, leftX, topY, sideSize, sideSize, radius / 2);
                                ctx.closePath();
                                ctx.fill();
                                break;
                            case 'rectRot':
                                size = 1 / Math.SQRT2 * radius;
                                ctx.beginPath();
                                ctx.moveTo(x - size, y);
                                ctx.lineTo(x, y + size);
                                ctx.lineTo(x + size, y);
                                ctx.lineTo(x, y - size);
                                ctx.closePath();
                                ctx.fill();
                                break;
                            case 'cross':
                                ctx.beginPath();
                                ctx.moveTo(x, y + radius);
                                ctx.lineTo(x, y - radius);
                                ctx.moveTo(x - radius, y);
                                ctx.lineTo(x + radius, y);
                                ctx.closePath();
                                break;
                            case 'crossRot':
                                ctx.beginPath();
                                xOffset = Math.cos(Math.PI / 4) * radius;
                                yOffset = Math.sin(Math.PI / 4) * radius;
                                ctx.moveTo(x - xOffset, y - yOffset);
                                ctx.lineTo(x + xOffset, y + yOffset);
                                ctx.moveTo(x - xOffset, y + yOffset);
                                ctx.lineTo(x + xOffset, y - yOffset);
                                ctx.closePath();
                                break;
                            case 'star':
                                ctx.beginPath();
                                ctx.moveTo(x, y + radius);
                                ctx.lineTo(x, y - radius);
                                ctx.moveTo(x - radius, y);
                                ctx.lineTo(x + radius, y);
                                xOffset = Math.cos(Math.PI / 4) * radius;
                                yOffset = Math.sin(Math.PI / 4) * radius;
                                ctx.moveTo(x - xOffset, y - yOffset);
                                ctx.lineTo(x + xOffset, y + yOffset);
                                ctx.moveTo(x - xOffset, y + yOffset);
                                ctx.lineTo(x + xOffset, y - yOffset);
                                ctx.closePath();
                                break;
                            case 'line':
                                ctx.beginPath();
                                ctx.moveTo(x - radius, y);
                                ctx.lineTo(x + radius, y);
                                ctx.closePath();
                                break;
                            case 'dash':
                                ctx.beginPath();
                                ctx.moveTo(x, y);
                                ctx.lineTo(x + radius, y);
                                ctx.closePath();
                                break;
                        }
                        ctx.stroke();
                    },
                    clipArea: function (ctx, area) {
                        ctx.save();
                        ctx.beginPath();
                        ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
                        ctx.clip();
                    },
                    unclipArea: function (ctx) {
                        ctx.restore();
                    },
                    lineTo: function (ctx, previous, target, flip) {
                        if (target.steppedLine) {
                            if ((target.steppedLine === 'after' && !flip) || (target.steppedLine !== 'after' && flip)) {
                                ctx.lineTo(previous.x, target.y);
                            }
                            else {
                                ctx.lineTo(target.x, previous.y);
                            }
                            ctx.lineTo(target.x, target.y);
                            return;
                        }
                        if (!target.tension) {
                            ctx.lineTo(target.x, target.y);
                            return;
                        }
                        ctx.bezierCurveTo(flip ? previous.controlPointPreviousX : previous.controlPointNextX, flip ? previous.controlPointPreviousY : previous.controlPointNextY, flip ? target.controlPointNextX : target.controlPointPreviousX, flip ? target.controlPointNextY : target.controlPointPreviousY, target.x, target.y);
                    }
                };
                // DEPRECATIONS
                /**
                 * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.
                 * @namespace Chart.helpers.clear
                 * @deprecated since version 2.7.0
                 * @todo remove at version 3
                 * @private
                 */
                helpers.clear = exports.clear;
                /**
                 * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.
                 * @namespace Chart.helpers.drawRoundedRectangle
                 * @deprecated since version 2.7.0
                 * @todo remove at version 3
                 * @private
                 */
                helpers.drawRoundedRectangle = function (ctx) {
                    ctx.beginPath();
                    exports.roundedRect.apply(exports, arguments);
                    ctx.closePath();
                };
            }, { "42": 42 }], 42: [function (require, module, exports) {
                'use strict';
                /**
                 * @namespace Chart.helpers
                 */
                var helpers = {
                    /**
                     * An empty function that can be used, for example, for optional callback.
                     */
                    noop: function () { },
                    /**
                     * Returns a unique id, sequentially generated from a global variable.
                     * @returns {Number}
                     * @function
                     */
                    uid: (function () {
                        var id = 0;
                        return function () {
                            return id++;
                        };
                    }()),
                    /**
                     * Returns true if `value` is neither null nor undefined, else returns false.
                     * @param {*} value - The value to test.
                     * @returns {Boolean}
                     * @since 2.7.0
                     */
                    isNullOrUndef: function (value) {
                        return value === null || typeof value === 'undefined';
                    },
                    /**
                     * Returns true if `value` is an array, else returns false.
                     * @param {*} value - The value to test.
                     * @returns {Boolean}
                     * @function
                     */
                    isArray: Array.isArray ? Array.isArray : function (value) {
                        return Object.prototype.toString.call(value) === '[object Array]';
                    },
                    /**
                     * Returns true if `value` is an object (excluding null), else returns false.
                     * @param {*} value - The value to test.
                     * @returns {Boolean}
                     * @since 2.7.0
                     */
                    isObject: function (value) {
                        return value !== null && Object.prototype.toString.call(value) === '[object Object]';
                    },
                    /**
                     * Returns `value` if defined, else returns `defaultValue`.
                     * @param {*} value - The value to return if defined.
                     * @param {*} defaultValue - The value to return if `value` is undefined.
                     * @returns {*}
                     */
                    valueOrDefault: function (value, defaultValue) {
                        return typeof value === 'undefined' ? defaultValue : value;
                    },
                    /**
                     * Returns value at the given `index` in array if defined, else returns `defaultValue`.
                     * @param {Array} value - The array to lookup for value at `index`.
                     * @param {Number} index - The index in `value` to lookup for value.
                     * @param {*} defaultValue - The value to return if `value[index]` is undefined.
                     * @returns {*}
                     */
                    valueAtIndexOrDefault: function (value, index, defaultValue) {
                        return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);
                    },
                    /**
                     * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
                     * value returned by `fn`. If `fn` is not a function, this method returns undefined.
                     * @param {Function} fn - The function to call.
                     * @param {Array|undefined|null} args - The arguments with which `fn` should be called.
                     * @param {Object} [thisArg] - The value of `this` provided for the call to `fn`.
                     * @returns {*}
                     */
                    callback: function (fn, args, thisArg) {
                        if (fn && typeof fn.call === 'function') {
                            return fn.apply(thisArg, args);
                        }
                    },
                    /**
                     * Note(SB) for performance sake, this method should only be used when loopable type
                     * is unknown or in none intensive code (not called often and small loopable). Else
                     * it's preferable to use a regular for() loop and save extra function calls.
                     * @param {Object|Array} loopable - The object or array to be iterated.
                     * @param {Function} fn - The function to call for each item.
                     * @param {Object} [thisArg] - The value of `this` provided for the call to `fn`.
                     * @param {Boolean} [reverse] - If true, iterates backward on the loopable.
                     */
                    each: function (loopable, fn, thisArg, reverse) {
                        var i, len, keys;
                        if (helpers.isArray(loopable)) {
                            len = loopable.length;
                            if (reverse) {
                                for (i = len - 1; i >= 0; i--) {
                                    fn.call(thisArg, loopable[i], i);
                                }
                            }
                            else {
                                for (i = 0; i < len; i++) {
                                    fn.call(thisArg, loopable[i], i);
                                }
                            }
                        }
                        else if (helpers.isObject(loopable)) {
                            keys = Object.keys(loopable);
                            len = keys.length;
                            for (i = 0; i < len; i++) {
                                fn.call(thisArg, loopable[keys[i]], keys[i]);
                            }
                        }
                    },
                    /**
                     * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
                     * @see http://stackoverflow.com/a/14853974
                     * @param {Array} a0 - The array to compare
                     * @param {Array} a1 - The array to compare
                     * @returns {Boolean}
                     */
                    arrayEquals: function (a0, a1) {
                        var i, ilen, v0, v1;
                        if (!a0 || !a1 || a0.length !== a1.length) {
                            return false;
                        }
                        for (i = 0, ilen = a0.length; i < ilen; ++i) {
                            v0 = a0[i];
                            v1 = a1[i];
                            if (v0 instanceof Array && v1 instanceof Array) {
                                if (!helpers.arrayEquals(v0, v1)) {
                                    return false;
                                }
                            }
                            else if (v0 !== v1) {
                                // NOTE: two different object instances will never be equal: {x:20} != {x:20}
                                return false;
                            }
                        }
                        return true;
                    },
                    /**
                     * Returns a deep copy of `source` without keeping references on objects and arrays.
                     * @param {*} source - The value to clone.
                     * @returns {*}
                     */
                    clone: function (source) {
                        if (helpers.isArray(source)) {
                            return source.map(helpers.clone);
                        }
                        if (helpers.isObject(source)) {
                            var target = {};
                            var keys = Object.keys(source);
                            var klen = keys.length;
                            var k = 0;
                            for (; k < klen; ++k) {
                                target[keys[k]] = helpers.clone(source[keys[k]]);
                            }
                            return target;
                        }
                        return source;
                    },
                    /**
                     * The default merger when Chart.helpers.merge is called without merger option.
                     * Note(SB): this method is also used by configMerge and scaleMerge as fallback.
                     * @private
                     */
                    _merger: function (key, target, source, options) {
                        var tval = target[key];
                        var sval = source[key];
                        if (helpers.isObject(tval) && helpers.isObject(sval)) {
                            helpers.merge(tval, sval, options);
                        }
                        else {
                            target[key] = helpers.clone(sval);
                        }
                    },
                    /**
                     * Merges source[key] in target[key] only if target[key] is undefined.
                     * @private
                     */
                    _mergerIf: function (key, target, source) {
                        var tval = target[key];
                        var sval = source[key];
                        if (helpers.isObject(tval) && helpers.isObject(sval)) {
                            helpers.mergeIf(tval, sval);
                        }
                        else if (!target.hasOwnProperty(key)) {
                            target[key] = helpers.clone(sval);
                        }
                    },
                    /**
                     * Recursively deep copies `source` properties into `target` with the given `options`.
                     * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
                     * @param {Object} target - The target object in which all sources are merged into.
                     * @param {Object|Array(Object)} source - Object(s) to merge into `target`.
                     * @param {Object} [options] - Merging options:
                     * @param {Function} [options.merger] - The merge method (key, target, source, options)
                     * @returns {Object} The `target` object.
                     */
                    merge: function (target, source, options) {
                        var sources = helpers.isArray(source) ? source : [source];
                        var ilen = sources.length;
                        var merge, i, keys, klen, k;
                        if (!helpers.isObject(target)) {
                            return target;
                        }
                        options = options || {};
                        merge = options.merger || helpers._merger;
                        for (i = 0; i < ilen; ++i) {
                            source = sources[i];
                            if (!helpers.isObject(source)) {
                                continue;
                            }
                            keys = Object.keys(source);
                            for (k = 0, klen = keys.length; k < klen; ++k) {
                                merge(keys[k], target, source, options);
                            }
                        }
                        return target;
                    },
                    /**
                     * Recursively deep copies `source` properties into `target` *only* if not defined in target.
                     * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
                     * @param {Object} target - The target object in which all sources are merged into.
                     * @param {Object|Array(Object)} source - Object(s) to merge into `target`.
                     * @returns {Object} The `target` object.
                     */
                    mergeIf: function (target, source) {
                        return helpers.merge(target, source, { merger: helpers._mergerIf });
                    },
                    /**
                     * Applies the contents of two or more objects together into the first object.
                     * @param {Object} target - The target object in which all objects are merged into.
                     * @param {Object} arg1 - Object containing additional properties to merge in target.
                     * @param {Object} argN - Additional objects containing properties to merge in target.
                     * @returns {Object} The `target` object.
                     */
                    extend: function (target) {
                        var setFn = function (value, key) {
                            target[key] = value;
                        };
                        for (var i = 1, ilen = arguments.length; i < ilen; ++i) {
                            helpers.each(arguments[i], setFn);
                        }
                        return target;
                    },
                    /**
                     * Basic javascript inheritance based on the model created in Backbone.js
                     */
                    inherits: function (extensions) {
                        var me = this;
                        var ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function () {
                            return me.apply(this, arguments);
                        };
                        var Surrogate = function () {
                            this.constructor = ChartElement;
                        };
                        Surrogate.prototype = me.prototype;
                        ChartElement.prototype = new Surrogate();
                        ChartElement.extend = helpers.inherits;
                        if (extensions) {
                            helpers.extend(ChartElement.prototype, extensions);
                        }
                        ChartElement.__super__ = me.prototype;
                        return ChartElement;
                    }
                };
                module.exports = helpers;
                // DEPRECATIONS
                /**
                 * Provided for backward compatibility, use Chart.helpers.callback instead.
                 * @function Chart.helpers.callCallback
                 * @deprecated since version 2.6.0
                 * @todo remove at version 3
                 * @private
                 */
                helpers.callCallback = helpers.callback;
                /**
                 * Provided for backward compatibility, use Array.prototype.indexOf instead.
                 * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+
                 * @function Chart.helpers.indexOf
                 * @deprecated since version 2.7.0
                 * @todo remove at version 3
                 * @private
                 */
                helpers.indexOf = function (array, item, fromIndex) {
                    return Array.prototype.indexOf.call(array, item, fromIndex);
                };
                /**
                 * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.
                 * @function Chart.helpers.getValueOrDefault
                 * @deprecated since version 2.7.0
                 * @todo remove at version 3
                 * @private
                 */
                helpers.getValueOrDefault = helpers.valueOrDefault;
                /**
                 * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.
                 * @function Chart.helpers.getValueAtIndexOrDefault
                 * @deprecated since version 2.7.0
                 * @todo remove at version 3
                 * @private
                 */
                helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;
            }, {}], 43: [function (require, module, exports) {
                'use strict';
                var helpers = require(42);
                /**
                 * Easing functions adapted from Robert Penner's easing equations.
                 * @namespace Chart.helpers.easingEffects
                 * @see http://www.robertpenner.com/easing/
                 */
                var effects = {
                    linear: function (t) {
                        return t;
                    },
                    easeInQuad: function (t) {
                        return t * t;
                    },
                    easeOutQuad: function (t) {
                        return -t * (t - 2);
                    },
                    easeInOutQuad: function (t) {
                        if ((t /= 0.5) < 1) {
                            return 0.5 * t * t;
                        }
                        return -0.5 * ((--t) * (t - 2) - 1);
                    },
                    easeInCubic: function (t) {
                        return t * t * t;
                    },
                    easeOutCubic: function (t) {
                        return (t = t - 1) * t * t + 1;
                    },
                    easeInOutCubic: function (t) {
                        if ((t /= 0.5) < 1) {
                            return 0.5 * t * t * t;
                        }
                        return 0.5 * ((t -= 2) * t * t + 2);
                    },
                    easeInQuart: function (t) {
                        return t * t * t * t;
                    },
                    easeOutQuart: function (t) {
                        return -((t = t - 1) * t * t * t - 1);
                    },
                    easeInOutQuart: function (t) {
                        if ((t /= 0.5) < 1) {
                            return 0.5 * t * t * t * t;
                        }
                        return -0.5 * ((t -= 2) * t * t * t - 2);
                    },
                    easeInQuint: function (t) {
                        return t * t * t * t * t;
                    },
                    easeOutQuint: function (t) {
                        return (t = t - 1) * t * t * t * t + 1;
                    },
                    easeInOutQuint: function (t) {
                        if ((t /= 0.5) < 1) {
                            return 0.5 * t * t * t * t * t;
                        }
                        return 0.5 * ((t -= 2) * t * t * t * t + 2);
                    },
                    easeInSine: function (t) {
                        return -Math.cos(t * (Math.PI / 2)) + 1;
                    },
                    easeOutSine: function (t) {
                        return Math.sin(t * (Math.PI / 2));
                    },
                    easeInOutSine: function (t) {
                        return -0.5 * (Math.cos(Math.PI * t) - 1);
                    },
                    easeInExpo: function (t) {
                        return (t === 0) ? 0 : Math.pow(2, 10 * (t - 1));
                    },
                    easeOutExpo: function (t) {
                        return (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1;
                    },
                    easeInOutExpo: function (t) {
                        if (t === 0) {
                            return 0;
                        }
                        if (t === 1) {
                            return 1;
                        }
                        if ((t /= 0.5) < 1) {
                            return 0.5 * Math.pow(2, 10 * (t - 1));
                        }
                        return 0.5 * (-Math.pow(2, -10 * --t) + 2);
                    },
                    easeInCirc: function (t) {
                        if (t >= 1) {
                            return t;
                        }
                        return -(Math.sqrt(1 - t * t) - 1);
                    },
                    easeOutCirc: function (t) {
                        return Math.sqrt(1 - (t = t - 1) * t);
                    },
                    easeInOutCirc: function (t) {
                        if ((t /= 0.5) < 1) {
                            return -0.5 * (Math.sqrt(1 - t * t) - 1);
                        }
                        return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
                    },
                    easeInElastic: function (t) {
                        var s = 1.70158;
                        var p = 0;
                        var a = 1;
                        if (t === 0) {
                            return 0;
                        }
                        if (t === 1) {
                            return 1;
                        }
                        if (!p) {
                            p = 0.3;
                        }
                        if (a < 1) {
                            a = 1;
                            s = p / 4;
                        }
                        else {
                            s = p / (2 * Math.PI) * Math.asin(1 / a);
                        }
                        return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
                    },
                    easeOutElastic: function (t) {
                        var s = 1.70158;
                        var p = 0;
                        var a = 1;
                        if (t === 0) {
                            return 0;
                        }
                        if (t === 1) {
                            return 1;
                        }
                        if (!p) {
                            p = 0.3;
                        }
                        if (a < 1) {
                            a = 1;
                            s = p / 4;
                        }
                        else {
                            s = p / (2 * Math.PI) * Math.asin(1 / a);
                        }
                        return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;
                    },
                    easeInOutElastic: function (t) {
                        var s = 1.70158;
                        var p = 0;
                        var a = 1;
                        if (t === 0) {
                            return 0;
                        }
                        if ((t /= 0.5) === 2) {
                            return 1;
                        }
                        if (!p) {
                            p = 0.45;
                        }
                        if (a < 1) {
                            a = 1;
                            s = p / 4;
                        }
                        else {
                            s = p / (2 * Math.PI) * Math.asin(1 / a);
                        }
                        if (t < 1) {
                            return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
                        }
                        return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;
                    },
                    easeInBack: function (t) {
                        var s = 1.70158;
                        return t * t * ((s + 1) * t - s);
                    },
                    easeOutBack: function (t) {
                        var s = 1.70158;
                        return (t = t - 1) * t * ((s + 1) * t + s) + 1;
                    },
                    easeInOutBack: function (t) {
                        var s = 1.70158;
                        if ((t /= 0.5) < 1) {
                            return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));
                        }
                        return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
                    },
                    easeInBounce: function (t) {
                        return 1 - effects.easeOutBounce(1 - t);
                    },
                    easeOutBounce: function (t) {
                        if (t < (1 / 2.75)) {
                            return 7.5625 * t * t;
                        }
                        if (t < (2 / 2.75)) {
                            return 7.5625 * (t -= (1.5 / 2.75)) * t + 0.75;
                        }
                        if (t < (2.5 / 2.75)) {
                            return 7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375;
                        }
                        return 7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375;
                    },
                    easeInOutBounce: function (t) {
                        if (t < 0.5) {
                            return effects.easeInBounce(t * 2) * 0.5;
                        }
                        return effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;
                    }
                };
                module.exports = {
                    effects: effects
                };
                // DEPRECATIONS
                /**
                 * Provided for backward compatibility, use Chart.helpers.easing.effects instead.
                 * @function Chart.helpers.easingEffects
                 * @deprecated since version 2.7.0
                 * @todo remove at version 3
                 * @private
                 */
                helpers.easingEffects = effects;
            }, { "42": 42 }], 44: [function (require, module, exports) {
                'use strict';
                var helpers = require(42);
                /**
                 * @alias Chart.helpers.options
                 * @namespace
                 */
                module.exports = {
                    /**
                     * Converts the given line height `value` in pixels for a specific font `size`.
                     * @param {Number|String} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
                     * @param {Number} size - The font size (in pixels) used to resolve relative `value`.
                     * @returns {Number} The effective line height in pixels (size * 1.2 if value is invalid).
                     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
                     * @since 2.7.0
                     */
                    toLineHeight: function (value, size) {
                        var matches = ('' + value).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
                        if (!matches || matches[1] === 'normal') {
                            return size * 1.2;
                        }
                        value = +matches[2];
                        switch (matches[3]) {
                            case 'px':
                                return value;
                            case '%':
                                value /= 100;
                                break;
                            default:
                                break;
                        }
                        return size * value;
                    },
                    /**
                     * Converts the given value into a padding object with pre-computed width/height.
                     * @param {Number|Object} value - If a number, set the value to all TRBL component,
                     *  else, if and object, use defined properties and sets undefined ones to 0.
                     * @returns {Object} The padding values (top, right, bottom, left, width, height)
                     * @since 2.7.0
                     */
                    toPadding: function (value) {
                        var t, r, b, l;
                        if (helpers.isObject(value)) {
                            t = +value.top || 0;
                            r = +value.right || 0;
                            b = +value.bottom || 0;
                            l = +value.left || 0;
                        }
                        else {
                            t = r = b = l = +value || 0;
                        }
                        return {
                            top: t,
                            right: r,
                            bottom: b,
                            left: l,
                            height: t + b,
                            width: l + r
                        };
                    },
                    /**
                     * Evaluates the given `inputs` sequentially and returns the first defined value.
                     * @param {Array[]} inputs - An array of values, falling back to the last value.
                     * @param {Object} [context] - If defined and the current value is a function, the value
                     * is called with `context` as first argument and the result becomes the new input.
                     * @param {Number} [index] - If defined and the current value is an array, the value
                     * at `index` become the new input.
                     * @since 2.7.0
                     */
                    resolve: function (inputs, context, index) {
                        var i, ilen, value;
                        for (i = 0, ilen = inputs.length; i < ilen; ++i) {
                            value = inputs[i];
                            if (value === undefined) {
                                continue;
                            }
                            if (context !== undefined && typeof value === 'function') {
                                value = value(context);
                            }
                            if (index !== undefined && helpers.isArray(value)) {
                                value = value[index];
                            }
                            if (value !== undefined) {
                                return value;
                            }
                        }
                    }
                };
            }, { "42": 42 }], 45: [function (require, module, exports) {
                'use strict';
                module.exports = require(42);
                module.exports.easing = require(43);
                module.exports.canvas = require(41);
                module.exports.options = require(44);
            }, { "41": 41, "42": 42, "43": 43, "44": 44 }], 46: [function (require, module, exports) {
                /**
                 * Platform fallback implementation (minimal).
                 * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939
                 */
                module.exports = {
                    acquireContext: function (item) {
                        if (item && item.canvas) {
                            // Support for any object associated to a canvas (including a context2d)
                            item = item.canvas;
                        }
                        return item && item.getContext('2d') || null;
                    }
                };
            }, {}], 47: [function (require, module, exports) {
                /**
                 * Chart.Platform implementation for targeting a web browser
                 */
                'use strict';
                var helpers = require(45);
                var EXPANDO_KEY = '$chartjs';
                var CSS_PREFIX = 'chartjs-';
                var CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';
                var CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';
                var ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];
                /**
                 * DOM event types -> Chart.js event types.
                 * Note: only events with different types are mapped.
                 * @see https://developer.mozilla.org/en-US/docs/Web/Events
                 */
                var EVENT_TYPES = {
                    touchstart: 'mousedown',
                    touchmove: 'mousemove',
                    touchend: 'mouseup',
                    pointerenter: 'mouseenter',
                    pointerdown: 'mousedown',
                    pointermove: 'mousemove',
                    pointerup: 'mouseup',
                    pointerleave: 'mouseout',
                    pointerout: 'mouseout'
                };
                /**
                 * The "used" size is the final value of a dimension property after all calculations have
                 * been performed. This method uses the computed style of `element` but returns undefined
                 * if the computed style is not expressed in pixels. That can happen in some cases where
                 * `element` has a size relative to its parent and this last one is not yet displayed,
                 * for example because of `display: none` on a parent node.
                 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
                 * @returns {Number} Size in pixels or undefined if unknown.
                 */
                function readUsedSize(element, property) {
                    var value = helpers.getStyle(element, property);
                    var matches = value && value.match(/^(\d+)(\.\d+)?px$/);
                    return matches ? Number(matches[1]) : undefined;
                }
                /**
                 * Initializes the canvas style and render size without modifying the canvas display size,
                 * since responsiveness is handled by the controller.resize() method. The config is used
                 * to determine the aspect ratio to apply in case no explicit height has been specified.
                 */
                function initCanvas(canvas, config) {
                    var style = canvas.style;
                    // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it
                    // returns null or '' if no explicit value has been set to the canvas attribute.
                    var renderHeight = canvas.getAttribute('height');
                    var renderWidth = canvas.getAttribute('width');
                    // Chart.js modifies some canvas values that we want to restore on destroy
                    canvas[EXPANDO_KEY] = {
                        initial: {
                            height: renderHeight,
                            width: renderWidth,
                            style: {
                                display: style.display,
                                height: style.height,
                                width: style.width
                            }
                        }
                    };
                    // Force canvas to display as block to avoid extra space caused by inline
                    // elements, which would interfere with the responsive resize process.
                    // https://github.com/chartjs/Chart.js/issues/2538
                    style.display = style.display || 'block';
                    if (renderWidth === null || renderWidth === '') {
                        var displayWidth = readUsedSize(canvas, 'width');
                        if (displayWidth !== undefined) {
                            canvas.width = displayWidth;
                        }
                    }
                    if (renderHeight === null || renderHeight === '') {
                        if (canvas.style.height === '') {
                            // If no explicit render height and style height, let's apply the aspect ratio,
                            // which one can be specified by the user but also by charts as default option
                            // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.
                            canvas.height = canvas.width / (config.options.aspectRatio || 2);
                        }
                        else {
                            var displayHeight = readUsedSize(canvas, 'height');
                            if (displayWidth !== undefined) {
                                canvas.height = displayHeight;
                            }
                        }
                    }
                    return canvas;
                }
                /**
                 * Detects support for options object argument in addEventListener.
                 * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
                 * @private
                 */
                var supportsEventListenerOptions = (function () {
                    var supports = false;
                    try {
                        var options = Object.defineProperty({}, 'passive', {
                            get: function () {
                                supports = true;
                            }
                        });
                        window.addEventListener('e', null, options);
                    }
                    catch (e) {
                        // continue regardless of error
                    }
                    return supports;
                }());
                // Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.
                // https://github.com/chartjs/Chart.js/issues/4287
                var eventListenerOptions = supportsEventListenerOptions ? { passive: true } : false;
                function addEventListener(node, type, listener) {
                    node.addEventListener(type, listener, eventListenerOptions);
                }
                function removeEventListener(node, type, listener) {
                    node.removeEventListener(type, listener, eventListenerOptions);
                }
                function createEvent(type, chart, x, y, nativeEvent) {
                    return {
                        type: type,
                        chart: chart,
                        native: nativeEvent || null,
                        x: x !== undefined ? x : null,
                        y: y !== undefined ? y : null,
                    };
                }
                function fromNativeEvent(event, chart) {
                    var type = EVENT_TYPES[event.type] || event.type;
                    var pos = helpers.getRelativePosition(event, chart);
                    return createEvent(type, chart, pos.x, pos.y, event);
                }
                function throttled(fn, thisArg) {
                    var ticking = false;
                    var args = [];
                    return function () {
                        args = Array.prototype.slice.call(arguments);
                        thisArg = thisArg || this;
                        if (!ticking) {
                            ticking = true;
                            helpers.requestAnimFrame.call(window, function () {
                                ticking = false;
                                fn.apply(thisArg, args);
                            });
                        }
                    };
                }
                // Implementation based on https://github.com/marcj/css-element-queries
                function createResizer(handler) {
                    var resizer = document.createElement('div');
                    var cls = CSS_PREFIX + 'size-monitor';
                    var maxSize = 1000000;
                    var style = 'position:absolute;' +
                        'left:0;' +
                        'top:0;' +
                        'right:0;' +
                        'bottom:0;' +
                        'overflow:hidden;' +
                        'pointer-events:none;' +
                        'visibility:hidden;' +
                        'z-index:-1;';
                    resizer.style.cssText = style;
                    resizer.className = cls;
                    resizer.innerHTML =
                        '<div class="' + cls + '-expand" style="' + style + '">' +
                            '<div style="' +
                            'position:absolute;' +
                            'width:' + maxSize + 'px;' +
                            'height:' + maxSize + 'px;' +
                            'left:0;' +
                            'top:0">' +
                            '</div>' +
                            '</div>' +
                            '<div class="' + cls + '-shrink" style="' + style + '">' +
                            '<div style="' +
                            'position:absolute;' +
                            'width:200%;' +
                            'height:200%;' +
                            'left:0; ' +
                            'top:0">' +
                            '</div>' +
                            '</div>';
                    var expand = resizer.childNodes[0];
                    var shrink = resizer.childNodes[1];
                    resizer._reset = function () {
                        expand.scrollLeft = maxSize;
                        expand.scrollTop = maxSize;
                        shrink.scrollLeft = maxSize;
                        shrink.scrollTop = maxSize;
                    };
                    var onScroll = function () {
                        resizer._reset();
                        handler();
                    };
                    addEventListener(expand, 'scroll', onScroll.bind(expand, 'expand'));
                    addEventListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));
                    return resizer;
                }
                // https://davidwalsh.name/detect-node-insertion
                function watchForRender(node, handler) {
                    var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
                    var proxy = expando.renderProxy = function (e) {
                        if (e.animationName === CSS_RENDER_ANIMATION) {
                            handler();
                        }
                    };
                    helpers.each(ANIMATION_START_EVENTS, function (type) {
                        addEventListener(node, type, proxy);
                    });
                    // #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class
                    // is removed then added back immediately (same animation frame?). Accessing the
                    // `offsetParent` property will force a reflow and re-evaluate the CSS animation.
                    // https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics
                    // https://github.com/chartjs/Chart.js/issues/4737
                    expando.reflow = !!node.offsetParent;
                    node.classList.add(CSS_RENDER_MONITOR);
                }
                function unwatchForRender(node) {
                    var expando = node[EXPANDO_KEY] || {};
                    var proxy = expando.renderProxy;
                    if (proxy) {
                        helpers.each(ANIMATION_START_EVENTS, function (type) {
                            removeEventListener(node, type, proxy);
                        });
                        delete expando.renderProxy;
                    }
                    node.classList.remove(CSS_RENDER_MONITOR);
                }
                function addResizeListener(node, listener, chart) {
                    var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
                    // Let's keep track of this added resizer and thus avoid DOM query when removing it.
                    var resizer = expando.resizer = createResizer(throttled(function () {
                        if (expando.resizer) {
                            return listener(createEvent('resize', chart));
                        }
                    }));
                    // The resizer needs to be attached to the node parent, so we first need to be
                    // sure that `node` is attached to the DOM before injecting the resizer element.
                    watchForRender(node, function () {
                        if (expando.resizer) {
                            var container = node.parentNode;
                            if (container && container !== resizer.parentNode) {
                                container.insertBefore(resizer, container.firstChild);
                            }
                            // The container size might have changed, let's reset the resizer state.
                            resizer._reset();
                        }
                    });
                }
                function removeResizeListener(node) {
                    var expando = node[EXPANDO_KEY] || {};
                    var resizer = expando.resizer;
                    delete expando.resizer;
                    unwatchForRender(node);
                    if (resizer && resizer.parentNode) {
                        resizer.parentNode.removeChild(resizer);
                    }
                }
                function injectCSS(platform, css) {
                    // http://stackoverflow.com/q/3922139
                    var style = platform._style || document.createElement('style');
                    if (!platform._style) {
                        platform._style = style;
                        css = '/* Chart.js */\n' + css;
                        style.setAttribute('type', 'text/css');
                        document.getElementsByTagName('head')[0].appendChild(style);
                    }
                    style.appendChild(document.createTextNode(css));
                }
                module.exports = {
                    /**
                     * This property holds whether this platform is enabled for the current environment.
                     * Currently used by platform.js to select the proper implementation.
                     * @private
                     */
                    _enabled: typeof window !== 'undefined' && typeof document !== 'undefined',
                    initialize: function () {
                        var keyframes = 'from{opacity:0.99}to{opacity:1}';
                        injectCSS(this, 
                        // DOM rendering detection
                        // https://davidwalsh.name/detect-node-insertion
                        '@-webkit-keyframes ' + CSS_RENDER_ANIMATION + '{' + keyframes + '}' +
                            '@keyframes ' + CSS_RENDER_ANIMATION + '{' + keyframes + '}' +
                            '.' + CSS_RENDER_MONITOR + '{' +
                            '-webkit-animation:' + CSS_RENDER_ANIMATION + ' 0.001s;' +
                            'animation:' + CSS_RENDER_ANIMATION + ' 0.001s;' +
                            '}');
                    },
                    acquireContext: function (item, config) {
                        if (typeof item === 'string') {
                            item = document.getElementById(item);
                        }
                        else if (item.length) {
                            // Support for array based queries (such as jQuery)
                            item = item[0];
                        }
                        if (item && item.canvas) {
                            // Support for any object associated to a canvas (including a context2d)
                            item = item.canvas;
                        }
                        // To prevent canvas fingerprinting, some add-ons undefine the getContext
                        // method, for example: https://github.com/kkapsner/CanvasBlocker
                        // https://github.com/chartjs/Chart.js/issues/2807
                        var context = item && item.getContext && item.getContext('2d');
                        // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is
                        // inside an iframe or when running in a protected environment. We could guess the
                        // types from their toString() value but let's keep things flexible and assume it's
                        // a sufficient condition if the item has a context2D which has item as `canvas`.
                        // https://github.com/chartjs/Chart.js/issues/3887
                        // https://github.com/chartjs/Chart.js/issues/4102
                        // https://github.com/chartjs/Chart.js/issues/4152
                        if (context && context.canvas === item) {
                            initCanvas(item, config);
                            return context;
                        }
                        return null;
                    },
                    releaseContext: function (context) {
                        var canvas = context.canvas;
                        if (!canvas[EXPANDO_KEY]) {
                            return;
                        }
                        var initial = canvas[EXPANDO_KEY].initial;
                        ['height', 'width'].forEach(function (prop) {
                            var value = initial[prop];
                            if (helpers.isNullOrUndef(value)) {
                                canvas.removeAttribute(prop);
                            }
                            else {
                                canvas.setAttribute(prop, value);
                            }
                        });
                        helpers.each(initial.style || {}, function (value, key) {
                            canvas.style[key] = value;
                        });
                        // The canvas render size might have been changed (and thus the state stack discarded),
                        // we can't use save() and restore() to restore the initial state. So make sure that at
                        // least the canvas context is reset to the default state by setting the canvas width.
                        // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html
                        canvas.width = canvas.width;
                        delete canvas[EXPANDO_KEY];
                    },
                    addEventListener: function (chart, type, listener) {
                        var canvas = chart.canvas;
                        if (type === 'resize') {
                            // Note: the resize event is not supported on all browsers.
                            addResizeListener(canvas, listener, chart);
                            return;
                        }
                        var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});
                        var proxies = expando.proxies || (expando.proxies = {});
                        var proxy = proxies[chart.id + '_' + type] = function (event) {
                            listener(fromNativeEvent(event, chart));
                        };
                        addEventListener(canvas, type, proxy);
                    },
                    removeEventListener: function (chart, type, listener) {
                        var canvas = chart.canvas;
                        if (type === 'resize') {
                            // Note: the resize event is not supported on all browsers.
                            removeResizeListener(canvas, listener);
                            return;
                        }
                        var expando = listener[EXPANDO_KEY] || {};
                        var proxies = expando.proxies || {};
                        var proxy = proxies[chart.id + '_' + type];
                        if (!proxy) {
                            return;
                        }
                        removeEventListener(canvas, type, proxy);
                    }
                };
                // DEPRECATIONS
                /**
                 * Provided for backward compatibility, use EventTarget.addEventListener instead.
                 * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
                 * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
                 * @function Chart.helpers.addEvent
                 * @deprecated since version 2.7.0
                 * @todo remove at version 3
                 * @private
                 */
                helpers.addEvent = addEventListener;
                /**
                 * Provided for backward compatibility, use EventTarget.removeEventListener instead.
                 * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
                 * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener
                 * @function Chart.helpers.removeEvent
                 * @deprecated since version 2.7.0
                 * @todo remove at version 3
                 * @private
                 */
                helpers.removeEvent = removeEventListener;
            }, { "45": 45 }], 48: [function (require, module, exports) {
                'use strict';
                var helpers = require(45);
                var basic = require(46);
                var dom = require(47);
                // @TODO Make possible to select another platform at build time.
                var implementation = dom._enabled ? dom : basic;
                /**
                 * @namespace Chart.platform
                 * @see https://chartjs.gitbooks.io/proposals/content/Platform.html
                 * @since 2.4.0
                 */
                module.exports = helpers.extend({
                    /**
                     * @since 2.7.0
                     */
                    initialize: function () { },
                    /**
                     * Called at chart construction time, returns a context2d instance implementing
                     * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.
                     * @param {*} item - The native item from which to acquire context (platform specific)
                     * @param {Object} options - The chart options
                     * @returns {CanvasRenderingContext2D} context2d instance
                     */
                    acquireContext: function () { },
                    /**
                     * Called at chart destruction time, releases any resources associated to the context
                     * previously returned by the acquireContext() method.
                     * @param {CanvasRenderingContext2D} context - The context2d instance
                     * @returns {Boolean} true if the method succeeded, else false
                     */
                    releaseContext: function () { },
                    /**
                     * Registers the specified listener on the given chart.
                     * @param {Chart} chart - Chart from which to listen for event
                     * @param {String} type - The ({@link IEvent}) type to listen for
                     * @param {Function} listener - Receives a notification (an object that implements
                     * the {@link IEvent} interface) when an event of the specified type occurs.
                     */
                    addEventListener: function () { },
                    /**
                     * Removes the specified listener previously registered with addEventListener.
                     * @param {Chart} chart -Chart from which to remove the listener
                     * @param {String} type - The ({@link IEvent}) type to remove
                     * @param {Function} listener - The listener function to remove from the event target.
                     */
                    removeEventListener: function () { }
                }, implementation);
                /**
                 * @interface IPlatform
                 * Allows abstracting platform dependencies away from the chart
                 * @borrows Chart.platform.acquireContext as acquireContext
                 * @borrows Chart.platform.releaseContext as releaseContext
                 * @borrows Chart.platform.addEventListener as addEventListener
                 * @borrows Chart.platform.removeEventListener as removeEventListener
                 */
                /**
                 * @interface IEvent
                 * @prop {String} type - The event type name, possible values are:
                 * 'contextmenu', 'mouseenter', 'mousedown', 'mousemove', 'mouseup', 'mouseout',
                 * 'click', 'dblclick', 'keydown', 'keypress', 'keyup' and 'resize'
                 * @prop {*} native - The original native event (null for emulated events, e.g. 'resize')
                 * @prop {Number} x - The mouse x position, relative to the canvas (null for incompatible events)
                 * @prop {Number} y - The mouse y position, relative to the canvas (null for incompatible events)
                 */
            }, { "45": 45, "46": 46, "47": 47 }], 49: [function (require, module, exports) {
                'use strict';
                module.exports = {};
                module.exports.filler = require(50);
                module.exports.legend = require(51);
                module.exports.title = require(52);
            }, { "50": 50, "51": 51, "52": 52 }], 50: [function (require, module, exports) {
                /**
                 * Plugin based on discussion from the following Chart.js issues:
                 * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569
                 * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897
                 */
                'use strict';
                var defaults = require(25);
                var elements = require(40);
                var helpers = require(45);
                defaults._set('global', {
                    plugins: {
                        filler: {
                            propagate: true
                        }
                    }
                });
                var mappers = {
                    dataset: function (source) {
                        var index = source.fill;
                        var chart = source.chart;
                        var meta = chart.getDatasetMeta(index);
                        var visible = meta && chart.isDatasetVisible(index);
                        var points = (visible && meta.dataset._children) || [];
                        var length = points.length || 0;
                        return !length ? null : function (point, i) {
                            return (i < length && points[i]._view) || null;
                        };
                    },
                    boundary: function (source) {
                        var boundary = source.boundary;
                        var x = boundary ? boundary.x : null;
                        var y = boundary ? boundary.y : null;
                        return function (point) {
                            return {
                                x: x === null ? point.x : x,
                                y: y === null ? point.y : y,
                            };
                        };
                    }
                };
                // @todo if (fill[0] === '#')
                function decodeFill(el, index, count) {
                    var model = el._model || {};
                    var fill = model.fill;
                    var target;
                    if (fill === undefined) {
                        fill = !!model.backgroundColor;
                    }
                    if (fill === false || fill === null) {
                        return false;
                    }
                    if (fill === true) {
                        return 'origin';
                    }
                    target = parseFloat(fill, 10);
                    if (isFinite(target) && Math.floor(target) === target) {
                        if (fill[0] === '-' || fill[0] === '+') {
                            target = index + target;
                        }
                        if (target === index || target < 0 || target >= count) {
                            return false;
                        }
                        return target;
                    }
                    switch (fill) {
                        // compatibility
                        case 'bottom':
                            return 'start';
                        case 'top':
                            return 'end';
                        case 'zero':
                            return 'origin';
                        // supported boundaries
                        case 'origin':
                        case 'start':
                        case 'end':
                            return fill;
                        // invalid fill values
                        default:
                            return false;
                    }
                }
                function computeBoundary(source) {
                    var model = source.el._model || {};
                    var scale = source.el._scale || {};
                    var fill = source.fill;
                    var target = null;
                    var horizontal;
                    if (isFinite(fill)) {
                        return null;
                    }
                    // Backward compatibility: until v3, we still need to support boundary values set on
                    // the model (scaleTop, scaleBottom and scaleZero) because some external plugins and
                    // controllers might still use it (e.g. the Smith chart).
                    if (fill === 'start') {
                        target = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;
                    }
                    else if (fill === 'end') {
                        target = model.scaleTop === undefined ? scale.top : model.scaleTop;
                    }
                    else if (model.scaleZero !== undefined) {
                        target = model.scaleZero;
                    }
                    else if (scale.getBasePosition) {
                        target = scale.getBasePosition();
                    }
                    else if (scale.getBasePixel) {
                        target = scale.getBasePixel();
                    }
                    if (target !== undefined && target !== null) {
                        if (target.x !== undefined && target.y !== undefined) {
                            return target;
                        }
                        if (typeof target === 'number' && isFinite(target)) {
                            horizontal = scale.isHorizontal();
                            return {
                                x: horizontal ? target : null,
                                y: horizontal ? null : target
                            };
                        }
                    }
                    return null;
                }
                function resolveTarget(sources, index, propagate) {
                    var source = sources[index];
                    var fill = source.fill;
                    var visited = [index];
                    var target;
                    if (!propagate) {
                        return fill;
                    }
                    while (fill !== false && visited.indexOf(fill) === -1) {
                        if (!isFinite(fill)) {
                            return fill;
                        }
                        target = sources[fill];
                        if (!target) {
                            return false;
                        }
                        if (target.visible) {
                            return fill;
                        }
                        visited.push(fill);
                        fill = target.fill;
                    }
                    return false;
                }
                function createMapper(source) {
                    var fill = source.fill;
                    var type = 'dataset';
                    if (fill === false) {
                        return null;
                    }
                    if (!isFinite(fill)) {
                        type = 'boundary';
                    }
                    return mappers[type](source);
                }
                function isDrawable(point) {
                    return point && !point.skip;
                }
                function drawArea(ctx, curve0, curve1, len0, len1) {
                    var i;
                    if (!len0 || !len1) {
                        return;
                    }
                    // building first area curve (normal)
                    ctx.moveTo(curve0[0].x, curve0[0].y);
                    for (i = 1; i < len0; ++i) {
                        helpers.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);
                    }
                    // joining the two area curves
                    ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y);
                    // building opposite area curve (reverse)
                    for (i = len1 - 1; i > 0; --i) {
                        helpers.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);
                    }
                }
                function doFill(ctx, points, mapper, view, color, loop) {
                    var count = points.length;
                    var span = view.spanGaps;
                    var curve0 = [];
                    var curve1 = [];
                    var len0 = 0;
                    var len1 = 0;
                    var i, ilen, index, p0, p1, d0, d1;
                    ctx.beginPath();
                    for (i = 0, ilen = (count + !!loop); i < ilen; ++i) {
                        index = i % count;
                        p0 = points[index]._view;
                        p1 = mapper(p0, index, view);
                        d0 = isDrawable(p0);
                        d1 = isDrawable(p1);
                        if (d0 && d1) {
                            len0 = curve0.push(p0);
                            len1 = curve1.push(p1);
                        }
                        else if (len0 && len1) {
                            if (!span) {
                                drawArea(ctx, curve0, curve1, len0, len1);
                                len0 = len1 = 0;
                                curve0 = [];
                                curve1 = [];
                            }
                            else {
                                if (d0) {
                                    curve0.push(p0);
                                }
                                if (d1) {
                                    curve1.push(p1);
                                }
                            }
                        }
                    }
                    drawArea(ctx, curve0, curve1, len0, len1);
                    ctx.closePath();
                    ctx.fillStyle = color;
                    ctx.fill();
                }
                module.exports = {
                    id: 'filler',
                    afterDatasetsUpdate: function (chart, options) {
                        var count = (chart.data.datasets || []).length;
                        var propagate = options.propagate;
                        var sources = [];
                        var meta, i, el, source;
                        for (i = 0; i < count; ++i) {
                            meta = chart.getDatasetMeta(i);
                            el = meta.dataset;
                            source = null;
                            if (el && el._model && el instanceof elements.Line) {
                                source = {
                                    visible: chart.isDatasetVisible(i),
                                    fill: decodeFill(el, i, count),
                                    chart: chart,
                                    el: el
                                };
                            }
                            meta.$filler = source;
                            sources.push(source);
                        }
                        for (i = 0; i < count; ++i) {
                            source = sources[i];
                            if (!source) {
                                continue;
                            }
                            source.fill = resolveTarget(sources, i, propagate);
                            source.boundary = computeBoundary(source);
                            source.mapper = createMapper(source);
                        }
                    },
                    beforeDatasetDraw: function (chart, args) {
                        var meta = args.meta.$filler;
                        if (!meta) {
                            return;
                        }
                        var ctx = chart.ctx;
                        var el = meta.el;
                        var view = el._view;
                        var points = el._children || [];
                        var mapper = meta.mapper;
                        var color = view.backgroundColor || defaults.global.defaultColor;
                        if (mapper && color && points.length) {
                            helpers.canvas.clipArea(ctx, chart.chartArea);
                            doFill(ctx, points, mapper, view, color, el._loop);
                            helpers.canvas.unclipArea(ctx);
                        }
                    }
                };
            }, { "25": 25, "40": 40, "45": 45 }], 51: [function (require, module, exports) {
                'use strict';
                var defaults = require(25);
                var Element = require(26);
                var helpers = require(45);
                var layouts = require(30);
                var noop = helpers.noop;
                defaults._set('global', {
                    legend: {
                        display: true,
                        position: 'top',
                        fullWidth: true,
                        reverse: false,
                        weight: 1000,
                        // a callback that will handle
                        onClick: function (e, legendItem) {
                            var index = legendItem.datasetIndex;
                            var ci = this.chart;
                            var meta = ci.getDatasetMeta(index);
                            // See controller.isDatasetVisible comment
                            meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;
                            // We hid a dataset ... rerender the chart
                            ci.update();
                        },
                        onHover: null,
                        labels: {
                            boxWidth: 40,
                            padding: 10,
                            // Generates labels shown in the legend
                            // Valid properties to return:
                            // text : text to display
                            // fillStyle : fill of coloured box
                            // strokeStyle: stroke of coloured box
                            // hidden : if this legend item refers to a hidden item
                            // lineCap : cap style for line
                            // lineDash
                            // lineDashOffset :
                            // lineJoin :
                            // lineWidth :
                            generateLabels: function (chart) {
                                var data = chart.data;
                                return helpers.isArray(data.datasets) ? data.datasets.map(function (dataset, i) {
                                    return {
                                        text: dataset.label,
                                        fillStyle: (!helpers.isArray(dataset.backgroundColor) ? dataset.backgroundColor : dataset.backgroundColor[0]),
                                        hidden: !chart.isDatasetVisible(i),
                                        lineCap: dataset.borderCapStyle,
                                        lineDash: dataset.borderDash,
                                        lineDashOffset: dataset.borderDashOffset,
                                        lineJoin: dataset.borderJoinStyle,
                                        lineWidth: dataset.borderWidth,
                                        strokeStyle: dataset.borderColor,
                                        pointStyle: dataset.pointStyle,
                                        // Below is extra data used for toggling the datasets
                                        datasetIndex: i
                                    };
                                }, this) : [];
                            }
                        }
                    },
                    legendCallback: function (chart) {
                        var text = [];
                        text.push('<ul class="' + chart.id + '-legend">');
                        for (var i = 0; i < chart.data.datasets.length; i++) {
                            text.push('<li><span style="background-color:' + chart.data.datasets[i].backgroundColor + '"></span>');
                            if (chart.data.datasets[i].label) {
                                text.push(chart.data.datasets[i].label);
                            }
                            text.push('</li>');
                        }
                        text.push('</ul>');
                        return text.join('');
                    }
                });
                /**
                 * Helper function to get the box width based on the usePointStyle option
                 * @param labelopts {Object} the label options on the legend
                 * @param fontSize {Number} the label font size
                 * @return {Number} width of the color box area
                 */
                function getBoxWidth(labelOpts, fontSize) {
                    return labelOpts.usePointStyle ?
                        fontSize * Math.SQRT2 :
                        labelOpts.boxWidth;
                }
                /**
                 * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
                 */
                var Legend = Element.extend({
                    initialize: function (config) {
                        helpers.extend(this, config);
                        // Contains hit boxes for each dataset (in dataset order)
                        this.legendHitBoxes = [];
                        // Are we in doughnut mode which has a different data type
                        this.doughnutMode = false;
                    },
                    // These methods are ordered by lifecycle. Utilities then follow.
                    // Any function defined here is inherited by all legend types.
                    // Any function can be extended by the legend type
                    beforeUpdate: noop,
                    update: function (maxWidth, maxHeight, margins) {
                        var me = this;
                        // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
                        me.beforeUpdate();
                        // Absorb the master measurements
                        me.maxWidth = maxWidth;
                        me.maxHeight = maxHeight;
                        me.margins = margins;
                        // Dimensions
                        me.beforeSetDimensions();
                        me.setDimensions();
                        me.afterSetDimensions();
                        // Labels
                        me.beforeBuildLabels();
                        me.buildLabels();
                        me.afterBuildLabels();
                        // Fit
                        me.beforeFit();
                        me.fit();
                        me.afterFit();
                        //
                        me.afterUpdate();
                        return me.minSize;
                    },
                    afterUpdate: noop,
                    //
                    beforeSetDimensions: noop,
                    setDimensions: function () {
                        var me = this;
                        // Set the unconstrained dimension before label rotation
                        if (me.isHorizontal()) {
                            // Reset position before calculating rotation
                            me.width = me.maxWidth;
                            me.left = 0;
                            me.right = me.width;
                        }
                        else {
                            me.height = me.maxHeight;
                            // Reset position before calculating rotation
                            me.top = 0;
                            me.bottom = me.height;
                        }
                        // Reset padding
                        me.paddingLeft = 0;
                        me.paddingTop = 0;
                        me.paddingRight = 0;
                        me.paddingBottom = 0;
                        // Reset minSize
                        me.minSize = {
                            width: 0,
                            height: 0
                        };
                    },
                    afterSetDimensions: noop,
                    //
                    beforeBuildLabels: noop,
                    buildLabels: function () {
                        var me = this;
                        var labelOpts = me.options.labels || {};
                        var legendItems = helpers.callback(labelOpts.generateLabels, [me.chart], me) || [];
                        if (labelOpts.filter) {
                            legendItems = legendItems.filter(function (item) {
                                return labelOpts.filter(item, me.chart.data);
                            });
                        }
                        if (me.options.reverse) {
                            legendItems.reverse();
                        }
                        me.legendItems = legendItems;
                    },
                    afterBuildLabels: noop,
                    //
                    beforeFit: noop,
                    fit: function () {
                        var me = this;
                        var opts = me.options;
                        var labelOpts = opts.labels;
                        var display = opts.display;
                        var ctx = me.ctx;
                        var globalDefault = defaults.global;
                        var valueOrDefault = helpers.valueOrDefault;
                        var fontSize = valueOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize);
                        var fontStyle = valueOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle);
                        var fontFamily = valueOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily);
                        var labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);
                        // Reset hit boxes
                        var hitboxes = me.legendHitBoxes = [];
                        var minSize = me.minSize;
                        var isHorizontal = me.isHorizontal();
                        if (isHorizontal) {
                            minSize.width = me.maxWidth; // fill all the width
                            minSize.height = display ? 10 : 0;
                        }
                        else {
                            minSize.width = display ? 10 : 0;
                            minSize.height = me.maxHeight; // fill all the height
                        }
                        // Increase sizes here
                        if (display) {
                            ctx.font = labelFont;
                            if (isHorizontal) {
                                // Labels
                                // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one
                                var lineWidths = me.lineWidths = [0];
                                var totalHeight = me.legendItems.length ? fontSize + (labelOpts.padding) : 0;
                                ctx.textAlign = 'left';
                                ctx.textBaseline = 'top';
                                helpers.each(me.legendItems, function (legendItem, i) {
                                    var boxWidth = getBoxWidth(labelOpts, fontSize);
                                    var width = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;
                                    if (lineWidths[lineWidths.length - 1] + width + labelOpts.padding >= me.width) {
                                        totalHeight += fontSize + (labelOpts.padding);
                                        lineWidths[lineWidths.length] = me.left;
                                    }
                                    // Store the hitbox width and height here. Final position will be updated in `draw`
                                    hitboxes[i] = {
                                        left: 0,
                                        top: 0,
                                        width: width,
                                        height: fontSize
                                    };
                                    lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
                                });
                                minSize.height += totalHeight;
                            }
                            else {
                                var vPadding = labelOpts.padding;
                                var columnWidths = me.columnWidths = [];
                                var totalWidth = labelOpts.padding;
                                var currentColWidth = 0;
                                var currentColHeight = 0;
                                var itemHeight = fontSize + vPadding;
                                helpers.each(me.legendItems, function (legendItem, i) {
                                    var boxWidth = getBoxWidth(labelOpts, fontSize);
                                    var itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;
                                    // If too tall, go to new column
                                    if (currentColHeight + itemHeight > minSize.height) {
                                        totalWidth += currentColWidth + labelOpts.padding;
                                        columnWidths.push(currentColWidth); // previous column width
                                        currentColWidth = 0;
                                        currentColHeight = 0;
                                    }
                                    // Get max width
                                    currentColWidth = Math.max(currentColWidth, itemWidth);
                                    currentColHeight += itemHeight;
                                    // Store the hitbox width and height here. Final position will be updated in `draw`
                                    hitboxes[i] = {
                                        left: 0,
                                        top: 0,
                                        width: itemWidth,
                                        height: fontSize
                                    };
                                });
                                totalWidth += currentColWidth;
                                columnWidths.push(currentColWidth);
                                minSize.width += totalWidth;
                            }
                        }
                        me.width = minSize.width;
                        me.height = minSize.height;
                    },
                    afterFit: noop,
                    // Shared Methods
                    isHorizontal: function () {
                        return this.options.position === 'top' || this.options.position === 'bottom';
                    },
                    // Actually draw the legend on the canvas
                    draw: function () {
                        var me = this;
                        var opts = me.options;
                        var labelOpts = opts.labels;
                        var globalDefault = defaults.global;
                        var lineDefault = globalDefault.elements.line;
                        var legendWidth = me.width;
                        var lineWidths = me.lineWidths;
                        if (opts.display) {
                            var ctx = me.ctx;
                            var valueOrDefault = helpers.valueOrDefault;
                            var fontColor = valueOrDefault(labelOpts.fontColor, globalDefault.defaultFontColor);
                            var fontSize = valueOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize);
                            var fontStyle = valueOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle);
                            var fontFamily = valueOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily);
                            var labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);
                            var cursor;
                            // Canvas setup
                            ctx.textAlign = 'left';
                            ctx.textBaseline = 'middle';
                            ctx.lineWidth = 0.5;
                            ctx.strokeStyle = fontColor; // for strikethrough effect
                            ctx.fillStyle = fontColor; // render in correct colour
                            ctx.font = labelFont;
                            var boxWidth = getBoxWidth(labelOpts, fontSize);
                            var hitboxes = me.legendHitBoxes;
                            // current position
                            var drawLegendBox = function (x, y, legendItem) {
                                if (isNaN(boxWidth) || boxWidth <= 0) {
                                    return;
                                }
                                // Set the ctx for the box
                                ctx.save();
                                ctx.fillStyle = valueOrDefault(legendItem.fillStyle, globalDefault.defaultColor);
                                ctx.lineCap = valueOrDefault(legendItem.lineCap, lineDefault.borderCapStyle);
                                ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, lineDefault.borderDashOffset);
                                ctx.lineJoin = valueOrDefault(legendItem.lineJoin, lineDefault.borderJoinStyle);
                                ctx.lineWidth = valueOrDefault(legendItem.lineWidth, lineDefault.borderWidth);
                                ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, globalDefault.defaultColor);
                                var isLineWidthZero = (valueOrDefault(legendItem.lineWidth, lineDefault.borderWidth) === 0);
                                if (ctx.setLineDash) {
                                    // IE 9 and 10 do not support line dash
                                    ctx.setLineDash(valueOrDefault(legendItem.lineDash, lineDefault.borderDash));
                                }
                                if (opts.labels && opts.labels.usePointStyle) {
                                    // Recalculate x and y for drawPoint() because its expecting
                                    // x and y to be center of figure (instead of top left)
                                    var radius = fontSize * Math.SQRT2 / 2;
                                    var offSet = radius / Math.SQRT2;
                                    var centerX = x + offSet;
                                    var centerY = y + offSet;
                                    // Draw pointStyle as legend symbol
                                    helpers.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);
                                }
                                else {
                                    // Draw box as legend symbol
                                    if (!isLineWidthZero) {
                                        ctx.strokeRect(x, y, boxWidth, fontSize);
                                    }
                                    ctx.fillRect(x, y, boxWidth, fontSize);
                                }
                                ctx.restore();
                            };
                            var fillText = function (x, y, legendItem, textWidth) {
                                var halfFontSize = fontSize / 2;
                                var xLeft = boxWidth + halfFontSize + x;
                                var yMiddle = y + halfFontSize;
                                ctx.fillText(legendItem.text, xLeft, yMiddle);
                                if (legendItem.hidden) {
                                    // Strikethrough the text if hidden
                                    ctx.beginPath();
                                    ctx.lineWidth = 2;
                                    ctx.moveTo(xLeft, yMiddle);
                                    ctx.lineTo(xLeft + textWidth, yMiddle);
                                    ctx.stroke();
                                }
                            };
                            // Horizontal
                            var isHorizontal = me.isHorizontal();
                            if (isHorizontal) {
                                cursor = {
                                    x: me.left + ((legendWidth - lineWidths[0]) / 2),
                                    y: me.top + labelOpts.padding,
                                    line: 0
                                };
                            }
                            else {
                                cursor = {
                                    x: me.left + labelOpts.padding,
                                    y: me.top + labelOpts.padding,
                                    line: 0
                                };
                            }
                            var itemHeight = fontSize + labelOpts.padding;
                            helpers.each(me.legendItems, function (legendItem, i) {
                                var textWidth = ctx.measureText(legendItem.text).width;
                                var width = boxWidth + (fontSize / 2) + textWidth;
                                var x = cursor.x;
                                var y = cursor.y;
                                if (isHorizontal) {
                                    if (x + width >= legendWidth) {
                                        y = cursor.y += itemHeight;
                                        cursor.line++;
                                        x = cursor.x = me.left + ((legendWidth - lineWidths[cursor.line]) / 2);
                                    }
                                }
                                else if (y + itemHeight > me.bottom) {
                                    x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
                                    y = cursor.y = me.top + labelOpts.padding;
                                    cursor.line++;
                                }
                                drawLegendBox(x, y, legendItem);
                                hitboxes[i].left = x;
                                hitboxes[i].top = y;
                                // Fill the actual label
                                fillText(x, y, legendItem, textWidth);
                                if (isHorizontal) {
                                    cursor.x += width + (labelOpts.padding);
                                }
                                else {
                                    cursor.y += itemHeight;
                                }
                            });
                        }
                    },
                    /**
                     * Handle an event
                     * @private
                     * @param {IEvent} event - The event to handle
                     * @return {Boolean} true if a change occured
                     */
                    handleEvent: function (e) {
                        var me = this;
                        var opts = me.options;
                        var type = e.type === 'mouseup' ? 'click' : e.type;
                        var changed = false;
                        if (type === 'mousemove') {
                            if (!opts.onHover) {
                                return;
                            }
                        }
                        else if (type === 'click') {
                            if (!opts.onClick) {
                                return;
                            }
                        }
                        else {
                            return;
                        }
                        // Chart event already has relative position in it
                        var x = e.x;
                        var y = e.y;
                        if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
                            // See if we are touching one of the dataset boxes
                            var lh = me.legendHitBoxes;
                            for (var i = 0; i < lh.length; ++i) {
                                var hitBox = lh[i];
                                if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
                                    // Touching an element
                                    if (type === 'click') {
                                        // use e.native for backwards compatibility
                                        opts.onClick.call(me, e.native, me.legendItems[i]);
                                        changed = true;
                                        break;
                                    }
                                    else if (type === 'mousemove') {
                                        // use e.native for backwards compatibility
                                        opts.onHover.call(me, e.native, me.legendItems[i]);
                                        changed = true;
                                        break;
                                    }
                                }
                            }
                        }
                        return changed;
                    }
                });
                function createNewLegendAndAttach(chart, legendOpts) {
                    var legend = new Legend({
                        ctx: chart.ctx,
                        options: legendOpts,
                        chart: chart
                    });
                    layouts.configure(chart, legend, legendOpts);
                    layouts.addBox(chart, legend);
                    chart.legend = legend;
                }
                module.exports = {
                    id: 'legend',
                    /**
                     * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making
                     * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of
                     * the plugin, which one will be re-exposed in the chart.js file.
                     * https://github.com/chartjs/Chart.js/pull/2640
                     * @private
                     */
                    _element: Legend,
                    beforeInit: function (chart) {
                        var legendOpts = chart.options.legend;
                        if (legendOpts) {
                            createNewLegendAndAttach(chart, legendOpts);
                        }
                    },
                    beforeUpdate: function (chart) {
                        var legendOpts = chart.options.legend;
                        var legend = chart.legend;
                        if (legendOpts) {
                            helpers.mergeIf(legendOpts, defaults.global.legend);
                            if (legend) {
                                layouts.configure(chart, legend, legendOpts);
                                legend.options = legendOpts;
                            }
                            else {
                                createNewLegendAndAttach(chart, legendOpts);
                            }
                        }
                        else if (legend) {
                            layouts.removeBox(chart, legend);
                            delete chart.legend;
                        }
                    },
                    afterEvent: function (chart, e) {
                        var legend = chart.legend;
                        if (legend) {
                            legend.handleEvent(e);
                        }
                    }
                };
            }, { "25": 25, "26": 26, "30": 30, "45": 45 }], 52: [function (require, module, exports) {
                'use strict';
                var defaults = require(25);
                var Element = require(26);
                var helpers = require(45);
                var layouts = require(30);
                var noop = helpers.noop;
                defaults._set('global', {
                    title: {
                        display: false,
                        fontStyle: 'bold',
                        fullWidth: true,
                        lineHeight: 1.2,
                        padding: 10,
                        position: 'top',
                        text: '',
                        weight: 2000 // by default greater than legend (1000) to be above
                    }
                });
                /**
                 * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
                 */
                var Title = Element.extend({
                    initialize: function (config) {
                        var me = this;
                        helpers.extend(me, config);
                        // Contains hit boxes for each dataset (in dataset order)
                        me.legendHitBoxes = [];
                    },
                    // These methods are ordered by lifecycle. Utilities then follow.
                    beforeUpdate: noop,
                    update: function (maxWidth, maxHeight, margins) {
                        var me = this;
                        // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
                        me.beforeUpdate();
                        // Absorb the master measurements
                        me.maxWidth = maxWidth;
                        me.maxHeight = maxHeight;
                        me.margins = margins;
                        // Dimensions
                        me.beforeSetDimensions();
                        me.setDimensions();
                        me.afterSetDimensions();
                        // Labels
                        me.beforeBuildLabels();
                        me.buildLabels();
                        me.afterBuildLabels();
                        // Fit
                        me.beforeFit();
                        me.fit();
                        me.afterFit();
                        //
                        me.afterUpdate();
                        return me.minSize;
                    },
                    afterUpdate: noop,
                    //
                    beforeSetDimensions: noop,
                    setDimensions: function () {
                        var me = this;
                        // Set the unconstrained dimension before label rotation
                        if (me.isHorizontal()) {
                            // Reset position before calculating rotation
                            me.width = me.maxWidth;
                            me.left = 0;
                            me.right = me.width;
                        }
                        else {
                            me.height = me.maxHeight;
                            // Reset position before calculating rotation
                            me.top = 0;
                            me.bottom = me.height;
                        }
                        // Reset padding
                        me.paddingLeft = 0;
                        me.paddingTop = 0;
                        me.paddingRight = 0;
                        me.paddingBottom = 0;
                        // Reset minSize
                        me.minSize = {
                            width: 0,
                            height: 0
                        };
                    },
                    afterSetDimensions: noop,
                    //
                    beforeBuildLabels: noop,
                    buildLabels: noop,
                    afterBuildLabels: noop,
                    //
                    beforeFit: noop,
                    fit: function () {
                        var me = this;
                        var valueOrDefault = helpers.valueOrDefault;
                        var opts = me.options;
                        var display = opts.display;
                        var fontSize = valueOrDefault(opts.fontSize, defaults.global.defaultFontSize);
                        var minSize = me.minSize;
                        var lineCount = helpers.isArray(opts.text) ? opts.text.length : 1;
                        var lineHeight = helpers.options.toLineHeight(opts.lineHeight, fontSize);
                        var textSize = display ? (lineCount * lineHeight) + (opts.padding * 2) : 0;
                        if (me.isHorizontal()) {
                            minSize.width = me.maxWidth; // fill all the width
                            minSize.height = textSize;
                        }
                        else {
                            minSize.width = textSize;
                            minSize.height = me.maxHeight; // fill all the height
                        }
                        me.width = minSize.width;
                        me.height = minSize.height;
                    },
                    afterFit: noop,
                    // Shared Methods
                    isHorizontal: function () {
                        var pos = this.options.position;
                        return pos === 'top' || pos === 'bottom';
                    },
                    // Actually draw the title block on the canvas
                    draw: function () {
                        var me = this;
                        var ctx = me.ctx;
                        var valueOrDefault = helpers.valueOrDefault;
                        var opts = me.options;
                        var globalDefaults = defaults.global;
                        if (opts.display) {
                            var fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize);
                            var fontStyle = valueOrDefault(opts.fontStyle, globalDefaults.defaultFontStyle);
                            var fontFamily = valueOrDefault(opts.fontFamily, globalDefaults.defaultFontFamily);
                            var titleFont = helpers.fontString(fontSize, fontStyle, fontFamily);
                            var lineHeight = helpers.options.toLineHeight(opts.lineHeight, fontSize);
                            var offset = lineHeight / 2 + opts.padding;
                            var rotation = 0;
                            var top = me.top;
                            var left = me.left;
                            var bottom = me.bottom;
                            var right = me.right;
                            var maxWidth, titleX, titleY;
                            ctx.fillStyle = valueOrDefault(opts.fontColor, globalDefaults.defaultFontColor); // render in correct colour
                            ctx.font = titleFont;
                            // Horizontal
                            if (me.isHorizontal()) {
                                titleX = left + ((right - left) / 2); // midpoint of the width
                                titleY = top + offset;
                                maxWidth = right - left;
                            }
                            else {
                                titleX = opts.position === 'left' ? left + offset : right - offset;
                                titleY = top + ((bottom - top) / 2);
                                maxWidth = bottom - top;
                                rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
                            }
                            ctx.save();
                            ctx.translate(titleX, titleY);
                            ctx.rotate(rotation);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'middle';
                            var text = opts.text;
                            if (helpers.isArray(text)) {
                                var y = 0;
                                for (var i = 0; i < text.length; ++i) {
                                    ctx.fillText(text[i], 0, y, maxWidth);
                                    y += lineHeight;
                                }
                            }
                            else {
                                ctx.fillText(text, 0, 0, maxWidth);
                            }
                            ctx.restore();
                        }
                    }
                });
                function createNewTitleBlockAndAttach(chart, titleOpts) {
                    var title = new Title({
                        ctx: chart.ctx,
                        options: titleOpts,
                        chart: chart
                    });
                    layouts.configure(chart, title, titleOpts);
                    layouts.addBox(chart, title);
                    chart.titleBlock = title;
                }
                module.exports = {
                    id: 'title',
                    /**
                     * Backward compatibility: since 2.1.5, the title is registered as a plugin, making
                     * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of
                     * the plugin, which one will be re-exposed in the chart.js file.
                     * https://github.com/chartjs/Chart.js/pull/2640
                     * @private
                     */
                    _element: Title,
                    beforeInit: function (chart) {
                        var titleOpts = chart.options.title;
                        if (titleOpts) {
                            createNewTitleBlockAndAttach(chart, titleOpts);
                        }
                    },
                    beforeUpdate: function (chart) {
                        var titleOpts = chart.options.title;
                        var titleBlock = chart.titleBlock;
                        if (titleOpts) {
                            helpers.mergeIf(titleOpts, defaults.global.title);
                            if (titleBlock) {
                                layouts.configure(chart, titleBlock, titleOpts);
                                titleBlock.options = titleOpts;
                            }
                            else {
                                createNewTitleBlockAndAttach(chart, titleOpts);
                            }
                        }
                        else if (titleBlock) {
                            layouts.removeBox(chart, titleBlock);
                            delete chart.titleBlock;
                        }
                    }
                };
            }, { "25": 25, "26": 26, "30": 30, "45": 45 }], 53: [function (require, module, exports) {
                'use strict';
                module.exports = function (Chart) {
                    // Default config for a category scale
                    var defaultConfig = {
                        position: 'bottom'
                    };
                    var DatasetScale = Chart.Scale.extend({
                        /**
                        * Internal function to get the correct labels. If data.xLabels or data.yLabels are defined, use those
                        * else fall back to data.labels
                        * @private
                        */
                        getLabels: function () {
                            var data = this.chart.data;
                            return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels;
                        },
                        determineDataLimits: function () {
                            var me = this;
                            var labels = me.getLabels();
                            me.minIndex = 0;
                            me.maxIndex = labels.length - 1;
                            var findIndex;
                            if (me.options.ticks.min !== undefined) {
                                // user specified min value
                                findIndex = labels.indexOf(me.options.ticks.min);
                                me.minIndex = findIndex !== -1 ? findIndex : me.minIndex;
                            }
                            if (me.options.ticks.max !== undefined) {
                                // user specified max value
                                findIndex = labels.indexOf(me.options.ticks.max);
                                me.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;
                            }
                            me.min = labels[me.minIndex];
                            me.max = labels[me.maxIndex];
                        },
                        buildTicks: function () {
                            var me = this;
                            var labels = me.getLabels();
                            // If we are viewing some subset of labels, slice the original array
                            me.ticks = (me.minIndex === 0 && me.maxIndex === labels.length - 1) ? labels : labels.slice(me.minIndex, me.maxIndex + 1);
                        },
                        getLabelForIndex: function (index, datasetIndex) {
                            var me = this;
                            var data = me.chart.data;
                            var isHorizontal = me.isHorizontal();
                            if (data.yLabels && !isHorizontal) {
                                return me.getRightValue(data.datasets[datasetIndex].data[index]);
                            }
                            return me.ticks[index - me.minIndex];
                        },
                        // Used to get data value locations.  Value can either be an index or a numerical value
                        getPixelForValue: function (value, index) {
                            var me = this;
                            var offset = me.options.offset;
                            // 1 is added because we need the length but we have the indexes
                            var offsetAmt = Math.max((me.maxIndex + 1 - me.minIndex - (offset ? 0 : 1)), 1);
                            // If value is a data object, then index is the index in the data array,
                            // not the index of the scale. We need to change that.
                            var valueCategory;
                            if (value !== undefined && value !== null) {
                                valueCategory = me.isHorizontal() ? value.x : value.y;
                            }
                            if (valueCategory !== undefined || (value !== undefined && isNaN(index))) {
                                var labels = me.getLabels();
                                value = valueCategory || value;
                                var idx = labels.indexOf(value);
                                index = idx !== -1 ? idx : index;
                            }
                            if (me.isHorizontal()) {
                                var valueWidth = me.width / offsetAmt;
                                var widthOffset = (valueWidth * (index - me.minIndex));
                                if (offset) {
                                    widthOffset += (valueWidth / 2);
                                }
                                return me.left + Math.round(widthOffset);
                            }
                            var valueHeight = me.height / offsetAmt;
                            var heightOffset = (valueHeight * (index - me.minIndex));
                            if (offset) {
                                heightOffset += (valueHeight / 2);
                            }
                            return me.top + Math.round(heightOffset);
                        },
                        getPixelForTick: function (index) {
                            return this.getPixelForValue(this.ticks[index], index + this.minIndex, null);
                        },
                        getValueForPixel: function (pixel) {
                            var me = this;
                            var offset = me.options.offset;
                            var value;
                            var offsetAmt = Math.max((me._ticks.length - (offset ? 0 : 1)), 1);
                            var horz = me.isHorizontal();
                            var valueDimension = (horz ? me.width : me.height) / offsetAmt;
                            pixel -= horz ? me.left : me.top;
                            if (offset) {
                                pixel -= (valueDimension / 2);
                            }
                            if (pixel <= 0) {
                                value = 0;
                            }
                            else {
                                value = Math.round(pixel / valueDimension);
                            }
                            return value + me.minIndex;
                        },
                        getBasePixel: function () {
                            return this.bottom;
                        }
                    });
                    Chart.scaleService.registerScaleType('category', DatasetScale, defaultConfig);
                };
            }, {}], 54: [function (require, module, exports) {
                'use strict';
                var defaults = require(25);
                var helpers = require(45);
                var Ticks = require(34);
                module.exports = function (Chart) {
                    var defaultConfig = {
                        position: 'left',
                        ticks: {
                            callback: Ticks.formatters.linear
                        }
                    };
                    var LinearScale = Chart.LinearScaleBase.extend({
                        determineDataLimits: function () {
                            var me = this;
                            var opts = me.options;
                            var chart = me.chart;
                            var data = chart.data;
                            var datasets = data.datasets;
                            var isHorizontal = me.isHorizontal();
                            var DEFAULT_MIN = 0;
                            var DEFAULT_MAX = 1;
                            function IDMatches(meta) {
                                return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
                            }
                            // First Calculate the range
                            me.min = null;
                            me.max = null;
                            var hasStacks = opts.stacked;
                            if (hasStacks === undefined) {
                                helpers.each(datasets, function (dataset, datasetIndex) {
                                    if (hasStacks) {
                                        return;
                                    }
                                    var meta = chart.getDatasetMeta(datasetIndex);
                                    if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&
                                        meta.stack !== undefined) {
                                        hasStacks = true;
                                    }
                                });
                            }
                            if (opts.stacked || hasStacks) {
                                var valuesPerStack = {};
                                helpers.each(datasets, function (dataset, datasetIndex) {
                                    var meta = chart.getDatasetMeta(datasetIndex);
                                    var key = [
                                        meta.type,
                                        // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
                                        ((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),
                                        meta.stack
                                    ].join('.');
                                    if (valuesPerStack[key] === undefined) {
                                        valuesPerStack[key] = {
                                            positiveValues: [],
                                            negativeValues: []
                                        };
                                    }
                                    // Store these per type
                                    var positiveValues = valuesPerStack[key].positiveValues;
                                    var negativeValues = valuesPerStack[key].negativeValues;
                                    if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                                        helpers.each(dataset.data, function (rawValue, index) {
                                            var value = +me.getRightValue(rawValue);
                                            if (isNaN(value) || meta.data[index].hidden) {
                                                return;
                                            }
                                            positiveValues[index] = positiveValues[index] || 0;
                                            negativeValues[index] = negativeValues[index] || 0;
                                            if (opts.relativePoints) {
                                                positiveValues[index] = 100;
                                            }
                                            else if (value < 0) {
                                                negativeValues[index] += value;
                                            }
                                            else {
                                                positiveValues[index] += value;
                                            }
                                        });
                                    }
                                });
                                helpers.each(valuesPerStack, function (valuesForType) {
                                    var values = valuesForType.positiveValues.concat(valuesForType.negativeValues);
                                    var minVal = helpers.min(values);
                                    var maxVal = helpers.max(values);
                                    me.min = me.min === null ? minVal : Math.min(me.min, minVal);
                                    me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
                                });
                            }
                            else {
                                helpers.each(datasets, function (dataset, datasetIndex) {
                                    var meta = chart.getDatasetMeta(datasetIndex);
                                    if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                                        helpers.each(dataset.data, function (rawValue, index) {
                                            var value = +me.getRightValue(rawValue);
                                            if (isNaN(value) || meta.data[index].hidden) {
                                                return;
                                            }
                                            if (me.min === null) {
                                                me.min = value;
                                            }
                                            else if (value < me.min) {
                                                me.min = value;
                                            }
                                            if (me.max === null) {
                                                me.max = value;
                                            }
                                            else if (value > me.max) {
                                                me.max = value;
                                            }
                                        });
                                    }
                                });
                            }
                            me.min = isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;
                            me.max = isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX;
                            // Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
                            this.handleTickRangeOptions();
                        },
                        getTickLimit: function () {
                            var maxTicks;
                            var me = this;
                            var tickOpts = me.options.ticks;
                            if (me.isHorizontal()) {
                                maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.width / 50));
                            }
                            else {
                                // The factor of 2 used to scale the font size has been experimentally determined.
                                var tickFontSize = helpers.valueOrDefault(tickOpts.fontSize, defaults.global.defaultFontSize);
                                maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.height / (2 * tickFontSize)));
                            }
                            return maxTicks;
                        },
                        // Called after the ticks are built. We need
                        handleDirectionalChanges: function () {
                            if (!this.isHorizontal()) {
                                // We are in a vertical orientation. The top value is the highest. So reverse the array
                                this.ticks.reverse();
                            }
                        },
                        getLabelForIndex: function (index, datasetIndex) {
                            return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
                        },
                        // Utils
                        getPixelForValue: function (value) {
                            // This must be called after fit has been run so that
                            // this.left, this.top, this.right, and this.bottom have been defined
                            var me = this;
                            var start = me.start;
                            var rightValue = +me.getRightValue(value);
                            var pixel;
                            var range = me.end - start;
                            if (me.isHorizontal()) {
                                pixel = me.left + (me.width / range * (rightValue - start));
                            }
                            else {
                                pixel = me.bottom - (me.height / range * (rightValue - start));
                            }
                            return pixel;
                        },
                        getValueForPixel: function (pixel) {
                            var me = this;
                            var isHorizontal = me.isHorizontal();
                            var innerDimension = isHorizontal ? me.width : me.height;
                            var offset = (isHorizontal ? pixel - me.left : me.bottom - pixel) / innerDimension;
                            return me.start + ((me.end - me.start) * offset);
                        },
                        getPixelForTick: function (index) {
                            return this.getPixelForValue(this.ticksAsNumbers[index]);
                        }
                    });
                    Chart.scaleService.registerScaleType('linear', LinearScale, defaultConfig);
                };
            }, { "25": 25, "34": 34, "45": 45 }], 55: [function (require, module, exports) {
                'use strict';
                var helpers = require(45);
                /**
                 * Generate a set of linear ticks
                 * @param generationOptions the options used to generate the ticks
                 * @param dataRange the range of the data
                 * @returns {Array<Number>} array of tick values
                 */
                function generateTicks(generationOptions, dataRange) {
                    var ticks = [];
                    // To get a "nice" value for the tick spacing, we will use the appropriately named
                    // "nice number" algorithm. See http://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks
                    // for details.
                    var spacing;
                    if (generationOptions.stepSize && generationOptions.stepSize > 0) {
                        spacing = generationOptions.stepSize;
                    }
                    else {
                        var niceRange = helpers.niceNum(dataRange.max - dataRange.min, false);
                        spacing = helpers.niceNum(niceRange / (generationOptions.maxTicks - 1), true);
                    }
                    var niceMin = Math.floor(dataRange.min / spacing) * spacing;
                    var niceMax = Math.ceil(dataRange.max / spacing) * spacing;
                    // If min, max and stepSize is set and they make an evenly spaced scale use it.
                    if (generationOptions.min && generationOptions.max && generationOptions.stepSize) {
                        // If very close to our whole number, use it.
                        if (helpers.almostWhole((generationOptions.max - generationOptions.min) / generationOptions.stepSize, spacing / 1000)) {
                            niceMin = generationOptions.min;
                            niceMax = generationOptions.max;
                        }
                    }
                    var numSpaces = (niceMax - niceMin) / spacing;
                    // If very close to our rounded value, use it.
                    if (helpers.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
                        numSpaces = Math.round(numSpaces);
                    }
                    else {
                        numSpaces = Math.ceil(numSpaces);
                    }
                    var precision = 1;
                    if (spacing < 1) {
                        precision = Math.pow(10, spacing.toString().length - 2);
                        niceMin = Math.round(niceMin * precision) / precision;
                        niceMax = Math.round(niceMax * precision) / precision;
                    }
                    ticks.push(generationOptions.min !== undefined ? generationOptions.min : niceMin);
                    for (var j = 1; j < numSpaces; ++j) {
                        ticks.push(Math.round((niceMin + j * spacing) * precision) / precision);
                    }
                    ticks.push(generationOptions.max !== undefined ? generationOptions.max : niceMax);
                    return ticks;
                }
                module.exports = function (Chart) {
                    var noop = helpers.noop;
                    Chart.LinearScaleBase = Chart.Scale.extend({
                        getRightValue: function (value) {
                            if (typeof value === 'string') {
                                return +value;
                            }
                            return Chart.Scale.prototype.getRightValue.call(this, value);
                        },
                        handleTickRangeOptions: function () {
                            var me = this;
                            var opts = me.options;
                            var tickOpts = opts.ticks;
                            // If we are forcing it to begin at 0, but 0 will already be rendered on the chart,
                            // do nothing since that would make the chart weird. If the user really wants a weird chart
                            // axis, they can manually override it
                            if (tickOpts.beginAtZero) {
                                var minSign = helpers.sign(me.min);
                                var maxSign = helpers.sign(me.max);
                                if (minSign < 0 && maxSign < 0) {
                                    // move the top up to 0
                                    me.max = 0;
                                }
                                else if (minSign > 0 && maxSign > 0) {
                                    // move the bottom down to 0
                                    me.min = 0;
                                }
                            }
                            var setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;
                            var setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;
                            if (tickOpts.min !== undefined) {
                                me.min = tickOpts.min;
                            }
                            else if (tickOpts.suggestedMin !== undefined) {
                                if (me.min === null) {
                                    me.min = tickOpts.suggestedMin;
                                }
                                else {
                                    me.min = Math.min(me.min, tickOpts.suggestedMin);
                                }
                            }
                            if (tickOpts.max !== undefined) {
                                me.max = tickOpts.max;
                            }
                            else if (tickOpts.suggestedMax !== undefined) {
                                if (me.max === null) {
                                    me.max = tickOpts.suggestedMax;
                                }
                                else {
                                    me.max = Math.max(me.max, tickOpts.suggestedMax);
                                }
                            }
                            if (setMin !== setMax) {
                                // We set the min or the max but not both.
                                // So ensure that our range is good
                                // Inverted or 0 length range can happen when
                                // ticks.min is set, and no datasets are visible
                                if (me.min >= me.max) {
                                    if (setMin) {
                                        me.max = me.min + 1;
                                    }
                                    else {
                                        me.min = me.max - 1;
                                    }
                                }
                            }
                            if (me.min === me.max) {
                                me.max++;
                                if (!tickOpts.beginAtZero) {
                                    me.min--;
                                }
                            }
                        },
                        getTickLimit: noop,
                        handleDirectionalChanges: noop,
                        buildTicks: function () {
                            var me = this;
                            var opts = me.options;
                            var tickOpts = opts.ticks;
                            // Figure out what the max number of ticks we can support it is based on the size of
                            // the axis area. For now, we say that the minimum tick spacing in pixels must be 50
                            // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
                            // the graph. Make sure we always have at least 2 ticks
                            var maxTicks = me.getTickLimit();
                            maxTicks = Math.max(2, maxTicks);
                            var numericGeneratorOptions = {
                                maxTicks: maxTicks,
                                min: tickOpts.min,
                                max: tickOpts.max,
                                stepSize: helpers.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
                            };
                            var ticks = me.ticks = generateTicks(numericGeneratorOptions, me);
                            me.handleDirectionalChanges();
                            // At this point, we need to update our max and min given the tick values since we have expanded the
                            // range of the scale
                            me.max = helpers.max(ticks);
                            me.min = helpers.min(ticks);
                            if (tickOpts.reverse) {
                                ticks.reverse();
                                me.start = me.max;
                                me.end = me.min;
                            }
                            else {
                                me.start = me.min;
                                me.end = me.max;
                            }
                        },
                        convertTicksToLabels: function () {
                            var me = this;
                            me.ticksAsNumbers = me.ticks.slice();
                            me.zeroLineIndex = me.ticks.indexOf(0);
                            Chart.Scale.prototype.convertTicksToLabels.call(me);
                        }
                    });
                };
            }, { "45": 45 }], 56: [function (require, module, exports) {
                'use strict';
                var helpers = require(45);
                var Ticks = require(34);
                /**
                 * Generate a set of logarithmic ticks
                 * @param generationOptions the options used to generate the ticks
                 * @param dataRange the range of the data
                 * @returns {Array<Number>} array of tick values
                 */
                function generateTicks(generationOptions, dataRange) {
                    var ticks = [];
                    var valueOrDefault = helpers.valueOrDefault;
                    // Figure out what the max number of ticks we can support it is based on the size of
                    // the axis area. For now, we say that the minimum tick spacing in pixels must be 50
                    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
                    // the graph
                    var tickVal = valueOrDefault(generationOptions.min, Math.pow(10, Math.floor(helpers.log10(dataRange.min))));
                    var endExp = Math.floor(helpers.log10(dataRange.max));
                    var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
                    var exp, significand;
                    if (tickVal === 0) {
                        exp = Math.floor(helpers.log10(dataRange.minNotZero));
                        significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));
                        ticks.push(tickVal);
                        tickVal = significand * Math.pow(10, exp);
                    }
                    else {
                        exp = Math.floor(helpers.log10(tickVal));
                        significand = Math.floor(tickVal / Math.pow(10, exp));
                    }
                    var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
                    do {
                        ticks.push(tickVal);
                        ++significand;
                        if (significand === 10) {
                            significand = 1;
                            ++exp;
                            precision = exp >= 0 ? 1 : precision;
                        }
                        tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
                    } while (exp < endExp || (exp === endExp && significand < endSignificand));
                    var lastTick = valueOrDefault(generationOptions.max, tickVal);
                    ticks.push(lastTick);
                    return ticks;
                }
                module.exports = function (Chart) {
                    var defaultConfig = {
                        position: 'left',
                        // label settings
                        ticks: {
                            callback: Ticks.formatters.logarithmic
                        }
                    };
                    var LogarithmicScale = Chart.Scale.extend({
                        determineDataLimits: function () {
                            var me = this;
                            var opts = me.options;
                            var chart = me.chart;
                            var data = chart.data;
                            var datasets = data.datasets;
                            var isHorizontal = me.isHorizontal();
                            function IDMatches(meta) {
                                return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
                            }
                            // Calculate Range
                            me.min = null;
                            me.max = null;
                            me.minNotZero = null;
                            var hasStacks = opts.stacked;
                            if (hasStacks === undefined) {
                                helpers.each(datasets, function (dataset, datasetIndex) {
                                    if (hasStacks) {
                                        return;
                                    }
                                    var meta = chart.getDatasetMeta(datasetIndex);
                                    if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&
                                        meta.stack !== undefined) {
                                        hasStacks = true;
                                    }
                                });
                            }
                            if (opts.stacked || hasStacks) {
                                var valuesPerStack = {};
                                helpers.each(datasets, function (dataset, datasetIndex) {
                                    var meta = chart.getDatasetMeta(datasetIndex);
                                    var key = [
                                        meta.type,
                                        // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
                                        ((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),
                                        meta.stack
                                    ].join('.');
                                    if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                                        if (valuesPerStack[key] === undefined) {
                                            valuesPerStack[key] = [];
                                        }
                                        helpers.each(dataset.data, function (rawValue, index) {
                                            var values = valuesPerStack[key];
                                            var value = +me.getRightValue(rawValue);
                                            // invalid, hidden and negative values are ignored
                                            if (isNaN(value) || meta.data[index].hidden || value < 0) {
                                                return;
                                            }
                                            values[index] = values[index] || 0;
                                            values[index] += value;
                                        });
                                    }
                                });
                                helpers.each(valuesPerStack, function (valuesForType) {
                                    if (valuesForType.length > 0) {
                                        var minVal = helpers.min(valuesForType);
                                        var maxVal = helpers.max(valuesForType);
                                        me.min = me.min === null ? minVal : Math.min(me.min, minVal);
                                        me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
                                    }
                                });
                            }
                            else {
                                helpers.each(datasets, function (dataset, datasetIndex) {
                                    var meta = chart.getDatasetMeta(datasetIndex);
                                    if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                                        helpers.each(dataset.data, function (rawValue, index) {
                                            var value = +me.getRightValue(rawValue);
                                            // invalid, hidden and negative values are ignored
                                            if (isNaN(value) || meta.data[index].hidden || value < 0) {
                                                return;
                                            }
                                            if (me.min === null) {
                                                me.min = value;
                                            }
                                            else if (value < me.min) {
                                                me.min = value;
                                            }
                                            if (me.max === null) {
                                                me.max = value;
                                            }
                                            else if (value > me.max) {
                                                me.max = value;
                                            }
                                            if (value !== 0 && (me.minNotZero === null || value < me.minNotZero)) {
                                                me.minNotZero = value;
                                            }
                                        });
                                    }
                                });
                            }
                            // Common base implementation to handle ticks.min, ticks.max
                            this.handleTickRangeOptions();
                        },
                        handleTickRangeOptions: function () {
                            var me = this;
                            var opts = me.options;
                            var tickOpts = opts.ticks;
                            var valueOrDefault = helpers.valueOrDefault;
                            var DEFAULT_MIN = 1;
                            var DEFAULT_MAX = 10;
                            me.min = valueOrDefault(tickOpts.min, me.min);
                            me.max = valueOrDefault(tickOpts.max, me.max);
                            if (me.min === me.max) {
                                if (me.min !== 0 && me.min !== null) {
                                    me.min = Math.pow(10, Math.floor(helpers.log10(me.min)) - 1);
                                    me.max = Math.pow(10, Math.floor(helpers.log10(me.max)) + 1);
                                }
                                else {
                                    me.min = DEFAULT_MIN;
                                    me.max = DEFAULT_MAX;
                                }
                            }
                            if (me.min === null) {
                                me.min = Math.pow(10, Math.floor(helpers.log10(me.max)) - 1);
                            }
                            if (me.max === null) {
                                me.max = me.min !== 0
                                    ? Math.pow(10, Math.floor(helpers.log10(me.min)) + 1)
                                    : DEFAULT_MAX;
                            }
                            if (me.minNotZero === null) {
                                if (me.min > 0) {
                                    me.minNotZero = me.min;
                                }
                                else if (me.max < 1) {
                                    me.minNotZero = Math.pow(10, Math.floor(helpers.log10(me.max)));
                                }
                                else {
                                    me.minNotZero = DEFAULT_MIN;
                                }
                            }
                        },
                        buildTicks: function () {
                            var me = this;
                            var opts = me.options;
                            var tickOpts = opts.ticks;
                            var reverse = !me.isHorizontal();
                            var generationOptions = {
                                min: tickOpts.min,
                                max: tickOpts.max
                            };
                            var ticks = me.ticks = generateTicks(generationOptions, me);
                            // At this point, we need to update our max and min given the tick values since we have expanded the
                            // range of the scale
                            me.max = helpers.max(ticks);
                            me.min = helpers.min(ticks);
                            if (tickOpts.reverse) {
                                reverse = !reverse;
                                me.start = me.max;
                                me.end = me.min;
                            }
                            else {
                                me.start = me.min;
                                me.end = me.max;
                            }
                            if (reverse) {
                                ticks.reverse();
                            }
                        },
                        convertTicksToLabels: function () {
                            this.tickValues = this.ticks.slice();
                            Chart.Scale.prototype.convertTicksToLabels.call(this);
                        },
                        // Get the correct tooltip label
                        getLabelForIndex: function (index, datasetIndex) {
                            return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
                        },
                        getPixelForTick: function (index) {
                            return this.getPixelForValue(this.tickValues[index]);
                        },
                        /**
                         * Returns the value of the first tick.
                         * @param {Number} value - The minimum not zero value.
                         * @return {Number} The first tick value.
                         * @private
                         */
                        _getFirstTickValue: function (value) {
                            var exp = Math.floor(helpers.log10(value));
                            var significand = Math.floor(value / Math.pow(10, exp));
                            return significand * Math.pow(10, exp);
                        },
                        getPixelForValue: function (value) {
                            var me = this;
                            var reverse = me.options.ticks.reverse;
                            var log10 = helpers.log10;
                            var firstTickValue = me._getFirstTickValue(me.minNotZero);
                            var offset = 0;
                            var innerDimension, pixel, start, end, sign;
                            value = +me.getRightValue(value);
                            if (reverse) {
                                start = me.end;
                                end = me.start;
                                sign = -1;
                            }
                            else {
                                start = me.start;
                                end = me.end;
                                sign = 1;
                            }
                            if (me.isHorizontal()) {
                                innerDimension = me.width;
                                pixel = reverse ? me.right : me.left;
                            }
                            else {
                                innerDimension = me.height;
                                sign *= -1; // invert, since the upper-left corner of the canvas is at pixel (0, 0)
                                pixel = reverse ? me.top : me.bottom;
                            }
                            if (value !== start) {
                                if (start === 0) { // include zero tick
                                    offset = helpers.getValueOrDefault(me.options.ticks.fontSize, Chart.defaults.global.defaultFontSize);
                                    innerDimension -= offset;
                                    start = firstTickValue;
                                }
                                if (value !== 0) {
                                    offset += innerDimension / (log10(end) - log10(start)) * (log10(value) - log10(start));
                                }
                                pixel += sign * offset;
                            }
                            return pixel;
                        },
                        getValueForPixel: function (pixel) {
                            var me = this;
                            var reverse = me.options.ticks.reverse;
                            var log10 = helpers.log10;
                            var firstTickValue = me._getFirstTickValue(me.minNotZero);
                            var innerDimension, start, end, value;
                            if (reverse) {
                                start = me.end;
                                end = me.start;
                            }
                            else {
                                start = me.start;
                                end = me.end;
                            }
                            if (me.isHorizontal()) {
                                innerDimension = me.width;
                                value = reverse ? me.right - pixel : pixel - me.left;
                            }
                            else {
                                innerDimension = me.height;
                                value = reverse ? pixel - me.top : me.bottom - pixel;
                            }
                            if (value !== start) {
                                if (start === 0) { // include zero tick
                                    var offset = helpers.getValueOrDefault(me.options.ticks.fontSize, Chart.defaults.global.defaultFontSize);
                                    value -= offset;
                                    innerDimension -= offset;
                                    start = firstTickValue;
                                }
                                value *= log10(end) - log10(start);
                                value /= innerDimension;
                                value = Math.pow(10, log10(start) + value);
                            }
                            return value;
                        }
                    });
                    Chart.scaleService.registerScaleType('logarithmic', LogarithmicScale, defaultConfig);
                };
            }, { "34": 34, "45": 45 }], 57: [function (require, module, exports) {
                'use strict';
                var defaults = require(25);
                var helpers = require(45);
                var Ticks = require(34);
                module.exports = function (Chart) {
                    var globalDefaults = defaults.global;
                    var defaultConfig = {
                        display: true,
                        // Boolean - Whether to animate scaling the chart from the centre
                        animate: true,
                        position: 'chartArea',
                        angleLines: {
                            display: true,
                            color: 'rgba(0, 0, 0, 0.1)',
                            lineWidth: 1
                        },
                        gridLines: {
                            circular: false
                        },
                        // label settings
                        ticks: {
                            // Boolean - Show a backdrop to the scale label
                            showLabelBackdrop: true,
                            // String - The colour of the label backdrop
                            backdropColor: 'rgba(255,255,255,0.75)',
                            // Number - The backdrop padding above & below the label in pixels
                            backdropPaddingY: 2,
                            // Number - The backdrop padding to the side of the label in pixels
                            backdropPaddingX: 2,
                            callback: Ticks.formatters.linear
                        },
                        pointLabels: {
                            // Boolean - if true, show point labels
                            display: true,
                            // Number - Point label font size in pixels
                            fontSize: 10,
                            // Function - Used to convert point labels
                            callback: function (label) {
                                return label;
                            }
                        }
                    };
                    function getValueCount(scale) {
                        var opts = scale.options;
                        return opts.angleLines.display || opts.pointLabels.display ? scale.chart.data.labels.length : 0;
                    }
                    function getPointLabelFontOptions(scale) {
                        var pointLabelOptions = scale.options.pointLabels;
                        var fontSize = helpers.valueOrDefault(pointLabelOptions.fontSize, globalDefaults.defaultFontSize);
                        var fontStyle = helpers.valueOrDefault(pointLabelOptions.fontStyle, globalDefaults.defaultFontStyle);
                        var fontFamily = helpers.valueOrDefault(pointLabelOptions.fontFamily, globalDefaults.defaultFontFamily);
                        var font = helpers.fontString(fontSize, fontStyle, fontFamily);
                        return {
                            size: fontSize,
                            style: fontStyle,
                            family: fontFamily,
                            font: font
                        };
                    }
                    function measureLabelSize(ctx, fontSize, label) {
                        if (helpers.isArray(label)) {
                            return {
                                w: helpers.longestText(ctx, ctx.font, label),
                                h: (label.length * fontSize) + ((label.length - 1) * 1.5 * fontSize)
                            };
                        }
                        return {
                            w: ctx.measureText(label).width,
                            h: fontSize
                        };
                    }
                    function determineLimits(angle, pos, size, min, max) {
                        if (angle === min || angle === max) {
                            return {
                                start: pos - (size / 2),
                                end: pos + (size / 2)
                            };
                        }
                        else if (angle < min || angle > max) {
                            return {
                                start: pos - size - 5,
                                end: pos
                            };
                        }
                        return {
                            start: pos,
                            end: pos + size + 5
                        };
                    }
                    /**
                     * Helper function to fit a radial linear scale with point labels
                     */
                    function fitWithPointLabels(scale) {
                        /*
                         * Right, this is really confusing and there is a lot of maths going on here
                         * The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9
                         *
                         * Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif
                         *
                         * Solution:
                         *
                         * We assume the radius of the polygon is half the size of the canvas at first
                         * at each index we check if the text overlaps.
                         *
                         * Where it does, we store that angle and that index.
                         *
                         * After finding the largest index and angle we calculate how much we need to remove
                         * from the shape radius to move the point inwards by that x.
                         *
                         * We average the left and right distances to get the maximum shape radius that can fit in the box
                         * along with labels.
                         *
                         * Once we have that, we can find the centre point for the chart, by taking the x text protrusion
                         * on each side, removing that from the size, halving it and adding the left x protrusion width.
                         *
                         * This will mean we have a shape fitted to the canvas, as large as it can be with the labels
                         * and position it in the most space efficient manner
                         *
                         * https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif
                         */
                        var plFont = getPointLabelFontOptions(scale);
                        // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.
                        // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points
                        var largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);
                        var furthestLimits = {
                            r: scale.width,
                            l: 0,
                            t: scale.height,
                            b: 0
                        };
                        var furthestAngles = {};
                        var i, textSize, pointPosition;
                        scale.ctx.font = plFont.font;
                        scale._pointLabelSizes = [];
                        var valueCount = getValueCount(scale);
                        for (i = 0; i < valueCount; i++) {
                            pointPosition = scale.getPointPosition(i, largestPossibleRadius);
                            textSize = measureLabelSize(scale.ctx, plFont.size, scale.pointLabels[i] || '');
                            scale._pointLabelSizes[i] = textSize;
                            // Add quarter circle to make degree 0 mean top of circle
                            var angleRadians = scale.getIndexAngle(i);
                            var angle = helpers.toDegrees(angleRadians) % 360;
                            var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
                            var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
                            if (hLimits.start < furthestLimits.l) {
                                furthestLimits.l = hLimits.start;
                                furthestAngles.l = angleRadians;
                            }
                            if (hLimits.end > furthestLimits.r) {
                                furthestLimits.r = hLimits.end;
                                furthestAngles.r = angleRadians;
                            }
                            if (vLimits.start < furthestLimits.t) {
                                furthestLimits.t = vLimits.start;
                                furthestAngles.t = angleRadians;
                            }
                            if (vLimits.end > furthestLimits.b) {
                                furthestLimits.b = vLimits.end;
                                furthestAngles.b = angleRadians;
                            }
                        }
                        scale.setReductions(largestPossibleRadius, furthestLimits, furthestAngles);
                    }
                    /**
                     * Helper function to fit a radial linear scale with no point labels
                     */
                    function fit(scale) {
                        var largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);
                        scale.drawingArea = Math.round(largestPossibleRadius);
                        scale.setCenterPoint(0, 0, 0, 0);
                    }
                    function getTextAlignForAngle(angle) {
                        if (angle === 0 || angle === 180) {
                            return 'center';
                        }
                        else if (angle < 180) {
                            return 'left';
                        }
                        return 'right';
                    }
                    function fillText(ctx, text, position, fontSize) {
                        if (helpers.isArray(text)) {
                            var y = position.y;
                            var spacing = 1.5 * fontSize;
                            for (var i = 0; i < text.length; ++i) {
                                ctx.fillText(text[i], position.x, y);
                                y += spacing;
                            }
                        }
                        else {
                            ctx.fillText(text, position.x, position.y);
                        }
                    }
                    function adjustPointPositionForLabelHeight(angle, textSize, position) {
                        if (angle === 90 || angle === 270) {
                            position.y -= (textSize.h / 2);
                        }
                        else if (angle > 270 || angle < 90) {
                            position.y -= textSize.h;
                        }
                    }
                    function drawPointLabels(scale) {
                        var ctx = scale.ctx;
                        var opts = scale.options;
                        var angleLineOpts = opts.angleLines;
                        var pointLabelOpts = opts.pointLabels;
                        ctx.lineWidth = angleLineOpts.lineWidth;
                        ctx.strokeStyle = angleLineOpts.color;
                        var outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);
                        // Point Label Font
                        var plFont = getPointLabelFontOptions(scale);
                        ctx.textBaseline = 'top';
                        for (var i = getValueCount(scale) - 1; i >= 0; i--) {
                            if (angleLineOpts.display) {
                                var outerPosition = scale.getPointPosition(i, outerDistance);
                                ctx.beginPath();
                                ctx.moveTo(scale.xCenter, scale.yCenter);
                                ctx.lineTo(outerPosition.x, outerPosition.y);
                                ctx.stroke();
                                ctx.closePath();
                            }
                            if (pointLabelOpts.display) {
                                // Extra 3px out for some label spacing
                                var pointLabelPosition = scale.getPointPosition(i, outerDistance + 5);
                                // Keep this in loop since we may support array properties here
                                var pointLabelFontColor = helpers.valueAtIndexOrDefault(pointLabelOpts.fontColor, i, globalDefaults.defaultFontColor);
                                ctx.font = plFont.font;
                                ctx.fillStyle = pointLabelFontColor;
                                var angleRadians = scale.getIndexAngle(i);
                                var angle = helpers.toDegrees(angleRadians);
                                ctx.textAlign = getTextAlignForAngle(angle);
                                adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
                                fillText(ctx, scale.pointLabels[i] || '', pointLabelPosition, plFont.size);
                            }
                        }
                    }
                    function drawRadiusLine(scale, gridLineOpts, radius, index) {
                        var ctx = scale.ctx;
                        ctx.strokeStyle = helpers.valueAtIndexOrDefault(gridLineOpts.color, index - 1);
                        ctx.lineWidth = helpers.valueAtIndexOrDefault(gridLineOpts.lineWidth, index - 1);
                        if (scale.options.gridLines.circular) {
                            // Draw circular arcs between the points
                            ctx.beginPath();
                            ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
                            ctx.closePath();
                            ctx.stroke();
                        }
                        else {
                            // Draw straight lines connecting each index
                            var valueCount = getValueCount(scale);
                            if (valueCount === 0) {
                                return;
                            }
                            ctx.beginPath();
                            var pointPosition = scale.getPointPosition(0, radius);
                            ctx.moveTo(pointPosition.x, pointPosition.y);
                            for (var i = 1; i < valueCount; i++) {
                                pointPosition = scale.getPointPosition(i, radius);
                                ctx.lineTo(pointPosition.x, pointPosition.y);
                            }
                            ctx.closePath();
                            ctx.stroke();
                        }
                    }
                    function numberOrZero(param) {
                        return helpers.isNumber(param) ? param : 0;
                    }
                    var LinearRadialScale = Chart.LinearScaleBase.extend({
                        setDimensions: function () {
                            var me = this;
                            var opts = me.options;
                            var tickOpts = opts.ticks;
                            // Set the unconstrained dimension before label rotation
                            me.width = me.maxWidth;
                            me.height = me.maxHeight;
                            me.xCenter = Math.round(me.width / 2);
                            me.yCenter = Math.round(me.height / 2);
                            var minSize = helpers.min([me.height, me.width]);
                            var tickFontSize = helpers.valueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
                            me.drawingArea = opts.display ? (minSize / 2) - (tickFontSize / 2 + tickOpts.backdropPaddingY) : (minSize / 2);
                        },
                        determineDataLimits: function () {
                            var me = this;
                            var chart = me.chart;
                            var min = Number.POSITIVE_INFINITY;
                            var max = Number.NEGATIVE_INFINITY;
                            helpers.each(chart.data.datasets, function (dataset, datasetIndex) {
                                if (chart.isDatasetVisible(datasetIndex)) {
                                    var meta = chart.getDatasetMeta(datasetIndex);
                                    helpers.each(dataset.data, function (rawValue, index) {
                                        var value = +me.getRightValue(rawValue);
                                        if (isNaN(value) || meta.data[index].hidden) {
                                            return;
                                        }
                                        min = Math.min(value, min);
                                        max = Math.max(value, max);
                                    });
                                }
                            });
                            me.min = (min === Number.POSITIVE_INFINITY ? 0 : min);
                            me.max = (max === Number.NEGATIVE_INFINITY ? 0 : max);
                            // Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
                            me.handleTickRangeOptions();
                        },
                        getTickLimit: function () {
                            var tickOpts = this.options.ticks;
                            var tickFontSize = helpers.valueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
                            return Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(this.drawingArea / (1.5 * tickFontSize)));
                        },
                        convertTicksToLabels: function () {
                            var me = this;
                            Chart.LinearScaleBase.prototype.convertTicksToLabels.call(me);
                            // Point labels
                            me.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);
                        },
                        getLabelForIndex: function (index, datasetIndex) {
                            return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
                        },
                        fit: function () {
                            if (this.options.pointLabels.display) {
                                fitWithPointLabels(this);
                            }
                            else {
                                fit(this);
                            }
                        },
                        /**
                         * Set radius reductions and determine new radius and center point
                         * @private
                         */
                        setReductions: function (largestPossibleRadius, furthestLimits, furthestAngles) {
                            var me = this;
                            var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
                            var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
                            var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
                            var radiusReductionBottom = -Math.max(furthestLimits.b - me.height, 0) / Math.cos(furthestAngles.b);
                            radiusReductionLeft = numberOrZero(radiusReductionLeft);
                            radiusReductionRight = numberOrZero(radiusReductionRight);
                            radiusReductionTop = numberOrZero(radiusReductionTop);
                            radiusReductionBottom = numberOrZero(radiusReductionBottom);
                            me.drawingArea = Math.min(Math.round(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2), Math.round(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
                            me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
                        },
                        setCenterPoint: function (leftMovement, rightMovement, topMovement, bottomMovement) {
                            var me = this;
                            var maxRight = me.width - rightMovement - me.drawingArea;
                            var maxLeft = leftMovement + me.drawingArea;
                            var maxTop = topMovement + me.drawingArea;
                            var maxBottom = me.height - bottomMovement - me.drawingArea;
                            me.xCenter = Math.round(((maxLeft + maxRight) / 2) + me.left);
                            me.yCenter = Math.round(((maxTop + maxBottom) / 2) + me.top);
                        },
                        getIndexAngle: function (index) {
                            var angleMultiplier = (Math.PI * 2) / getValueCount(this);
                            var startAngle = this.chart.options && this.chart.options.startAngle ?
                                this.chart.options.startAngle :
                                0;
                            var startAngleRadians = startAngle * Math.PI * 2 / 360;
                            // Start from the top instead of right, so remove a quarter of the circle
                            return index * angleMultiplier + startAngleRadians;
                        },
                        getDistanceFromCenterForValue: function (value) {
                            var me = this;
                            if (value === null) {
                                return 0; // null always in center
                            }
                            // Take into account half font size + the yPadding of the top value
                            var scalingFactor = me.drawingArea / (me.max - me.min);
                            if (me.options.ticks.reverse) {
                                return (me.max - value) * scalingFactor;
                            }
                            return (value - me.min) * scalingFactor;
                        },
                        getPointPosition: function (index, distanceFromCenter) {
                            var me = this;
                            var thisAngle = me.getIndexAngle(index) - (Math.PI / 2);
                            return {
                                x: Math.round(Math.cos(thisAngle) * distanceFromCenter) + me.xCenter,
                                y: Math.round(Math.sin(thisAngle) * distanceFromCenter) + me.yCenter
                            };
                        },
                        getPointPositionForValue: function (index, value) {
                            return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
                        },
                        getBasePosition: function () {
                            var me = this;
                            var min = me.min;
                            var max = me.max;
                            return me.getPointPositionForValue(0, me.beginAtZero ? 0 :
                                min < 0 && max < 0 ? max :
                                    min > 0 && max > 0 ? min :
                                        0);
                        },
                        draw: function () {
                            var me = this;
                            var opts = me.options;
                            var gridLineOpts = opts.gridLines;
                            var tickOpts = opts.ticks;
                            var valueOrDefault = helpers.valueOrDefault;
                            if (opts.display) {
                                var ctx = me.ctx;
                                var startAngle = this.getIndexAngle(0);
                                // Tick Font
                                var tickFontSize = valueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
                                var tickFontStyle = valueOrDefault(tickOpts.fontStyle, globalDefaults.defaultFontStyle);
                                var tickFontFamily = valueOrDefault(tickOpts.fontFamily, globalDefaults.defaultFontFamily);
                                var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
                                helpers.each(me.ticks, function (label, index) {
                                    // Don't draw a centre value (if it is minimum)
                                    if (index > 0 || tickOpts.reverse) {
                                        var yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
                                        // Draw circular lines around the scale
                                        if (gridLineOpts.display && index !== 0) {
                                            drawRadiusLine(me, gridLineOpts, yCenterOffset, index);
                                        }
                                        if (tickOpts.display) {
                                            var tickFontColor = valueOrDefault(tickOpts.fontColor, globalDefaults.defaultFontColor);
                                            ctx.font = tickLabelFont;
                                            ctx.save();
                                            ctx.translate(me.xCenter, me.yCenter);
                                            ctx.rotate(startAngle);
                                            if (tickOpts.showLabelBackdrop) {
                                                var labelWidth = ctx.measureText(label).width;
                                                ctx.fillStyle = tickOpts.backdropColor;
                                                ctx.fillRect(-labelWidth / 2 - tickOpts.backdropPaddingX, -yCenterOffset - tickFontSize / 2 - tickOpts.backdropPaddingY, labelWidth + tickOpts.backdropPaddingX * 2, tickFontSize + tickOpts.backdropPaddingY * 2);
                                            }
                                            ctx.textAlign = 'center';
                                            ctx.textBaseline = 'middle';
                                            ctx.fillStyle = tickFontColor;
                                            ctx.fillText(label, 0, -yCenterOffset);
                                            ctx.restore();
                                        }
                                    }
                                });
                                if (opts.angleLines.display || opts.pointLabels.display) {
                                    drawPointLabels(me);
                                }
                            }
                        }
                    });
                    Chart.scaleService.registerScaleType('radialLinear', LinearRadialScale, defaultConfig);
                };
            }, { "25": 25, "34": 34, "45": 45 }], 58: [function (require, module, exports) {
                /* global window: false */
                'use strict';
                var moment = require(1);
                moment = typeof moment === 'function' ? moment : window.moment;
                var defaults = require(25);
                var helpers = require(45);
                // Integer constants are from the ES6 spec.
                var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
                var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
                var INTERVALS = {
                    millisecond: {
                        common: true,
                        size: 1,
                        steps: [1, 2, 5, 10, 20, 50, 100, 250, 500]
                    },
                    second: {
                        common: true,
                        size: 1000,
                        steps: [1, 2, 5, 10, 30]
                    },
                    minute: {
                        common: true,
                        size: 60000,
                        steps: [1, 2, 5, 10, 30]
                    },
                    hour: {
                        common: true,
                        size: 3600000,
                        steps: [1, 2, 3, 6, 12]
                    },
                    day: {
                        common: true,
                        size: 86400000,
                        steps: [1, 2, 5]
                    },
                    week: {
                        common: false,
                        size: 604800000,
                        steps: [1, 2, 3, 4]
                    },
                    month: {
                        common: true,
                        size: 2.628e9,
                        steps: [1, 2, 3]
                    },
                    quarter: {
                        common: false,
                        size: 7.884e9,
                        steps: [1, 2, 3, 4]
                    },
                    year: {
                        common: true,
                        size: 3.154e10
                    }
                };
                var UNITS = Object.keys(INTERVALS);
                function sorter(a, b) {
                    return a - b;
                }
                function arrayUnique(items) {
                    var hash = {};
                    var out = [];
                    var i, ilen, item;
                    for (i = 0, ilen = items.length; i < ilen; ++i) {
                        item = items[i];
                        if (!hash[item]) {
                            hash[item] = true;
                            out.push(item);
                        }
                    }
                    return out;
                }
                /**
                 * Returns an array of {time, pos} objects used to interpolate a specific `time` or position
                 * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is
                 * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other
                 * extremity (left + width or top + height). Note that it would be more optimized to directly
                 * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need
                 * to create the lookup table. The table ALWAYS contains at least two items: min and max.
                 *
                 * @param {Number[]} timestamps - timestamps sorted from lowest to highest.
                 * @param {String} distribution - If 'linear', timestamps will be spread linearly along the min
                 * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.
                 * If 'series', timestamps will be positioned at the same distance from each other. In this
                 * case, only timestamps that break the time linearity are registered, meaning that in the
                 * best case, all timestamps are linear, the table contains only min and max.
                 */
                function buildLookupTable(timestamps, min, max, distribution) {
                    if (distribution === 'linear' || !timestamps.length) {
                        return [
                            { time: min, pos: 0 },
                            { time: max, pos: 1 }
                        ];
                    }
                    var table = [];
                    var items = [min];
                    var i, ilen, prev, curr, next;
                    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
                        curr = timestamps[i];
                        if (curr > min && curr < max) {
                            items.push(curr);
                        }
                    }
                    items.push(max);
                    for (i = 0, ilen = items.length; i < ilen; ++i) {
                        next = items[i + 1];
                        prev = items[i - 1];
                        curr = items[i];
                        // only add points that breaks the scale linearity
                        if (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {
                            table.push({ time: curr, pos: i / (ilen - 1) });
                        }
                    }
                    return table;
                }
                // @see adapted from http://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/
                function lookup(table, key, value) {
                    var lo = 0;
                    var hi = table.length - 1;
                    var mid, i0, i1;
                    while (lo >= 0 && lo <= hi) {
                        mid = (lo + hi) >> 1;
                        i0 = table[mid - 1] || null;
                        i1 = table[mid];
                        if (!i0) {
                            // given value is outside table (before first item)
                            return { lo: null, hi: i1 };
                        }
                        else if (i1[key] < value) {
                            lo = mid + 1;
                        }
                        else if (i0[key] > value) {
                            hi = mid - 1;
                        }
                        else {
                            return { lo: i0, hi: i1 };
                        }
                    }
                    // given value is outside table (after last item)
                    return { lo: i1, hi: null };
                }
                /**
                 * Linearly interpolates the given source `value` using the table items `skey` values and
                 * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')
                 * returns the position for a timestamp equal to 42. If value is out of bounds, values at
                 * index [0, 1] or [n - 1, n] are used for the interpolation.
                 */
                function interpolate(table, skey, sval, tkey) {
                    var range = lookup(table, skey, sval);
                    // Note: the lookup table ALWAYS contains at least 2 items (min and max)
                    var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;
                    var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;
                    var span = next[skey] - prev[skey];
                    var ratio = span ? (sval - prev[skey]) / span : 0;
                    var offset = (next[tkey] - prev[tkey]) * ratio;
                    return prev[tkey] + offset;
                }
                /**
                 * Convert the given value to a moment object using the given time options.
                 * @see http://momentjs.com/docs/#/parsing/
                 */
                function momentify(value, options) {
                    var parser = options.parser;
                    var format = options.parser || options.format;
                    if (typeof parser === 'function') {
                        return parser(value);
                    }
                    if (typeof value === 'string' && typeof format === 'string') {
                        return moment(value, format);
                    }
                    if (!(value instanceof moment)) {
                        value = moment(value);
                    }
                    if (value.isValid()) {
                        return value;
                    }
                    // Labels are in an incompatible moment format and no `parser` has been provided.
                    // The user might still use the deprecated `format` option to convert his inputs.
                    if (typeof format === 'function') {
                        return format(value);
                    }
                    return value;
                }
                function parse(input, scale) {
                    if (helpers.isNullOrUndef(input)) {
                        return null;
                    }
                    var options = scale.options.time;
                    var value = momentify(scale.getRightValue(input), options);
                    if (!value.isValid()) {
                        return null;
                    }
                    if (options.round) {
                        value.startOf(options.round);
                    }
                    return value.valueOf();
                }
                /**
                 * Returns the number of unit to skip to be able to display up to `capacity` number of ticks
                 * in `unit` for the given `min` / `max` range and respecting the interval steps constraints.
                 */
                function determineStepSize(min, max, unit, capacity) {
                    var range = max - min;
                    var interval = INTERVALS[unit];
                    var milliseconds = interval.size;
                    var steps = interval.steps;
                    var i, ilen, factor;
                    if (!steps) {
                        return Math.ceil(range / (capacity * milliseconds));
                    }
                    for (i = 0, ilen = steps.length; i < ilen; ++i) {
                        factor = steps[i];
                        if (Math.ceil(range / (milliseconds * factor)) <= capacity) {
                            break;
                        }
                    }
                    return factor;
                }
                /**
                 * Figures out what unit results in an appropriate number of auto-generated ticks
                 */
                function determineUnitForAutoTicks(minUnit, min, max, capacity) {
                    var ilen = UNITS.length;
                    var i, interval, factor;
                    for (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
                        interval = INTERVALS[UNITS[i]];
                        factor = interval.steps ? interval.steps[interval.steps.length - 1] : MAX_INTEGER;
                        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
                            return UNITS[i];
                        }
                    }
                    return UNITS[ilen - 1];
                }
                /**
                 * Figures out what unit to format a set of ticks with
                 */
                function determineUnitForFormatting(ticks, minUnit, min, max) {
                    var duration = moment.duration(moment(max).diff(moment(min)));
                    var ilen = UNITS.length;
                    var i, unit;
                    for (i = ilen - 1; i >= UNITS.indexOf(minUnit); i--) {
                        unit = UNITS[i];
                        if (INTERVALS[unit].common && duration.as(unit) >= ticks.length) {
                            return unit;
                        }
                    }
                    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
                }
                function determineMajorUnit(unit) {
                    for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
                        if (INTERVALS[UNITS[i]].common) {
                            return UNITS[i];
                        }
                    }
                }
                /**
                 * Generates a maximum of `capacity` timestamps between min and max, rounded to the
                 * `minor` unit, aligned on the `major` unit and using the given scale time `options`.
                 * Important: this method can return ticks outside the min and max range, it's the
                 * responsibility of the calling code to clamp values if needed.
                 */
                function generate(min, max, capacity, options) {
                    var timeOpts = options.time;
                    var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);
                    var major = determineMajorUnit(minor);
                    var stepSize = helpers.valueOrDefault(timeOpts.stepSize, timeOpts.unitStepSize);
                    var weekday = minor === 'week' ? timeOpts.isoWeekday : false;
                    var majorTicksEnabled = options.ticks.major.enabled;
                    var interval = INTERVALS[minor];
                    var first = moment(min);
                    var last = moment(max);
                    var ticks = [];
                    var time;
                    if (!stepSize) {
                        stepSize = determineStepSize(min, max, minor, capacity);
                    }
                    // For 'week' unit, handle the first day of week option
                    if (weekday) {
                        first = first.isoWeekday(weekday);
                        last = last.isoWeekday(weekday);
                    }
                    // Align first/last ticks on unit
                    first = first.startOf(weekday ? 'day' : minor);
                    last = last.startOf(weekday ? 'day' : minor);
                    // Make sure that the last tick include max
                    if (last < max) {
                        last.add(1, minor);
                    }
                    time = moment(first);
                    if (majorTicksEnabled && major && !weekday && !timeOpts.round) {
                        // Align the first tick on the previous `minor` unit aligned on the `major` unit:
                        // we first aligned time on the previous `major` unit then add the number of full
                        // stepSize there is between first and the previous major time.
                        time.startOf(major);
                        time.add(~~((first - time) / (interval.size * stepSize)) * stepSize, minor);
                    }
                    for (; time < last; time.add(stepSize, minor)) {
                        ticks.push(+time);
                    }
                    ticks.push(+time);
                    return ticks;
                }
                /**
                 * Returns the right and left offsets from edges in the form of {left, right}.
                 * Offsets are added when the `offset` option is true.
                 */
                function computeOffsets(table, ticks, min, max, options) {
                    var left = 0;
                    var right = 0;
                    var upper, lower;
                    if (options.offset && ticks.length) {
                        if (!options.time.min) {
                            upper = ticks.length > 1 ? ticks[1] : max;
                            lower = ticks[0];
                            left = (interpolate(table, 'time', upper, 'pos') -
                                interpolate(table, 'time', lower, 'pos')) / 2;
                        }
                        if (!options.time.max) {
                            upper = ticks[ticks.length - 1];
                            lower = ticks.length > 1 ? ticks[ticks.length - 2] : min;
                            right = (interpolate(table, 'time', upper, 'pos') -
                                interpolate(table, 'time', lower, 'pos')) / 2;
                        }
                    }
                    return { left: left, right: right };
                }
                function ticksFromTimestamps(values, majorUnit) {
                    var ticks = [];
                    var i, ilen, value, major;
                    for (i = 0, ilen = values.length; i < ilen; ++i) {
                        value = values[i];
                        major = majorUnit ? value === +moment(value).startOf(majorUnit) : false;
                        ticks.push({
                            value: value,
                            major: major
                        });
                    }
                    return ticks;
                }
                function determineLabelFormat(data, timeOpts) {
                    var i, momentDate, hasTime;
                    var ilen = data.length;
                    // find the label with the most parts (milliseconds, minutes, etc.)
                    // format all labels with the same level of detail as the most specific label
                    for (i = 0; i < ilen; i++) {
                        momentDate = momentify(data[i], timeOpts);
                        if (momentDate.millisecond() !== 0) {
                            return 'MMM D, YYYY h:mm:ss.SSS a';
                        }
                        if (momentDate.second() !== 0 || momentDate.minute() !== 0 || momentDate.hour() !== 0) {
                            hasTime = true;
                        }
                    }
                    if (hasTime) {
                        return 'MMM D, YYYY h:mm:ss a';
                    }
                    return 'MMM D, YYYY';
                }
                module.exports = function (Chart) {
                    var defaultConfig = {
                        position: 'bottom',
                        /**
                         * Data distribution along the scale:
                         * - 'linear': data are spread according to their time (distances can vary),
                         * - 'series': data are spread at the same distance from each other.
                         * @see https://github.com/chartjs/Chart.js/pull/4507
                         * @since 2.7.0
                         */
                        distribution: 'linear',
                        /**
                         * Scale boundary strategy (bypassed by min/max time options)
                         * - `data`: make sure data are fully visible, ticks outside are removed
                         * - `ticks`: make sure ticks are fully visible, data outside are truncated
                         * @see https://github.com/chartjs/Chart.js/pull/4556
                         * @since 2.7.0
                         */
                        bounds: 'data',
                        time: {
                            parser: false,
                            format: false,
                            unit: false,
                            round: false,
                            displayFormat: false,
                            isoWeekday: false,
                            minUnit: 'millisecond',
                            // defaults to unit's corresponding unitFormat below or override using pattern string from http://momentjs.com/docs/#/displaying/format/
                            displayFormats: {
                                millisecond: 'h:mm:ss.SSS a',
                                second: 'h:mm:ss a',
                                minute: 'h:mm a',
                                hour: 'hA',
                                day: 'MMM D',
                                week: 'll',
                                month: 'MMM YYYY',
                                quarter: '[Q]Q - YYYY',
                                year: 'YYYY' // 2015
                            },
                        },
                        ticks: {
                            autoSkip: false,
                            /**
                             * Ticks generation input values:
                             * - 'auto': generates "optimal" ticks based on scale size and time options.
                             * - 'data': generates ticks from data (including labels from data {t|x|y} objects).
                             * - 'labels': generates ticks from user given `data.labels` values ONLY.
                             * @see https://github.com/chartjs/Chart.js/pull/4507
                             * @since 2.7.0
                             */
                            source: 'auto',
                            major: {
                                enabled: false
                            }
                        }
                    };
                    var TimeScale = Chart.Scale.extend({
                        initialize: function () {
                            if (!moment) {
                                throw new Error('Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com');
                            }
                            this.mergeTicksOptions();
                            Chart.Scale.prototype.initialize.call(this);
                        },
                        update: function () {
                            var me = this;
                            var options = me.options;
                            // DEPRECATIONS: output a message only one time per update
                            if (options.time && options.time.format) {
                                console.warn('options.time.format is deprecated and replaced by options.time.parser.');
                            }
                            return Chart.Scale.prototype.update.apply(me, arguments);
                        },
                        /**
                         * Allows data to be referenced via 't' attribute
                         */
                        getRightValue: function (rawValue) {
                            if (rawValue && rawValue.t !== undefined) {
                                rawValue = rawValue.t;
                            }
                            return Chart.Scale.prototype.getRightValue.call(this, rawValue);
                        },
                        determineDataLimits: function () {
                            var me = this;
                            var chart = me.chart;
                            var timeOpts = me.options.time;
                            var unit = timeOpts.unit || 'day';
                            var min = MAX_INTEGER;
                            var max = MIN_INTEGER;
                            var timestamps = [];
                            var datasets = [];
                            var labels = [];
                            var i, j, ilen, jlen, data, timestamp;
                            // Convert labels to timestamps
                            for (i = 0, ilen = chart.data.labels.length; i < ilen; ++i) {
                                labels.push(parse(chart.data.labels[i], me));
                            }
                            // Convert data to timestamps
                            for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
                                if (chart.isDatasetVisible(i)) {
                                    data = chart.data.datasets[i].data;
                                    // Let's consider that all data have the same format.
                                    if (helpers.isObject(data[0])) {
                                        datasets[i] = [];
                                        for (j = 0, jlen = data.length; j < jlen; ++j) {
                                            timestamp = parse(data[j], me);
                                            timestamps.push(timestamp);
                                            datasets[i][j] = timestamp;
                                        }
                                    }
                                    else {
                                        timestamps.push.apply(timestamps, labels);
                                        datasets[i] = labels.slice(0);
                                    }
                                }
                                else {
                                    datasets[i] = [];
                                }
                            }
                            if (labels.length) {
                                // Sort labels **after** data have been converted
                                labels = arrayUnique(labels).sort(sorter);
                                min = Math.min(min, labels[0]);
                                max = Math.max(max, labels[labels.length - 1]);
                            }
                            if (timestamps.length) {
                                timestamps = arrayUnique(timestamps).sort(sorter);
                                min = Math.min(min, timestamps[0]);
                                max = Math.max(max, timestamps[timestamps.length - 1]);
                            }
                            min = parse(timeOpts.min, me) || min;
                            max = parse(timeOpts.max, me) || max;
                            // In case there is no valid min/max, set limits based on unit time option
                            min = min === MAX_INTEGER ? +moment().startOf(unit) : min;
                            max = max === MIN_INTEGER ? +moment().endOf(unit) + 1 : max;
                            // Make sure that max is strictly higher than min (required by the lookup table)
                            me.min = Math.min(min, max);
                            me.max = Math.max(min + 1, max);
                            // PRIVATE
                            me._horizontal = me.isHorizontal();
                            me._table = [];
                            me._timestamps = {
                                data: timestamps,
                                datasets: datasets,
                                labels: labels
                            };
                        },
                        buildTicks: function () {
                            var me = this;
                            var min = me.min;
                            var max = me.max;
                            var options = me.options;
                            var timeOpts = options.time;
                            var timestamps = [];
                            var ticks = [];
                            var i, ilen, timestamp;
                            switch (options.ticks.source) {
                                case 'data':
                                    timestamps = me._timestamps.data;
                                    break;
                                case 'labels':
                                    timestamps = me._timestamps.labels;
                                    break;
                                case 'auto':
                                default:
                                    timestamps = generate(min, max, me.getLabelCapacity(min), options);
                            }
                            if (options.bounds === 'ticks' && timestamps.length) {
                                min = timestamps[0];
                                max = timestamps[timestamps.length - 1];
                            }
                            // Enforce limits with user min/max options
                            min = parse(timeOpts.min, me) || min;
                            max = parse(timeOpts.max, me) || max;
                            // Remove ticks outside the min/max range
                            for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
                                timestamp = timestamps[i];
                                if (timestamp >= min && timestamp <= max) {
                                    ticks.push(timestamp);
                                }
                            }
                            me.min = min;
                            me.max = max;
                            // PRIVATE
                            me._unit = timeOpts.unit || determineUnitForFormatting(ticks, timeOpts.minUnit, me.min, me.max);
                            me._majorUnit = determineMajorUnit(me._unit);
                            me._table = buildLookupTable(me._timestamps.data, min, max, options.distribution);
                            me._offsets = computeOffsets(me._table, ticks, min, max, options);
                            me._labelFormat = determineLabelFormat(me._timestamps.data, timeOpts);
                            return ticksFromTimestamps(ticks, me._majorUnit);
                        },
                        getLabelForIndex: function (index, datasetIndex) {
                            var me = this;
                            var data = me.chart.data;
                            var timeOpts = me.options.time;
                            var label = data.labels && index < data.labels.length ? data.labels[index] : '';
                            var value = data.datasets[datasetIndex].data[index];
                            if (helpers.isObject(value)) {
                                label = me.getRightValue(value);
                            }
                            if (timeOpts.tooltipFormat) {
                                return momentify(label, timeOpts).format(timeOpts.tooltipFormat);
                            }
                            if (typeof label === 'string') {
                                return label;
                            }
                            return momentify(label, timeOpts).format(me._labelFormat);
                        },
                        /**
                         * Function to format an individual tick mark
                         * @private
                         */
                        tickFormatFunction: function (tick, index, ticks, formatOverride) {
                            var me = this;
                            var options = me.options;
                            var time = tick.valueOf();
                            var formats = options.time.displayFormats;
                            var minorFormat = formats[me._unit];
                            var majorUnit = me._majorUnit;
                            var majorFormat = formats[majorUnit];
                            var majorTime = tick.clone().startOf(majorUnit).valueOf();
                            var majorTickOpts = options.ticks.major;
                            var major = majorTickOpts.enabled && majorUnit && majorFormat && time === majorTime;
                            var label = tick.format(formatOverride ? formatOverride : major ? majorFormat : minorFormat);
                            var tickOpts = major ? majorTickOpts : options.ticks.minor;
                            var formatter = helpers.valueOrDefault(tickOpts.callback, tickOpts.userCallback);
                            return formatter ? formatter(label, index, ticks) : label;
                        },
                        convertTicksToLabels: function (ticks) {
                            var labels = [];
                            var i, ilen;
                            for (i = 0, ilen = ticks.length; i < ilen; ++i) {
                                labels.push(this.tickFormatFunction(moment(ticks[i].value), i, ticks));
                            }
                            return labels;
                        },
                        /**
                         * @private
                         */
                        getPixelForOffset: function (time) {
                            var me = this;
                            var size = me._horizontal ? me.width : me.height;
                            var start = me._horizontal ? me.left : me.top;
                            var pos = interpolate(me._table, 'time', time, 'pos');
                            return start + size * (me._offsets.left + pos) / (me._offsets.left + 1 + me._offsets.right);
                        },
                        getPixelForValue: function (value, index, datasetIndex) {
                            var me = this;
                            var time = null;
                            if (index !== undefined && datasetIndex !== undefined) {
                                time = me._timestamps.datasets[datasetIndex][index];
                            }
                            if (time === null) {
                                time = parse(value, me);
                            }
                            if (time !== null) {
                                return me.getPixelForOffset(time);
                            }
                        },
                        getPixelForTick: function (index) {
                            var ticks = this.getTicks();
                            return index >= 0 && index < ticks.length ?
                                this.getPixelForOffset(ticks[index].value) :
                                null;
                        },
                        getValueForPixel: function (pixel) {
                            var me = this;
                            var size = me._horizontal ? me.width : me.height;
                            var start = me._horizontal ? me.left : me.top;
                            var pos = (size ? (pixel - start) / size : 0) * (me._offsets.left + 1 + me._offsets.left) - me._offsets.right;
                            var time = interpolate(me._table, 'pos', pos, 'time');
                            return moment(time);
                        },
                        /**
                         * Crude approximation of what the label width might be
                         * @private
                         */
                        getLabelWidth: function (label) {
                            var me = this;
                            var ticksOpts = me.options.ticks;
                            var tickLabelWidth = me.ctx.measureText(label).width;
                            var angle = helpers.toRadians(ticksOpts.maxRotation);
                            var cosRotation = Math.cos(angle);
                            var sinRotation = Math.sin(angle);
                            var tickFontSize = helpers.valueOrDefault(ticksOpts.fontSize, defaults.global.defaultFontSize);
                            return (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation);
                        },
                        /**
                         * @private
                         */
                        getLabelCapacity: function (exampleTime) {
                            var me = this;
                            var formatOverride = me.options.time.displayFormats.millisecond; // Pick the longest format for guestimation
                            var exampleLabel = me.tickFormatFunction(moment(exampleTime), 0, [], formatOverride);
                            var tickLabelWidth = me.getLabelWidth(exampleLabel);
                            var innerWidth = me.isHorizontal() ? me.width : me.height;
                            var capacity = Math.floor(innerWidth / tickLabelWidth);
                            return capacity > 0 ? capacity : 1;
                        }
                    });
                    Chart.scaleService.registerScaleType('time', TimeScale, defaultConfig);
                };
            }, { "1": 1, "25": 25, "45": 45 }] }, {}, [7])(7);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdmVuZG9ycy9DaGFydC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7O0dBUUc7QUFDSCxDQUFDLFVBQVMsQ0FBQyxJQUFFLElBQUcsT0FBTyxPQUFPLEtBQUcsUUFBUSxJQUFFLE9BQU8sTUFBTSxLQUFHLFdBQVcsRUFBQztJQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUMsQ0FBQyxFQUFFLENBQUE7Q0FBQztLQUFLLElBQUcsT0FBTyxNQUFNLEtBQUcsVUFBVSxJQUFFLE1BQU0sQ0FBQyxHQUFHLEVBQUM7SUFBQyxNQUFNLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFBO0NBQUM7S0FBSTtJQUFDLElBQUksQ0FBQyxDQUFDO0lBQUEsSUFBRyxPQUFPLE1BQU0sS0FBRyxXQUFXLEVBQUM7UUFBQyxDQUFDLEdBQUMsTUFBTSxDQUFBO0tBQUM7U0FBSyxJQUFHLE9BQU8sTUFBTSxLQUFHLFdBQVcsRUFBQztRQUFDLENBQUMsR0FBQyxNQUFNLENBQUE7S0FBQztTQUFLLElBQUcsT0FBTyxJQUFJLEtBQUcsV0FBVyxFQUFDO1FBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQTtLQUFDO1NBQUk7UUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFBO0tBQUM7SUFBQSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFBO0NBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQztJQUFXLElBQUksTUFBTSxFQUFDLE1BQU0sRUFBQyxPQUFPLENBQUM7SUFBQSxPQUFPLENBQUMsY0FBVyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLElBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUM7UUFBQyxJQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDO1lBQUMsSUFBSSxDQUFDLEdBQUMsT0FBTyxPQUFPLElBQUUsVUFBVSxJQUFFLE9BQU8sQ0FBQztZQUFBLElBQUcsQ0FBQyxDQUFDLElBQUUsQ0FBQztnQkFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUFBLElBQUcsQ0FBQztnQkFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUFBLElBQUksQ0FBQyxHQUFDLElBQUksS0FBSyxDQUFDLHNCQUFzQixHQUFDLENBQUMsR0FBQyxHQUFHLENBQUMsQ0FBQztZQUFBLE1BQU0sQ0FBQyxDQUFDLElBQUksR0FBQyxrQkFBa0IsRUFBQyxDQUFDLENBQUE7U0FBQztRQUFBLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxFQUFDLE9BQU8sRUFBQyxFQUFFLEVBQUMsQ0FBQztRQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBQyxVQUFTLENBQUMsSUFBRSxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxDQUFBLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQSxDQUFBLENBQUMsQ0FBQSxJQUFJLENBQUMsR0FBQyxPQUFPLE9BQU8sSUFBRSxVQUFVLElBQUUsT0FBTyxDQUFDLENBQUEsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMs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QVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUN2QyxDQUFDO29CQUNELFNBQVMsRUFBRSxVQUFVLEdBQUc7d0JBQ3ZCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUN2QyxDQUFDO29CQUNELFdBQVcsRUFBRSxVQUFVLEdBQUc7d0JBQ3pCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUN2QyxDQUFDO29CQUNELFNBQVMsRUFBRSxVQUFVLEdBQUc7d0JBQ3ZCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUN2QyxDQUFDO29CQUNELFNBQVMsRUFBRSxVQUFVLEdBQUc7d0JBQ3ZCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUN2QyxDQUFDO29CQUNELEtBQUssRUFBRSxVQUFVLEdBQUc7d0JBQ25CLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUN2QyxDQUFDO29CQUNELElBQUksRUFBRSxVQUFVLEdBQUc7d0JBQ2xCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUN4QyxDQUFDO29CQUNELE9BQU8sRUFBRSxVQUFVLEdBQUc7d0JBQ3JCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUN4QyxDQUFDO29CQUNELE1BQU0sRUFBRSxVQUFVLEdBQUc7d0JBQ3BCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUN4QyxDQUFDO29CQUNE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QyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztvQkFDckUsQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7b0JBQ3JFLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO29CQUVyRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQztvQkFDbkQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUM7b0JBQ25ELElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO29CQUVuRCxPQUFPLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztnQkFDcEMsQ0FBQztnQkFFRCxTQUFTLE9BQU8sQ0FB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QUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQztvQkFDL0IsS0FBSyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7b0JBQ2xCLFdBQVcsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO29CQUM1QixXQUFXLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztvQkFDM0IsYUFBYSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7b0JBQzVCLFFBQVEsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO29CQUN6QixZQUFZLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQztvQkFDNUIsVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUM7b0JBQ3pCLFVBQVUsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO29CQUMzQixRQUFRLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztvQkFDdkIsUUFBUSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7b0JBQ3pCLFNBQVMsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO29CQUMxQixXQUFXLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQztvQkFDM0IsV0FBVyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7b0JBQzVCLFdBQVcsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO29CQUM1QixNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztvQkFDdkIsYUFBYSxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7b0JBQzVCLFdBQVcsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVB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QUFDO2dDQUMxQyxJQUFJLEtBQUssR0FBRyxFQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFDLENBQUM7Z0NBQy9ELElBQUksR0FBRyxHQUFHLEVBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUMsQ0FBQztnQ0FDekQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxVQUFVLElBQUksQ0FBQyxJQUFJLFFBQVEsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSSxRQUFRLENBQUMsQ0FBQztnQ0FDakgsSUFBSSxVQUFVLEdBQUcsQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksUUFBUSxDQUFDLENBQUM7Z0NBQzFJLElBQUksV0FBVyxHQUFHLENBQUMsVUFBVSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsRUFBRSxJQUFJLFFBQVEsQ0FBQyxDQUFDO2dDQUNySCxJQUFJLFdBQVcsR0FBRyxDQUFDLFVBQVUsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksUUFBUSxDQUFDLENBQUM7Z0NBQzdJLElBQUksTUFBTSxHQUFHLGdCQUFnQixHQUFHLEtBQUssQ0FBQztnQ0FDdEMsSUFBSSxHQUFHLEdBQUcsRUFBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUM7Z0NBQzNOLElBQUksR0FBRyxHQUFHLEVBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUM7Z0NBQ3ROLElBQUksSUFBSSxHQUFHLEVBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBQyxDQUFDO2dDQUN6RSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxlQUFlLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dDQUMvRSxNQUFNLEdBQUcsRUFBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBQyxDQUFDOzZCQUNoRTs0QkFFRCxLQUFLLENBQUMsV0FBVyxHQUFHLEVB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LEVBQUUsVUFBUyxLQUFLO3dCQUNwQixLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUN0RCxDQUFDO29CQUVEOzs7Ozs7Ozs7O3VCQVVHO29CQUNILFdBQVcsRUFBRSxVQUFTLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTTt3QkFDckQsSUFBSSxNQUFNLEVBQUU7NEJBQ1gsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDOzRCQUNyQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7NEJBRXRDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQzs0QkFDdEIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQzs0QkFDOUIsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDOzRCQUN0RCxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxHQUFHLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQzs0QkFDdkMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEdBQUcsS0FBSyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUM7NEJBQ3hFLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdB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